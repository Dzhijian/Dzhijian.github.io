<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>CoderDeng</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2019-01-02T13:48:30.532Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>CoderDeng</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>2018-年终总结</title>
    <link href="http://yoursite.com/2019/01/02/2018%E5%B9%B4%E7%BB%88%E6%80%BB%E7%BB%93/"/>
    <id>http://yoursite.com/2019/01/02/2018年终总结/</id>
    <published>2019-01-01T17:07:52.000Z</published>
    <updated>2019-01-02T13:48:30.532Z</updated>
    
    <content type="html"><![CDATA[<p>时间总是在不轻易间就流走了，2018年已经结束，不论好坏，我一直在路上。</p><h4 id="2018年的第一个决定就是报了专升本的学历继续教育。"><a href="#2018年的第一个决定就是报了专升本的学历继续教育。" class="headerlink" title="2018年的第一个决定就是报了专升本的学历继续教育。"></a>2018年的第一个决定就是报了专升本的学历继续教育。</h4><p>这个决定其实是在上大学的时候就想过了，大专生出来找工作，真的很吃亏。”学历是敲门砖”，这句话一点都没错。当初读大学时，很多人都说只要技术够硬，不怕没有好工作，或许是有这么一部分人，通过自己的努力在社会中找到了不错的工作，但是又能有多好呢，又有多少人能对自己的工作满意的。没有好的学历，在这个遍地大学生，高材生的城市，你有什么资本与人家竞争。 HR 在筛选简历的时候，你就已经输了八成了。好的公司每天收到的简历少的几百，多的上千，做IT互联网的公司真的是存在的这样的情况的。我不知道作为大专生，你的简历能有多优秀能被 HR 筛选上。也有人说，专升本在很多公司是不认可的，其实我也是这么觉得的，大多数公司都要求的是全日制本科以上的硬性要求，但是如果大家都是大专生，在同等条件下做对比的话，你有个本科证，或许这能成为你致胜的关键，没有哪一家公司不希望自己的员工不热爱学习的。我觉得不论有用没用，知识学了就是自己的，人生路漫长，很多问题要解决，没有足够的知识储备，怎么能够愉快的生存下去呢。4月份的考试考四科过了三科，10月份的考试，那段时间事情比较多，又要换工作，最后我没有去考。。。😔烦。。。新的课程已经开始上课了，这次不能再任性了，一定要全过。</p><h4 id="2018年的第二个决定就是报了-iOS-开发进阶的专业培训"><a href="#2018年的第二个决定就是报了-iOS-开发进阶的专业培训" class="headerlink" title="2018年的第二个决定就是报了 iOS 开发进阶的专业培训"></a>2018年的第二个决定就是报了 iOS 开发进阶的专业培训</h4><p>工作一年了，对自己的知识储备有了一定的了解，感觉自己处在一个瓶颈上，公司又没有人指导，所以只能靠自己摸索前进，这个过程比较漫长，又想着能够快速的提升自己，想着多学点底层知识，所以只能报了一个8800的网上培训班，包括 OpenGL 、iOS 安全攻防、iOS 框架学习的课程。对于只有一年工作经验的我来说，学习这些课程还是蛮吃力的，涉及的东西比较底层，而且大都是未接触的知识。如果能够把这些知识掌握，我的技术就能能到比较大的提升。但是一年下来，各种事情的干预，特别是学历提升那块有冲突，最后我也没有完整的学完其中的一项。希望2019年能够把这些课程全部搞定。</p><h4 id="2018年的第三个决定就是辞职第一家工作了一年的公司"><a href="#2018年的第三个决定就是辞职第一家工作了一年的公司" class="headerlink" title="2018年的第三个决定就是辞职第一家工作了一年的公司"></a>2018年的第三个决定就是辞职第一家工作了一年的公司</h4><p>2017年 实习就来到深圳找工作，没有想着回广州找工作。毕竟是我人生的第一份工作，所以我的工作态度是非常好的。经常无任何补贴的加班，我对加班不反感，想着刚出社会能多学点知识就多点，对自己是有好处的。比自己优秀，比自己好的人都还在努力奋斗，我又有什么资本可以做一条咸鱼。实习结束后，我也在没有找其他的公司，还是在这家公司继续工作，因为是一家外包公司，工作量比较多，接触的技术也比较多，所以我的技术提升也蛮快的。为什么辞职呢，因为老板承诺了年底会有年终奖，而且我也问了好几次，他都回我有，我们都辛苦了一年，没有任何要求，最后他还是失信了。我想一家公司老板连一点诚信都没有，连公司员工的利益都能拿来忽悠，一点担当都没有，我们员工还能相信他什么，所以年后出来我果断的离职了。</p><h4 id="第二份-iOS-开发工作"><a href="#第二份-iOS-开发工作" class="headerlink" title="第二份 iOS 开发工作"></a>第二份 iOS 开发工作</h4><p>金三银四，对于各行各业来说，三四月是最好找工作的和招人的。我准备可以一份三页的个人简历，主要是上家公司的项目经验多。期待薪资写了10k，一年工作经验写了10k，对于大专生是有飘了，但是我觉得自己值这个价。投了几家公司，比较好的公司没有回复，其中有一个原因就是我的学历不够，因为人家硬性要求要本科以上学历，再者就是工作年限不够，才一年的工作经验，是很难找到一份好的工作的。毕竟在深圳这个一线城市，互联网竞争是非常大的。没有足够的实力就等着被淘汰了。再面试了几家公司之后，我发现了自己的不足之处，就是笔试题不好。对一些基础的知识不能很好的表达出来，虽然懂，但是不知其所以然。技术问答也一般，很多东西会做，但是不知如何描述。知道不足后，我也快速的进行恶补，后面的面试就顺畅多了，但是给的薪资还是不能满足我，都只能开到8k。给我的理由都是一年经验还是太年轻了，经验不够，暂时给不了我要的标准。一周过后，手里拿了四五份8k 的 offer，感觉面试东奔西跑的，太累了， 最后我还是对这个社会妥协了，选择了一个创业公司，还是以外包为主的，在高新园，当然薪资只有8k。早上十点上班，晚上7点下班，不打卡，周末双休。主要是周末双休可以让我自己的时间多一些，可以上学历提升的课程和技术提升。</p><h4 id="从龙胜到后瑞-从130飚到140"><a href="#从龙胜到后瑞-从130飚到140" class="headerlink" title="从龙胜到后瑞,从130飚到140."></a>从龙胜到后瑞,从130飚到140.</h4><p>之前一直住龙胜，因为我哥也住那边，没有住一起，自己住，离上班的地方也不远，后来工作换在高新园之后就要准备搬了，刚好在后瑞那边的朋友也要换地方住，还有几个朋友也要一起，分别是阿潮、阿渡、阿平，还有我，所以呢，所以呢选择在了后瑞，一开始是四个人，都是好朋友，找了一个小区，比较旧，复式的没有电梯，67楼是连在一起的，地方够大，而且小区内有篮球场是我最钟意的，哈哈哈😆，贼爽，只不过没有电梯，要爬6楼。搬到这边之后只能说酒喝的更多了，每周都喝，一箱两箱的，有朋友来的时候还三四箱，真的除了酒就不能喝其他的吗！！！不能吧。。。一个月时间就十几箱酒😆。一开始是我们四人住，一层有三个房间，都安排给他们三人了，我自己住七楼，刚开始几天我都睡不着，还睡出冷汗。。。可能还不习惯吧。下班回来阿平会做好饭菜等我们一起吃，我下班7点回来就8点了，他们比较下班比较早，真的非常Nice，几个月时间我的体重从130飙到了140。后来增潮他哥哥锐哥出来深圳了，准备培训前端，然后一个朋友阿辉今年大学毕业在广州那边的百度上班，不满意后下来深圳，在我们的建议下，让他跟锐哥一起去培训前端，这样就住了6人。除了啊潮他哥，剩下的我们都是高中的同班同学真的好有缘。我每天下班回来吃完饭喝会茶就会抱起电脑学习，可能我自己的忧患意识比较重，一天不学习就感觉浑身不舒服了，没办法，我只是个渣渣，不努力怎么生存下去。经常学习到半夜两点，上班这么久感触很多，比我优秀的，比我好的人，还在不断的努力提升自己，我有什么条件可以做一条咸鱼。 可能他们也受了我的影响，阿渡也重新学起了代码，阿潮也在自学 Python，准备辞职转行了，好好地国企就这样准备辞了，阿辉和锐哥有问题回来问我，学习气氛相当可以，希望他们能够坚持下去，这一行的路不是那么好走。后来阿平上了广州，来了阿峰，硬件工程师，也是高中同学，现在是外派到华为那边上班，这人的思想有点不同，想躺着赚钱的，每天下班回来就说累，吐槽华为那边怎样怎样，在为人处事上也有欠缺，经常批评教育他。</p><h4 id="我是个假的-iOS-开发工程师？"><a href="#我是个假的-iOS-开发工程师？" class="headerlink" title="我是个假的 iOS 开发工程师？"></a>我是个假的 iOS 开发工程师？</h4><p>我是个假的 iOS 开发工程师！为什么这么说呢？在这家公司基本没有加班过，唯一的一次加班是等着跟一位在英国的华人后台对需求，因为时差问题，所以要等到八点才开始，哈哈哈哈。其实也不是公司没有业务做，一开始工作还是蛮赶的，只是我能够按时的完成，所以不需要加班，7点一到我就下班了，其他的前端开发经常加班。在这家公司我先是迭代了一个商城的项目，后面又独立完成了一个医药的项目，期间也完成了其他项目的需求修改，工作量是满满的。7月中旬开始基本没有 App 的项目了，只是做一些修修改改的工作。这段时候感觉好空虚，感觉每天都在划水，一点都不充实，老板找我谈了一下，问我有没有兴趣做前端页面，我说有啊，前端我是一定要学的，只是现阶段我的侧重点还在 App 上，还是以 iOS 开发为主。毕竟这一行我投入的时间精力太多了。不过公司既然能给我时间学习，我当然会抓住这个机会。老板给我两周的时间学习前端 Vue 框架，两周后让我跟着几个前端工程师做项目。大学的时候我学过web前端的知识，上手前端还是蛮快的，学习了两周后，老板就让我跟着他们前端做项目了，一开始我只是帮他们打打杂，写写页面，不得不说，前端的代码就是比移动端的爽，我们移动端需要一大堆代码才是实现的功能，全端几行就够了。这段事假在公司我就学前端知识，回家我就学 iOS 知识，感觉充实了一些。不过在前端打杂了一个月之后，我重新考虑了自己的职业定位，还是要以 iOS 为主，8月底我跟老板提出了离职申请，我说我已经在拖累公司了，编辑好一段长文发给了老板，老板下午回来就找我谈话了，聊了很久，他是非常想留住我，不肯我走，让我在公司待着，有我在，App 这边他放心。我跟他说的了我离职的原因，主要是太闲了，根本不像一个软件开发工程师，做前端页面也不难，打杂不是我要的。可能很多人都会觉得我傻，工作轻松，闲不是很好嘛，但是我不想做咸鱼啊，我的职业路还远，不能对自己不负责。老板让我再考虑一下跟他说，我直接说，我明天再跟你提一次离职，哈哈哈哈。又聊了好多，最后老板还是没同意，他说让我独自负责维护迭代一个前端的项目，再做两个月，等10月份国庆过后，让我再考虑去留。这么好的老板我也不能再说什么了，不过已经准备好国庆后再跟他提离职申请了。讲真，这家公司的人都挺好的，老板也很 Nice，给我学习时间，有时候我都觉得不好意识。就这样，我自己负责了一个前端项目，是用 Vue框架的，我感觉这js框架非常可以。在前端同事的指导下，自己给这个项目迭代了几个版本，转眼国庆到了，我再次提出了申请，老板又再一次感动到了我，这次他没有强留，他说，有面试你就去面试，没面试你就回来上班。我想辞掉再去找的，没想到老板对我这么好。要不是我有自己的规划，或许我会在这家公司待蛮久的，而不是这五六个月时间。因为太闲了，我选择离职，或许这是我2018年做的最傻的决定，也可能是我最机智的决定。哈哈哈哈。</p><h4 id="重新开始找工作。"><a href="#重新开始找工作。" class="headerlink" title="重新开始找工作。"></a>重新开始找工作。</h4><p>金九银十，我已经错过了九月，十月份我必须抓住。我自己也没想到，自己会这么快再次换工作。哈哈哈哈。这次还是三页的简历，对之前的做了修改，期待薪资我写了12-13k。对于面试我做了很久的准备了，从笔试到技术问答，到对面试官的内心猜测，我都做了准备。不过呢。。。。还是出现了问题，面试是很能体现自己能力的时候，特别是技术上，这次我也发现了自己的不足，在一家公司技术面试过程中，各方面都还好，问题出在音视频处理上，之前我大都是用三方框架，音视频的底层了解不够，他们要的是会处理底层的，因为他们的 App 有几千万的用户量，需要的技术比较牛逼的，我只是个渣渣，没办法，最后这家我钟意的公司 GG 了。面试了六七家公司，最后也就这家公司没有给 offer， 其他的都给了offer，薪资从10.5k到12k 的。 从笔试，到技术问答，到 HR 面，都还可以。<br>不过问题还是有，总结一下：</p><blockquote><ol><li>在谈薪资的时候，为了压薪资还聊了很多算法与数据结构，不得不承认，这一块，我是渣渣；</li><li>才毕业一年，经验不够，薪资要的太高；</li><li>音视频底层知识不够，需要强化学习，OpenGL，FFmpeg，技术需要掌握；</li><li>算法与数据结构需要多补补；</li><li>大公司的学历要求高，没有面试机会；</li></ol></blockquote><p> 面试多了也烦了，转眼就要过年了，对比各家公司之后，我选了一家香港的外资企业，在深大地铁站旁边，深圳这边主要负责研发，他们主要就一个产品要维护迭代，薪资12k。早上9点到下午5点30分，大小周，小周周六上半天班。</p><h4 id="成功入坑了，大坑。"><a href="#成功入坑了，大坑。" class="headerlink" title="成功入坑了，大坑。"></a>成功入坑了，大坑。</h4><p>因为这家公司的 App 已经是上线到2.0的版本了，所以不是从0到1的过程，代码质量不敢恭维，真的渣到不能再渣了，oc 与 swift 混编的，之前是两个iOS开发，没有一点规范可言，各做各的，没有任何交流</p><blockquote><ol><li>布局都用 frame 算，Masonry 不会用；</li><li>网络请求都是新建一个AFHTTPSessionManager对象来管理；</li><li>页面都是请求完毕，拿到数据再添加控件，再显示数据；</li><li>命名用 v1,v2,v3,</li><li>字典转模型，全用 for循环遍历添加，MJExtension、YYModel不会用；</li><li>基本没有注释；</li><li>MVC 都分不清，Controller 里面一大推不知名的代码。</li><li>数据本地持久化瞎写，</li><li>该封装的不封装，不该封装的瞎写<br>。。。。</li></ol></blockquote><p>讲真这代码真的是我看过最烂的代码，我实习写的代码都比这好很多。深圳的水真的太深了，这样的开发者也有，我不知道他要是去其他公司写这样的代码会怎样。。。。就这样我成功入大坑了。在完成日常任务之余还要重构，是不是我这次选错了。。。😔，不过除了代码这块，公司其他的都还好，上班有说有笑的，经常在聊一些八卦，而且我又没怎么加班，除了发版本，基本6点前就走人了。。。。我的天啊，我真的是一名假的 iOS 开发工程师。。。。</p><h4 id="一年来-GitHub-总结"><a href="#一年来-GitHub-总结" class="headerlink" title="一年来 GitHub 总结"></a>一年来 GitHub 总结</h4><p><img src="http://image.coderdeng.xyz/2018_github_summary.png-style02" alt=""></p><p>年初我放了一个 ZJKitTool 的OC框架工具到自己的 GitHub 上，只在两个平台推了一次，后面我自己有在慢慢的维护，功能不多，主要是一些常用的封装。后来在9月份准备换工作的时候，我差不多花了一个月时间，用 Swift 写了一个斗鱼直播的案例，主要是页面，没有写到直播里面，斗鱼的接口加密不好处理，需要大量时间，所以后面我就暂时停了，也只在两个平台推了一次，两个项目没有多做推广，任凭他们去积攒 star数量， 一年时间Star总数为247，Fork 为41个，果然是渣渣。现在我又准备用 Swift 写一个音视频处理的案例ZJShortVideo，仿抖音的功能，准备在年后推出去。希望能够有好的收获。看着今年总的 commit 数量为480，大多数都是半夜熬出来的，想想时间真的过得好快，幸好头发都还在。。。<br><strong>付出不一定有收获，但坚持下去，一定会有意外的惊喜。</strong></p><h4 id="2018都是在工作和学习还有生活吗？？？"><a href="#2018都是在工作和学习还有生活吗？？？" class="headerlink" title="2018都是在工作和学习还有生活吗？？？"></a>2018都是在工作和学习还有生活吗？？？</h4><p>我的2018基本都在工作和学习，生活毫无色彩。。。<br>生活上感觉自己的伪装越来越重了,不够Real，不再幽默，Stress 越来越大，生活把我磨的没有一点菱角。或许我应该更有担当了，不能把一些东西无所谓下去了。<br>除了匆匆忙忙的会两趟老家，没有离开过深圳，没有回广州见见同学，没出去怎么玩过，感觉身边的朋友越来越少，生活变得没有趣味，真的是一名屌丝程序猿👨‍💻‍，活该是单身狗。。。loser。。<br>希望2019年自己能有时间好好休息，有足够多的时间回家看看老妈，能够愉快的出去玩一下，生活多点色彩，少一点工作，向优秀的人多学习，尽早脱单，头发依然飘逸。</p><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p> 一年下来，渣渣的我依旧渣渣，哈哈哈😆！</p><blockquote><p> GirlFriend 有吗？   false<br> House 有吗？        false<br> Car 有吗？          false<br> Deposit 有吗？      false</p></blockquote><p> 感谢2018年让我遇到的人和事。<br> 2019 好好努力，争取把 <strong>false</strong> 改成 <strong>true</strong> 💪, 我一直在路上。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;时间总是在不轻易间就流走了，2018年已经结束，不论好坏，我一直在路上。&lt;/p&gt;
&lt;h4 id=&quot;2018年的第一个决定就是报了专升本的学历继续教育。&quot;&gt;&lt;a href=&quot;#2018年的第一个决定就是报了专升本的学历继续教育。&quot; class=&quot;headerlink&quot; tit
      
    
    </summary>
    
      <category term="个人记录" scheme="http://yoursite.com/categories/%E4%B8%AA%E4%BA%BA%E8%AE%B0%E5%BD%95/"/>
    
    
  </entry>
  
  <entry>
    <title>iOS开发-Socket通信原理</title>
    <link href="http://yoursite.com/2018/09/10/iOSSocketStudy/"/>
    <id>http://yoursite.com/2018/09/10/iOSSocketStudy/</id>
    <published>2018-09-10T09:02:52.000Z</published>
    <updated>2018-09-18T03:28:33.358Z</updated>
    
    <content type="html"><![CDATA[<h3 id="网络协议"><a href="#网络协议" class="headerlink" title="网络协议"></a>网络协议</h3><p>1.网络协议有：TCP/IP、Scoket、HTTP等等。</p><p>OSI七层网络模型由上到下分别是</p><ol><li><strong>应用层</strong></li><li><strong>表示层</strong></li><li><strong>会话层</strong></li><li><strong>传输层</strong></li><li><strong>网络层</strong></li><li><strong>数据链路层</strong></li><li><strong>物理层</strong></li></ol><p><img src="http://p7l9kf5i4.bkt.clouddn.com/2018-09-12-15367423753911.jpg-style02" alt=""></p><ul><li>http协议对应于应用层</li><li>tcp协议对应于传输层</li><li>ip协议对应于网络层</li></ul><p><strong>TCP/IP</strong>是传输层协议，主要解决数据如何在网络中传输；而HTTP是应用层协议，主要解决如何包装数据。三者本质上没有可比性。  何况HTTP协议是基于TCP连接的。<br>网络层的”ip地址”可以唯一标识网络中的主机，而传输层的“协议+端口”可以唯一标识主机中的应用程序（进程）。这样利用三元组（ip地址，协议，端口）就可以标识网络的进程</p><p><strong>TCP/IP</strong>（Transmission Control Protocol/Internet Protocol）即传输控制协议/网间协议，是一个工业标准的协议集，它是为广域网（WANs）设计的。<br><strong>TCP/IP</strong>协议存在于OS中，网络服务通过OS提供，在OS中增加支持TCP/IP的系统调用——Berkeley套接字，如Socket，Connect，Send，Recv等<br><strong>UDP</strong>（User Data Protocol，用户数据报协议）是与TCP相对应的协议。它是属于TCP/IP协议族中的一种。如图：</p><p><img src="http://p7l9kf5i4.bkt.clouddn.com/2018-09-12-15367421343502.jpg-style02" alt="-w596"></p><p>TCP/IP协议族包括运输层、网络层、链路层，而socket所在位置如图，Socket是应用层与TCP/IP协议族通信的中间软件抽象层。<br><img src="http://p7l9kf5i4.bkt.clouddn.com/2018-09-12-15367424193534.jpg-style02" alt=""></p><h3 id="Http和Socket连接的区别"><a href="#Http和Socket连接的区别" class="headerlink" title="Http和Socket连接的区别"></a>Http和Socket连接的区别</h3><h4 id="TCP连接"><a href="#TCP连接" class="headerlink" title="TCP连接"></a>TCP连接</h4><p>TCP协议可以对上层网络提供接口，使上层网络数据的传输建立在“无差别”的网络之上。</p><p>建立起一个TCP连接需要经过“三次握手”：</p><blockquote><p>第一次握手：客户端发送syn包(syn=j)到服务器，并进入SYN_SEND状态，等待服务器确认；</p></blockquote><blockquote><p>第二次握手：服务器收到syn包，必须确认客户的SYN（ack=j+1），同时自己也发送一个SYN包（syn=k），即SYN+ACK包，此时服务器进入SYN_RECV状态；</p></blockquote><blockquote><p>第三次握手：客户端收到服务器的SYN＋ACK包，向服务器发送确认包ACK(ack=k+1)，此包发送完毕，客户端和服务器进入ESTABLISHED状态，完成三次握手。</p></blockquote><p>一个完整的三次握手也就是： 请求—应答—再次确认。</p><p><img src="http://p7l9kf5i4.bkt.clouddn.com/2018-09-12-15367425859400.png-style02" alt=""></p><p>握手过程中传送的包里不包含数据，三次握手完毕后，客户端与服务器才正式开始传送数据。理想状态下，TCP连接一旦建立，在通信双方中的任何一方主动关闭连接之前，TCP连接都将被一直保持下去。断开连接时服务器和客户端均可以主动发起断开TCP连接的请求，断开过程需要经过“四次握手”</p><h4 id="HTTP连接"><a href="#HTTP连接" class="headerlink" title="HTTP连接"></a>HTTP连接</h4><p>HTTP协议即超文本传送协议(HypertextTransferProtocol )是Web联网的基础，也是手机联网常用的协议之一，HTTP协议是建立在TCP协议之上的一种应用。</p><p>HTTP连接最显著的特点是客户端发送的每次请求都需要服务器回送响应，在请求结束后，会主动释放连接。从建立连接到关闭连接的过程称为“一次连接”。</p><p>1）在HTTP 1.0中，客户端的每次请求都要求建立一次单独的连接，在处理完本次请求后，就自动释放连接。</p><p>2）在HTTP 1.1中则可以在一次连接中处理多个请求，并且多个请求可以重叠进行，不需要等待一个请求结束后再发送下一个请求。</p><p>由于HTTP在每次请求结束后都会主动释放连接，因此HTTP连接是一种“短连接”，要保持客户端程序的在线状态，需要不断地向服务器发起连接请求。通常的</p><p>做法是即时不需要获得任何数据，客户端也保持每隔一段固定的时间向服务器发送一次“保持连接”的请求，服务器在收到该请求后对客户端进行回复，表明知道客户端“在线”。若服务器长时间无法收到客户端的请求，则认为客户端“下线”，若客户端长时间无法收到服务器的回复，则认为网络已经断开。</p><h3 id="Socket原理"><a href="#Socket原理" class="headerlink" title="Socket原理"></a>Socket原理</h3><h4 id="socket概念"><a href="#socket概念" class="headerlink" title="socket概念"></a>socket概念</h4><p>Socket:又称”套接字”,应用程序通过”套接字”向网络发送请求或应答,它是一个针对TCP和UDP编程的接口，借助它建立TCP/UDP连接。socket连接就是所谓的长连接,理论上客户端和服务器端一旦建立起连接将不会主动断掉.它是网络通信过程中端点的抽象表示，包含进行网络通信必须的五种信息：连接使用的协议，本地主机的IP地址，本地进程的协议端口，远地主机的IP地址，远地进程的协议端口。</p><p>应用层通过传输层进行数据通信时，TCP会遇到同时为多个应用程序进程提供并发服务的问题。多个TCP连接或多个应用程序进程可能需要通过同一个TCP协议端口传输数据。为了区别不同的应用程序进程和连接，许多计算机操作系统为应用程序与TCP／IP协议交互提供了套接字(Socket)接口。应用层可以和传输层通过Socket接口，区分来自不同应用程序进程或网络连接的通信，实现数据传输的并发服务。</p><p><img src="http://p7l9kf5i4.bkt.clouddn.com/2018-09-12-15367428458445.jpg-style02" alt=""></p><p>服务器端先初始化Socket，然后与端口绑定(bind)，对端口进行监听(listen)，调用accept阻塞，等待客户端连接。在这时如果有个客户端初始化一个Socket，然后连接服务器(connect)，如果连接成功，这时客户端与服务器端的连接就建立了。客户端发送数据请求，服务器端接收请求并处理请求，然后把回应数据发送给客户端，客户端读取数据，最后关闭连接，一次交互结束。</p><h4 id="建立socket连接"><a href="#建立socket连接" class="headerlink" title="建立socket连接"></a>建立socket连接</h4><p>建立Socket连接至少需要一对套接字，其中一个运行于客户端，称为ClientSocket，另一个运行于服务器端，称为ServerSocket。</p><p>套接字之间的连接过程分为三个步骤：服务器监听，客户端请求，连接确认。</p><p>服务器监听：服务器端套接字并不定位具体的客户端套接字，而是处于等待连接的状态，实时监控网络状态，等待客户端的连接请求。</p><p>客户端请求：指客户端的套接字提出连接请求，要连接的目标是服务器端的套接字。为此，客户端的套接字必须首先描述它要连接的服务器的套接字，指出服务器端套接字的地址和端口号，然后就向服务器端套接字提出连接请求。</p><p>连接确认：当服务器端套接字监听到或者说接收到客户端套接字的连接请求时，就响应客户端套接字的请求，建立一个新的线程，把服务器端套接字的描述发给客户端，一旦客户端确认了此描述，双方就正式建立连接。而服务器端套接字继续处于监听状态，继续接收其他客户端套接字的连接请求。</p><h4 id="SOCKET连接与TCP连接"><a href="#SOCKET连接与TCP连接" class="headerlink" title="SOCKET连接与TCP连接"></a>SOCKET连接与TCP连接</h4><p>创建Socket连接时，可以指定使用的传输层协议，Socket可以支持不同的传输层协议（TCP或UDP），当使用TCP协议进行连接时，该Socket连接就是一个TCP连接。</p><h4 id="Socket连接与HTTP连接"><a href="#Socket连接与HTTP连接" class="headerlink" title="Socket连接与HTTP连接"></a>Socket连接与HTTP连接</h4><p>由于通常情况下Socket连接就是TCP连接，因此Socket连接一旦建立，通信双方即可开始相互发送数据内容，直到双方连接断开。但在实际网络应用中，客户端到服务器之间的通信往往需要穿越多个中间节点，例如路由器、网关、防火墙等，大部分防火墙默认会关闭长时间处于非活跃状态的连接而导致Socket 连接断连，因此需要通过轮询告诉网络，该连接处于活跃状态。<br>    而HTTP连接使用的是“请求—响应”的方式，不仅在请求时需要先建立连接，而且需要客户端向服务器发出请求后，服务器端才能回复数据。很多情况下，需要服务器端主动向客户端推送数据，保持客户端与服务器数据的实时与同步。此时若双方建立的是Socket连接，服务器就可以直接将数据传送给客户端；若双方建立的是HTTP连接，则服务器需要等到客户端发送一次请求后才能将数据传回给客户端，因此，客户端定时向服务器端发送连接请求，不仅可以保持在线，同时也是在“询问”服务器是否有新的数据，如果有就将数据传给客户端。</p><h4 id="HTTP协议—Socket连接–TCP连接关系"><a href="#HTTP协议—Socket连接–TCP连接关系" class="headerlink" title="HTTP协议—Socket连接–TCP连接关系:"></a>HTTP协议—Socket连接–TCP连接关系:</h4><blockquote><ol><li>HTTP协议提供了封装或者显示数据的具体形式;</li><li>Socket连接提供了网络通信的能力;</li><li>TCP连接提供如何在网络中传输;</li><li>socket是纯C语言的,跨平台;</li><li>HTTP协议是基于socket的,底层使用的就是socket;</li><li>创建Socket连接时，可以指定使用的传输层协议(TCP或UDP),当使用TCP协议进行连接时，该Socket连接就是一个TCP连接。</li></ol></blockquote><h4 id="TCP和UDP区别"><a href="#TCP和UDP区别" class="headerlink" title="TCP和UDP区别"></a>TCP和UDP区别</h4><blockquote><ol><li>基于连接和无连接</li><li>对系统资源要求(TCP较多,UDP较少)</li><li>UDP程序结构较简单</li><li>TCP是流模式,UDP是数据报模式</li><li>可靠性:TCP保证数据正确性,UDP可能丢包,不保证数据准确性</li></ol></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;网络协议&quot;&gt;&lt;a href=&quot;#网络协议&quot; class=&quot;headerlink&quot; title=&quot;网络协议&quot;&gt;&lt;/a&gt;网络协议&lt;/h3&gt;&lt;p&gt;1.网络协议有：TCP/IP、Scoket、HTTP等等。&lt;/p&gt;
&lt;p&gt;OSI七层网络模型由上到下分别是&lt;/p&gt;
&lt;ol&gt;
      
    
    </summary>
    
      <category term="iOS 开发" scheme="http://yoursite.com/categories/iOS-%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="Socket" scheme="http://yoursite.com/tags/Socket/"/>
    
  </entry>
  
  <entry>
    <title>iOS-Swif Moya(一) 网络抽象层学习</title>
    <link href="http://yoursite.com/2018/08/10/iOS-Swift-Moya%E4%B8%80/"/>
    <id>http://yoursite.com/2018/08/10/iOS-Swift-Moya一/</id>
    <published>2018-08-10T05:06:12.000Z</published>
    <updated>2018-08-30T05:11:02.536Z</updated>
    
    <content type="html"><![CDATA[<h3 id="什么是Moya？"><a href="#什么是Moya？" class="headerlink" title="什么是Moya？"></a>什么是<code>Moya</code>？</h3><p><code>Moya</code>是基于 <code>Alamofire</code> 的更高网络请求抽象层。我们可以看做是网络管理层，用来封装 URL、请求头、请求体、请求参数等网络请求信息。客户端代码直接操作<code>Moya</code>管理请求，而不与<code>Alamofire</code>进行直接接触，形成更高层次的网络请求层，易于维护更新。</p><p><code>Moya</code> Github地址: <a href="https://github.com/`Moya`/`Moya`" target="_blank" rel="noopener">https://github.com/`Moya`/`Moya`</a></p><p><code>Moya</code>的一些特色功能:</p><ul><li>对正确的API端点访问进行编译时检查.</li><li>让您使用关联的枚举值定义不同端点的清晰用法.</li><li>把test stub作为一等公民，所以单元测试超级简单.</li><li>提供了 <code>ReactiveSwift</code> 和 <code>RxSwift</code> 扩展</li></ul><h3 id="Moya图解"><a href="#Moya图解" class="headerlink" title="Moya图解"></a>Moya图解</h3><p><img src="http://p7l9kf5i4.bkt.clouddn.com/2018-08-30-15356005023513.png-style02" alt=""></p><h3 id="安装配置"><a href="#安装配置" class="headerlink" title="安装配置"></a>安装配置</h3><p><strong>CocoaPods</strong></p><p>在您的Podfile文件中使用<code>Moya</code>:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">pod &apos;Moya&apos;, &apos;~&gt; 11.0&apos;</span><br><span class="line"></span><br><span class="line"># or </span><br><span class="line"></span><br><span class="line">pod &apos;Moya/RxSwift&apos;, &apos;~&gt; 11.0&apos;</span><br><span class="line"></span><br><span class="line"># or</span><br><span class="line"></span><br><span class="line">pod &apos;Moya/ReactiveSwift&apos;, &apos;~&gt; 11.0&apos;</span><br></pre></td></tr></table></figure><p>然后运行 pod install.</p><p>在任何您想使用<code>Moya</code>的文件中，请导入框架，通过 import Moya</p><h3 id="示例代码"><a href="#示例代码" class="headerlink" title="示例代码"></a>示例代码</h3><ol><li>首先创建一个 <code>Moya</code> 网络请求管理器 ZJHomeAPI.swift, 导入 Moya框架</li><li>然后定义一个 <code>MoyaProvider</code> 对象 <code>HomeProvider</code>，即请求发起对象,如果要首页发起网络请求就使用这个 <code>HomeProvider</code>。</li><li>接着声明一个 enum 枚举来对请求进行明确分类，这里我们定义两个枚举值分别表示获取斗鱼直播的推荐分类列表、分类列表</li><li>最后让这个 enum 实现 <code>TargetType</code> 协议，在这里面定义我们各个请求的 url、参数、header 等信息。</li></ol><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//  ZJHomeAPI.swift</span></span><br><span class="line"><span class="comment">//  DouYuLive</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//  Created by 邓志坚 on 2018/8/5.</span></span><br><span class="line"><span class="comment">//  Copyright © 2018年 邓志坚. All rights reserved.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="keyword">import</span> UIKit</span><br><span class="line"><span class="keyword">import</span> Moya</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="type">HomeProvider</span> = <span class="type">MoyaProvider</span>&lt;<span class="type">HomeAPI</span>&gt;()</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">enum</span> <span class="title">HomeAPI</span> </span>&#123;</span><br><span class="line">    <span class="keyword">case</span> recommendCategoryList <span class="comment">//推荐分类列表</span></span><br><span class="line">    <span class="keyword">case</span> liveCateList  <span class="comment">//分类列表</span></span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 实现 TargetType 协议</span></span><br><span class="line"><span class="class"><span class="keyword">extension</span> <span class="title">HomeAPI</span> : <span class="title">TargetType</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//服务器基地址</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">var</span> baseURL: <span class="type">URL</span> &#123;</span><br><span class="line">        <span class="keyword">switch</span> <span class="keyword">self</span> &#123;</span><br><span class="line">        <span class="keyword">case</span> .recommendCategoryList:</span><br><span class="line">            <span class="keyword">return</span> <span class="type">URL</span>(string: <span class="string">"https://apiv2.douyucdn.cn"</span>)!</span><br><span class="line">        <span class="keyword">case</span> .liveCateList:</span><br><span class="line">            <span class="keyword">return</span> <span class="type">URL</span>(string: <span class="string">"https://apiv2.douyucdn.cn"</span>)!</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//请求的具体URL</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">var</span> path: <span class="type">String</span> &#123;</span><br><span class="line">        <span class="keyword">switch</span> <span class="keyword">self</span> &#123;</span><br><span class="line">        <span class="keyword">case</span> .recommendCategoryList:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"/live/cate/getLiveRecommendCate2"</span></span><br><span class="line">        <span class="keyword">case</span> .liveCateList:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"/live/cate/getLiveCate1List"</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//请求类型</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">var</span> method: <span class="type">Moya</span>.<span class="type">Method</span> &#123;</span><br><span class="line">        <span class="keyword">switch</span> <span class="keyword">self</span> &#123;</span><br><span class="line">        <span class="keyword">case</span> .recommendCategoryList:</span><br><span class="line">            <span class="keyword">return</span> .<span class="keyword">get</span></span><br><span class="line">        <span class="keyword">case</span> .liveCateList:</span><br><span class="line">            <span class="keyword">return</span> .<span class="keyword">get</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//请求任务事件（这里附带上参数）</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">var</span> task: <span class="type">Task</span> &#123;</span><br><span class="line">        <span class="keyword">switch</span> <span class="keyword">self</span> &#123;</span><br><span class="line">        <span class="keyword">case</span> .recommendCategoryList:</span><br><span class="line">            <span class="keyword">var</span> params: [<span class="type">String</span>: <span class="type">Any</span>] = [:]</span><br><span class="line">            params[<span class="string">"client_sys"</span>] = <span class="string">"ios"</span></span><br><span class="line">            <span class="keyword">return</span> .requestParameters(parameters: params,</span><br><span class="line">                                      encoding: <span class="type">URLEncoding</span>.<span class="keyword">default</span>)</span><br><span class="line">        <span class="keyword">case</span> .liveCateList:</span><br><span class="line">            <span class="keyword">var</span> params: [<span class="type">String</span>: <span class="type">Any</span>] = [:]</span><br><span class="line">            params[<span class="string">"client_sys"</span>] = <span class="string">"ios"</span></span><br><span class="line">            <span class="keyword">return</span> .requestParameters(parameters: params,</span><br><span class="line">                                      encoding: <span class="type">URLEncoding</span>.<span class="keyword">default</span>)</span><br><span class="line">            </span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//是否执行Alamofire验证</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">var</span> validate: <span class="type">Bool</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//这个就是做单元测试模拟的数据，只会在单元测试文件中有作用</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">var</span> sampleData: <span class="type">Data</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"&#123;&#125;"</span>.data(using: <span class="type">String</span>.<span class="type">Encoding</span>.utf8)!</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//配置请求头</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">var</span> headers: [<span class="type">String</span> : <span class="type">String</span>]? &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在 <code>ViewController</code> 中导入 import SwiftyJSON,如果没有这个框架 则使用 <code>CocoaPods</code> 导入 <code>SwiftyJSON</code> 框架 <code>pod &#39;SwiftyJSON&#39;</code></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//推荐分类列表数据</span></span><br><span class="line"><span class="keyword">var</span> cateList:<span class="type">Array</span>&lt;<span class="type">JSON</span>&gt; = []</span><br><span class="line"><span class="comment">// 获取推荐分类数据</span></span><br><span class="line"><span class="keyword">private</span> <span class="function"><span class="keyword">func</span> <span class="title">loadCateListData</span><span class="params">()</span></span> &#123;</span><br><span class="line">        </span><br><span class="line">        <span class="type">HomeProvider</span>.request(<span class="type">HomeAPI</span>.recommendCategoryList) &#123; (response) <span class="keyword">in</span></span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">case</span> <span class="keyword">let</span> .success(result) = response &#123;</span><br><span class="line">                <span class="comment">//使用 SwiftJSON解析数据</span></span><br><span class="line">                <span class="keyword">let</span> data = <span class="keyword">try</span>? result.mapJSON()</span><br><span class="line">                <span class="keyword">let</span> json = <span class="type">JSON</span>(data!)</span><br><span class="line">                <span class="keyword">self</span>.cateList = json[<span class="string">"data"</span>][<span class="string">"cate2_list"</span>].arrayValue</span><br><span class="line">                <span class="keyword">self</span>.collectionView.reloadData()</span><br><span class="line">                <span class="built_in">print</span>(json)</span><br><span class="line">             &#125;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;什么是Moya？&quot;&gt;&lt;a href=&quot;#什么是Moya？&quot; class=&quot;headerlink&quot; title=&quot;什么是Moya？&quot;&gt;&lt;/a&gt;什么是&lt;code&gt;Moya&lt;/code&gt;？&lt;/h3&gt;&lt;p&gt;&lt;code&gt;Moya&lt;/code&gt;是基于 &lt;code&gt;Alamof
      
    
    </summary>
    
      <category term="Swift" scheme="http://yoursite.com/categories/Swift/"/>
    
    
      <category term="Moya" scheme="http://yoursite.com/tags/Moya/"/>
    
  </entry>
  
  <entry>
    <title>CSS样式学习笔记(一)</title>
    <link href="http://yoursite.com/2018/07/23/CSS-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E4%B8%80/"/>
    <id>http://yoursite.com/2018/07/23/CSS-学习笔记-一/</id>
    <published>2018-07-23T09:28:21.000Z</published>
    <updated>2018-07-23T09:35:43.000Z</updated>
    
    <content type="html"><![CDATA[<h4 id="1-z-index"><a href="#1-z-index" class="headerlink" title="1. z-index"></a>1. z-index</h4><p><strong>定义和用法</strong><br>z-index 属性设置元素的堆叠顺序。拥有更高堆叠顺序的元素总是会处于堆叠顺序较低的元素的前面。</p><blockquote><p>注释：元素可拥有负的 z-index 属性值。<br>注释：Z-index 仅能在定位元素上奏效（例如 position:absolute;）</p></blockquote><p><strong>说明</strong><br>该属性设置一个定位元素沿 z 轴的位置，z 轴定义为垂直延伸到显示区的轴。如果为正数，则离用户更近，为负数则表示离用户更远。</p><h4 id="2-box-shadow"><a href="#2-box-shadow" class="headerlink" title="2.box-shadow"></a>2.box-shadow</h4><p>box-shadow是向盒子添加阴影。支持添加一个或者多个</p><p>1、<strong>阴影模糊半径</strong>与<strong>阴影扩展半径</strong>的区别</p><p><strong>阴影模糊半径</strong>：此参数可选，其值只能是为正值，如果其值为0时，表示阴影不具有模糊效果，其值越大阴影的边缘就越模糊；</p><p><strong>阴影扩展半径</strong>：此参数可选，其值可以是正负值，如果值为正，则整个阴影都延展扩大，反之值为负值时，则缩小；</p><p>2、X轴偏移量和Y轴偏移量值可以设置为负数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">box-shadow: X轴偏移量 Y轴偏移量 [阴影模糊半径] [阴影扩展半径] [阴影颜色] [投影方式];</span><br></pre></td></tr></table></figure><p>示例代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">.box_shadow&#123;</span><br><span class="line">  box-shadow:4px 2px 6px #333333; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="http://p7l9kf5i4.bkt.clouddn.com/2018-07-23-15323287485919.jpg-style02" alt=""></p><blockquote><p>  注意：inset 可以写在参数的第一个或最后一个，其它位置是无效的。  </p></blockquote><h4 id="3-border-image"><a href="#3-border-image" class="headerlink" title="3.border-image"></a>3.border-image</h4><p>border-image 给边框添加背景图片<br><img src="http://p7l9kf5i4.bkt.clouddn.com/2018-07-23-15323293639081.jpg-style02" alt=""></p><h4 id="4-渐变色彩"><a href="#4-渐变色彩" class="headerlink" title="4.渐变色彩"></a>4.渐变色彩</h4><p>CSS3 <strong>Gradient</strong> 分为<strong>线性渐变</strong>(linear)和<strong>径向渐变</strong>(radial).由于不同的渲染引擎实现渐变的语法不同，这里我们只针对线性渐变的 W3C 标准语法来分析其用法，其余大家可以查阅相关资料。W3C 语法已经得到了 IE10+、Firefox19.0+、Chrome26.0+ 和 Opera12.1+等浏览器的支持。</p><p><strong>线性渐变:</strong><br><img src="http://p7l9kf5i4.bkt.clouddn.com/2018-07-23-15323296706095.jpg-style02" alt=""></p><p>参数：</p><p>第一个参数:指定渐变方向，可以用“角度”的关键词或“英文”来表示：<br><img src="http://p7l9kf5i4.bkt.clouddn.com/2018-07-23-15323297063748.jpg-style02" alt=""><br>第一个参数省略时，默认为“180deg”，等同于“to bottom”。</p><p>第二个和第三个参数，表示颜色的起始点和结束点，可以有多个颜色值。</p><p>示例代码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">background-image:linear-gradient(to left, red, orange,yellow,green,blue,indigo,violet);</span><br></pre></td></tr></table></figure><p>效果图：<br><img src="http://p7l9kf5i4.bkt.clouddn.com/2018-07-23-15323297799077.jpg-style02" alt=""></p><h4 id="5-文字与字体"><a href="#5-文字与字体" class="headerlink" title="5.文字与字体"></a>5.文字与字体</h4><p>text-overflow用来设置是否使用一个省略标记（…）标示对象内文本的溢出。<br>语法：<br><img src="http://p7l9kf5i4.bkt.clouddn.com/2018-07-23-15323300379240.jpg-style02" alt=""></p><p>但是<code>text-overflow</code>只是用来说明文字溢出时用什么方式显示，要实现溢出时产生省略号的效果，还须定义强制文本在一行内显示（<code>white-space:nowrap</code>）及溢出内容为隐藏（<code>overflow:hidden</code>），只有这样才能实现溢出文本显示省略号的效果，代码如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">text-overflow:ellipsis; </span><br><span class="line">overflow:hidden; </span><br><span class="line">white-space:nowrap;</span><br></pre></td></tr></table></figure><p>同时，<code>word-wrap</code>也可以用来设置文本行为，当前行超过指定容器的边界时是否断开转行。</p><p>语法：<br><img src="http://p7l9kf5i4.bkt.clouddn.com/2018-07-23-15323301635657.jpg-style02" alt=""><br><strong>normal</strong>为浏览器默认值，<strong>break-word</strong>设置在长单词或 URL地址内部进行换行，此属性不常用，用浏览器默认值即可。</p><p><strong>嵌入字体@font-face</strong><br>@font-face能够加载服务器端的字体文件，让浏览器端可以显示用户电脑里没有安装的字体</p><p>语法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">@font-face &#123;</span><br><span class="line">    font-family : 字体名称;</span><br><span class="line">    src : 字体文件在服务器上的相对或绝对路径;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样设置之后，就可以像使用普通字体一样在（font-*）中设置字体样式。</p><p>比如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">p &#123;</span><br><span class="line">    font-size :12px;</span><br><span class="line">    font-family : &quot;My Font&quot;;</span><br><span class="line">    /*必须项，设置@font-face中font-family同样的值*/</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>text-shadow</strong>可以用来设置文本的阴影效果。<br>语法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">text-shadow: X-Offset Y-Offset blur color;</span><br></pre></td></tr></table></figure><blockquote><p>X-Offset：表示阴影的水平偏移距离，其值为正值时阴影向右偏移，反之向左偏移；      </p></blockquote><blockquote><p>Y-Offset：是指阴影的垂直偏移距离，如果其值是正值时，阴影向下偏移，反之向上偏移；</p></blockquote><blockquote><p>Blur：是指阴影的模糊程度，其值不能是负值，如果值越大，阴影越模糊，反之阴影越清晰，如果不需要阴影模糊可以将Blur值设置为0；</p></blockquote><blockquote><p>Color：是指阴影的颜色，其可以使用rgba色。</p></blockquote><p>比如，我们可以用下面代码实现设置阴影效果。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">text-shadow</span>: 0 1<span class="selector-tag">px</span> 1<span class="selector-tag">px</span> <span class="selector-id">#fff</span></span><br></pre></td></tr></table></figure><h4 id="6-背景"><a href="#6-背景" class="headerlink" title="6.背景"></a>6.背景</h4><p><strong>background-origin</strong></p><p><strong>background-origin</strong> 设置元素背景图片的原始起始位置。</p><p>语法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">background-origin ： border-box | padding-box | content-box;</span><br></pre></td></tr></table></figure><p>参数分别表示背景图片是从边框，还是内边距（默认值），或者是内容区域开始显示。</p><p>效果如下：<br><img src="http://p7l9kf5i4.bkt.clouddn.com/2018-07-23-15323310614760.jpg-style02" alt=""></p><blockquote><p>注意：如果背景不是no-repeat，这个属性无效，它会从边框开始显示。</p></blockquote><p><strong>background-size</strong></p><p>设置背景图片的大小，以<strong>长度值</strong>或<strong>百分比</strong>显示，还可以通过<strong>cover</strong>和<strong>contain</strong>来对图片进行伸缩。</p><p>语法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">background-size: auto | &lt;长度值&gt; | &lt;百分比&gt; | cover | contain</span><br></pre></td></tr></table></figure><p>取值说明：</p><blockquote><p>1、<strong>auto</strong>：默认值，不改变背景图片的原始高度和宽度；</p></blockquote><blockquote><p>2、<strong>&lt;长度值&gt;</strong>：成对出现如200px 50px，将背景图片宽高依次设置为前面两个值，当设置一个值时，将其作为图片宽度值来等比缩放；</p></blockquote><blockquote><p>3、<strong>&lt;百分比&gt;</strong>：0％~100％之间的任何值，将背景图片宽高依次设置为所在元素宽高乘以前面百分比得出的数值，当设置一个值时同上；</p></blockquote><blockquote><p>4、<strong>cover</strong>：顾名思义为覆盖，即将背景图片等比缩放以填满整个容器；</p></blockquote><blockquote><p>5、<strong>contain</strong>：容纳，即将背景图片等比缩放至某一边紧贴容器边缘为止。</p></blockquote><blockquote><p>提示：大家可以在右边的编辑窗口输入自己的代码尝试不同取值的效果。</p></blockquote><p><strong>multiple backgrounds 多重背景</strong></p><p>多重背景，也就是CSS2里<code>background</code>的属性外加origin、clip和size组成的新<code>background</code>的多次叠加，缩写时为用逗号隔开的每组值；用分解写法时，如果有多个背景图片，而其他属性只有一个（例如<code>background-repeat</code>只有一个），表明所有背景图片应用该属性值。</p><p>语法缩写如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">background ： [background-color] | [background-image] | </span><br><span class="line">[background-position][/background-size] | [background-repeat] | </span><br><span class="line">[background-attachment] | [background-clip] | [background-origin],...</span><br></pre></td></tr></table></figure><p>可以把上面的缩写拆解成以下形式：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">background-image:url1,url2,...,urlN;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">background-repeat : repeat1,repeat2,...,repeatN;</span><br><span class="line">backround-position : position1,position2,...,positionN;</span><br><span class="line">background-size : size1,size2,...,sizeN;</span><br><span class="line">background-attachment : attachment1,attachment2,...,attachmentN;</span><br><span class="line">background-clip : clip1,clip2,...,clipN;</span><br><span class="line">background-origin : origin1,origin2,...,originN;</span><br><span class="line">background-color : color;</span><br></pre></td></tr></table></figure><p><strong>注意：</strong></p><p>用逗号隔开每组 background 的缩写值；<br>如果有 size 值，需要紧跟 position 并且用 “/“ 隔开；<br>如果有多个背景图片，而其他属性只有一个（例如 background-repeat 只有一个），表明所有背景图片应用该属性值。<br>background-color 只能设置一个。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;1-z-index&quot;&gt;&lt;a href=&quot;#1-z-index&quot; class=&quot;headerlink&quot; title=&quot;1. z-index&quot;&gt;&lt;/a&gt;1. z-index&lt;/h4&gt;&lt;p&gt;&lt;strong&gt;定义和用法&lt;/strong&gt;&lt;br&gt;z-index 属性设置元素
      
    
    </summary>
    
      <category term="CSS样式" scheme="http://yoursite.com/categories/CSS%E6%A0%B7%E5%BC%8F/"/>
    
    
      <category term="CSS样式" scheme="http://yoursite.com/tags/CSS%E6%A0%B7%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>iOS开发 蓝牙通信基础知识(一)</title>
    <link href="http://yoursite.com/2018/07/03/iOS%E5%BC%80%E5%8F%91-%E8%93%9D%E7%89%99%E9%80%9A%E4%BF%A1%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
    <id>http://yoursite.com/2018/07/03/iOS开发-蓝牙通信基础知识/</id>
    <published>2018-07-03T10:17:53.000Z</published>
    <updated>2018-07-03T10:23:28.212Z</updated>
    
    <content type="html"><![CDATA[<h3 id="一、-蓝牙常见名称与类别"><a href="#一、-蓝牙常见名称与类别" class="headerlink" title="一、 蓝牙常见名称与类别"></a>一、 蓝牙常见名称与类别</h3><ol><li>MFI ： make for ipad ,iphone, itouch 专们为苹果设备制作的设备，只有少数的硬件厂商才有苹果的MFI认证</li><li>BLE ： buletouch low energy，蓝牙4.0设备因为低耗电，所以也叫做BLE</li></ol><blockquote><p>peripheral,central ：外设和中心,发起连接的时central，被连接的设备为perilheral<br>service and characteristic ： 服务和特征 每个设备会提供服务和特征，类似于服务端的api，但是机构不同。每个外设会有很多服务，每个服务中包含很多字段，这些字段的权限一般分为 读read，写write，通知notiy几种，就是我们连接设备后具体需要操作的内容。<br>Description 每个characteristic可以对应一个或多个Description用户描述characteristic的信息或属性<br>MFI 开发使用ExternalAccessory 框架<br>4.0 BLE 开发使用CoreBluetooth 框架</p></blockquote><p><strong>蓝牙和版本的使用限制</strong></p><blockquote><p>蓝牙2.0 ：需要越狱设备才能使用，否则只有IOS设备和苹果认证的MFI设备才可以被IOS设备检索到<br>蓝牙4.0 ：IOS6以上系统，苹果开放了BLE通道，没有MFI认证的蓝牙设备可以连接。（4s之后的设备）<br>MFI认证设备（Make For ipod/ipad/iphone）无限制</p></blockquote><h3 id="二、CoreBluetooth框架介绍"><a href="#二、CoreBluetooth框架介绍" class="headerlink" title="二、CoreBluetooth框架介绍"></a>二、CoreBluetooth框架介绍</h3><p>CoreBluetooth框架的核心其实是两个东西，peripheral和central, 可以理解成外设和中心。对应他们分别有一组相关的API和类</p><p>CoreBluetooth框架有两种模式：一种是中心模式，以App 作为中心，连接其他的外部设备。 另一种是外设模式，使用手机作为其他中心设备的场景。</p><p><img src="http://p7l9kf5i4.bkt.clouddn.com/2018-07-03-15306127544950.jpg-style02" alt=""></p><p>每个设备都会有一些服务，每个服务里面都会有一些特征，特征就是具体键值对，提供数据的地方。每个特征属性分为这么几种：读，写，通知这么几种方式。</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//objcetive c特征的定义枚举</span></span><br><span class="line">  <span class="keyword">typedef</span> <span class="built_in">NS_OPTIONS</span>(<span class="built_in">NSUInteger</span>, CBCharacteristicProperties) &#123;</span><br><span class="line">      CBCharacteristicPropertyBroadcast     = <span class="number">0x01</span>,</span><br><span class="line">      CBCharacteristicPropertyRead  = <span class="number">0x02</span>,</span><br><span class="line">      CBCharacteristicPropertyWriteWithoutResponse  = <span class="number">0x04</span>,</span><br><span class="line">      CBCharacteristicPropertyWrite     = <span class="number">0x08</span>,</span><br><span class="line">      CBCharacteristicPropertyNotify    = <span class="number">0x10</span>,</span><br><span class="line">      CBCharacteristicPropertyIndicate  = <span class="number">0x20</span>,</span><br><span class="line">      CBCharacteristicPropertyAuthenticatedSignedWrites     = <span class="number">0x40</span>,</span><br><span class="line">      CBCharacteristicPropertyExtendedProperties    = <span class="number">0x80</span>,</span><br><span class="line">      CBCharacteristicPropertyNotifyEncryptionRequired <span class="built_in">NS_ENUM_AVAILABLE</span>(NA, <span class="number">6</span>_0)   = <span class="number">0x100</span>,</span><br><span class="line">      CBCharacteristicPropertyIndicateEncryptionRequired <span class="built_in">NS_ENUM_AVAILABLE</span>(NA, <span class="number">6</span>_0)    = <span class="number">0x200</span></span><br><span class="line">  &#125;;</span><br></pre></td></tr></table></figure><p>外设、服务、特征间的关系<br><img src="http://p7l9kf5i4.bkt.clouddn.com/2018-07-03-15306127742794.png-style02" alt=""></p><h3 id="三、蓝牙开发流程"><a href="#三、蓝牙开发流程" class="headerlink" title="三、蓝牙开发流程"></a>三、蓝牙开发流程</h3><h4 id="1-蓝牙中心模式流程"><a href="#1-蓝牙中心模式流程" class="headerlink" title="1.蓝牙中心模式流程"></a>1.蓝牙中心模式流程</h4><ol><li>建立中心角色</li><li>扫描外设（discover）</li><li>连接外设(connect)</li><li>扫描外设中的服务和特征(discover)<ul><li>4.1 获取外设的services</li><li>4.2 获取外设的Characteristics,获取Characteristics的值，获取Characteristics的Descriptor和Descriptor的值</li></ul></li><li>与外设做数据交互(explore and interact)</li><li>订阅Characteristic的通知</li><li>断开连接(disconnect)<em>**</em></li></ol><h4 id="蓝牙外设模式流程"><a href="#蓝牙外设模式流程" class="headerlink" title="蓝牙外设模式流程"></a>蓝牙外设模式流程</h4><ol><li>启动一个Peripheral管理对象</li><li>本地Peripheral设置服务,特性,描述，权限等等</li><li>Peripheral发送广告</li><li>设置处理订阅、取消订阅、读characteristic、写characteristic的委托方法</li></ol><h4 id="蓝牙设备状态"><a href="#蓝牙设备状态" class="headerlink" title="蓝牙设备状态"></a>蓝牙设备状态</h4><ol><li>待机状态（standby）：设备没有传输和发送数据，并且没有连接到任何设</li><li>广播状态（Advertiser）：周期性广播状态</li><li>扫描状态（Scanner）：主动寻找正在广播的设备</li><li>发起链接状态（Initiator）：主动向扫描设备发起连接。</li><li>主设备（Master）：作为主设备连接到其他设备。</li><li>从设备（Slave）：作为从设备连接到其他设备。</li></ol><h4 id="蓝牙设备的五种工作状态"><a href="#蓝牙设备的五种工作状态" class="headerlink" title="蓝牙设备的五种工作状态"></a>蓝牙设备的五种工作状态</h4><ol><li>准备（standby）</li><li>广播（advertising）</li><li>监听扫描（Scanning</li><li>发起连接（Initiating）</li><li>已连接（Connected）</li></ol><h3 id="四、蓝牙开发注意点"><a href="#四、蓝牙开发注意点" class="headerlink" title="四、蓝牙开发注意点"></a>四、蓝牙开发注意点</h3><ol><li><p>关于Mac地址的获取<br>自iOS7之后，苹果不支持获取Mac地址，只能用UUID来标识设备，要注意的是同一个设备在不同手机上显示的UUID不相同，但有的设备可以通过 “180A”这个服务来发现特征，再来读取 “2A23”这个特征值，可以获得Mac地址。如果你的蓝牙设备不支持这样获取,你可以跟硬件工程师沟通，来获得Mac地址，添加一个获取地址命令或者增加一个含地址的特征值都可以很容易的获取。上面获取地址的前提都是需要先建立连接，如果一定要在扫描的时候获得Mac地址，让硬件工程师把数据写入广播包里，看是否可行。</p></li><li><p>数据传输大小问题，最适宜的传输大小应该小于20字节，大于这个20个字节，数据丢失比较大，如果数据大于这个20字节可以分段发送</p></li><li><p>数据转换的问题<br>发送的蓝牙数据是一个数据包前三位是固定的所以前三位先不管，但是我们后面的数据是需要去获取的，需要获取系统的当前时间和 chensum（前三位+时间 = chensum）</p></li><li><p>下载一个LightBlue 协助开发<br>一个设备有很多服务，服务中又有很多特性，特性中又分读的，写的等，使用LightBlue，可以很快的找到你需要的特性。</p></li><li><p>一般的蓝牙都要支持重连和后台运行，如果扫描设备的时候,用这个方法<code>- (void)scanForPeripheralsWithServices:options:</code>没有指定特定的服务，而是用nil代替，设备在后台断开的时候是不会重连的。</p></li></ol><ol start="6"><li>蓝牙是可以同时连接多个外部设备。</li></ol><ol start="7"><li>关于<code>readValueForCharacteristic</code>和 <code>setNotifyValue:forCharacteristic:</code> 的区别， <code>readValueForCharacteristic</code>适合用来读取数据不怎么更新的特征值， 如果获取的数据是经常更新的，那就 一定要用<code>setNotifyValue:forCharacteristic:</code>来订阅这个特征。</li></ol><ol start="8"><li>当我们写入命令时<code>writeValue:forCharacteristic:type:</code>,这个type类用<code>CBCharacteristicWriteWithoutResponse</code>，这个特征值可读，还可以通知。</li></ol><ol start="9"><li><p>代理方法- (void)centralManagerDidUpdateState:(CBCentralManager *)central;一定要调用，否则会报错，这个方法只要设置中心设备的代理之后，就一定会走，我们最开始的扫描外设应放在这个方法里；</p></li><li><p>IOS对连接参数要求<br>另外附上苹果对connection interval的要求, 其实还有其他的连接参数要求, 比如slave latency, supervision timeout, 如果不满足这些, IOS设备会拒绝.</p><p>● Interval Max <em> (Slave Latency + 1) ≤ 2 seconds<br>● Interval Min ≥ 20 ms<br>● Interval Min + 20 ms ≤ Interval Max Slave Latency ≤ 4  //这个是这样么？？？<br>● connSupervisionTimeout ≤ 6 seconds<br>● Interval Max </em> (Slave Latency + 1) * 3 &lt; connSupervisionTimeout</p></li></ol><h3 id="五、名词解释"><a href="#五、名词解释" class="headerlink" title="五、名词解释"></a>五、名词解释</h3><ol><li><p>GAAT : Generic Attribute Profile , GATT配置文件是一个通用规范，用于在BLE链路上发送和接收被称为“属性”的数据块。目前所有的BLE应用都基于GATT。 蓝牙SIG规定了许多低功耗设备的配置文件。配置文件是设备如何在特定的应用程序中工作的规格说明。注意一个设备可以实现多个配置文件。例如，一个设备可能包括心率监测仪和电量检测。</p></li><li><p>Characteristic 一个characteristic包括一个单一变量和0-n个用来描述characteristic变量的descriptor，characteristic可以被认为是一个类型，类 似于类。</p></li><li><p>Descriptor Descriptor用来描述characteristic变量的属性。例如，一个descriptor可以规定一个可读的描述，或者一个characteristic变量可接受的范围，或者一个characteristic变量特定的测量单位。 Service service是characteristic的集合。例如，你可能有一个叫“Heart Rate Monitor(心率监测仪)”的service，它包括了很多characteristics，如“heart rate measurement(心率测量)”等。你可以在bluetooth.org 找到一个目前支持的基于GATT的配置文件和服务列表。</p></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;一、-蓝牙常见名称与类别&quot;&gt;&lt;a href=&quot;#一、-蓝牙常见名称与类别&quot; class=&quot;headerlink&quot; title=&quot;一、 蓝牙常见名称与类别&quot;&gt;&lt;/a&gt;一、 蓝牙常见名称与类别&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;MFI ： make for ipad ,iph
      
    
    </summary>
    
      <category term="iOS开发" scheme="http://yoursite.com/categories/iOS%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="蓝牙" scheme="http://yoursite.com/tags/%E8%93%9D%E7%89%99/"/>
    
  </entry>
  
  <entry>
    <title>iOS开发 NSPredicate-谓词的学习与使用</title>
    <link href="http://yoursite.com/2018/07/03/iOS%E5%BC%80%E5%8F%91-NSPredicate-%E8%B0%93%E8%AF%8D%E7%9A%84%E5%AD%A6%E4%B9%A0%E4%B8%8E%E4%BD%BF%E7%94%A8/"/>
    <id>http://yoursite.com/2018/07/03/iOS开发-NSPredicate-谓词的学习与使用/</id>
    <published>2018-07-03T04:00:29.000Z</published>
    <updated>2018-07-03T07:12:29.499Z</updated>
    
    <content type="html"><![CDATA[<p><strong>NSPredicate</strong><br>Cocoa 中提供了一个NSPredicate的类,该类主要用于指定过滤器的条件, 每一个对象通过谓词进行筛选,判断条件是否匹配。一种逻辑条件的定义，用于约束对获取或内存过滤的搜索。</p><h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><blockquote><p>谓词表示逻辑条件，可用于筛选对象集合。虽然直接从ns比较谓词、NSCompoundPredicate和NSExpression的实例创建谓词很常见，但是您经常从格式字符串创建谓词，该格式字符串由NSPredicate上的类方法解析。谓词格式字符串的例子包括:<br>简单的比较，例如grade = “7”或firstName如”Shaffiq”<br>大小写不敏感查找，如名称包含[cd] “itroen”<br>逻辑操作，例如(firstName like“Mark”)或(lastName like“Adderley”)<br>时间范围限制，例如日期介于{ $YESTERDAY， $TOMORROW}。<br>关系条件，如group.name，如“work*”<br>聚合操作，如@sum.items。价格&lt; 1000<br>有关完整的语法引用，请参阅谓词编程指南。<br>您还可以使用evaluate(with: substitute variables:)方法创建包含变量的谓词，以便在运行时.v替换具体值之前预定义谓词</p></blockquote><h3 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h3><p>1.<code>+ (NSPredicate *)predicateWithFormat:(NSString *)predicateFormat, ...;</code><br>创建并返回一个新的谓词，该谓词通过创建一个具有给定格式的新字符串并解析结果而形成。<br>有关格式字符串的格式和变量替换的限制的详细信息，请参阅谓词格式字符串语法。</p><p>2.<code>+ (NSPredicate *)predicateWithFormat:(NSString *)predicateFormat argumentArray:(nullable NSArray *)arguments;</code><br>通过将给定数组中的值替换为格式字符串并解析结果来初始化谓词。<br>有关格式字符串的格式和变量替换的限制的详细信息，请参阅谓词格式字符串语法。</p><p>3.<code>+ (NSPredicate *)predicateWithFormat:(NSString *)predicateFormat arguments:(va_list)argList;</code><br>通过将参数列表中的值替换为格式字符串并解析结果来初始化谓词。<br>有关格式字符串的格式和变量替换的限制的详细信息，请参阅谓词格式字符串语法。将argList中的值替换为谓词格式并解析结果的新谓词。</p><p><code>4.+ (NSPredicate *)predicateWithValue:(BOOL)value;</code><br>创建并返回一个谓词，该谓词总是计算为给定的布尔值</p><p><code>5.+ (NSPredicate*)predicateWithBlock:(BOOL (^)(id _Nullable evaluatedObject, NSDictionary&lt;NSString *, id&gt; * _Nullable bindings))block API_AVAILABLE(macos(10.6), ios(4.0), watchos(2.0), tvos(9.0));</code><br>初始化使用指定块对象和绑定字典计算的谓词。<br>在macOS 10.6和以后版本中，核心数据支持内存和原子存储中的基于块的谓词，但不支持基于sql的存储。</p><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><p><strong>使用条件字符表</strong><br><img src="/images/15306017726347.png" alt=""></p><ol><li>检索出某个范围的元素<figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">NSArray</span> *array = @[@<span class="number">123</span>,@<span class="number">66</span>,@<span class="number">89</span>,@<span class="number">45</span>,@<span class="number">101</span>,@<span class="number">18</span>,@<span class="number">666</span>,@<span class="number">75</span>];</span><br><span class="line"></span><br><span class="line"><span class="built_in">NSPredicate</span> *predicte = [<span class="built_in">NSPredicate</span> predicateWithFormat:<span class="string">@"SELF BETWEEN &#123;60,100&#125;"</span>];</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">NSArray</span> *tmp = [array filteredArrayUsingPredicate:predicte];</span><br><span class="line"></span><br><span class="line"><span class="built_in">NSLog</span>(<span class="string">@"%@"</span>,tmp);</span><br></pre></td></tr></table></figure></li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">2018-07-03 12:20:11.469946+0800 NewDemo[20729:4562901] (</span><br><span class="line">    66,</span><br><span class="line">    89,</span><br><span class="line">    75</span><br><span class="line">)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;NSPredicate&lt;/strong&gt;&lt;br&gt;Cocoa 中提供了一个NSPredicate的类,该类主要用于指定过滤器的条件, 每一个对象通过谓词进行筛选,判断条件是否匹配。一种逻辑条件的定义，用于约束对获取或内存过滤的搜索。&lt;/p&gt;
&lt;h3 id=&quot;概
      
    
    </summary>
    
      <category term="iOS开发" scheme="http://yoursite.com/categories/iOS%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="NSPredicate" scheme="http://yoursite.com/tags/NSPredicate/"/>
    
  </entry>
  
  <entry>
    <title>CocoaPods 创建公有库,配置podspec文件</title>
    <link href="http://yoursite.com/2018/06/19/CocoaPods-%E5%88%9B%E5%BB%BA%E5%85%AC%E6%9C%89%E5%BA%93-%E9%85%8D%E7%BD%AEpodspec%E6%96%87%E4%BB%B6/"/>
    <id>http://yoursite.com/2018/06/19/CocoaPods-创建公有库-配置podspec文件/</id>
    <published>2018-06-19T09:13:08.000Z</published>
    <updated>2018-06-19T09:14:28.165Z</updated>
    
    <content type="html"><![CDATA[<h3 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h3><blockquote><ul><li>如何创建podspec文件</li><li>如何编写podspec文件</li><li>如何实现目录分层</li><li>如何校验podspec文件</li><li>更新维护</li></ul></blockquote><h3 id="1-如何创建podspec文件"><a href="#1-如何创建podspec文件" class="headerlink" title="1.如何创建podspec文件"></a>1.如何创建podspec文件</h3><p>创建podspec文件只需要一行命令，在你自己的三方库的根目录下输入下面的命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pod spec create XXXKit</span><br></pre></td></tr></table></figure><p>然后在项目目录下将会生成一个podspec文件</p><p><img src="http://p7l9kf5i4.bkt.clouddn.com/2018-06-19-15256023744797.jpg-style02" alt=""></p><h3 id="2-如何编写podspec文件"><a href="#2-如何编写podspec文件" class="headerlink" title="2.如何编写podspec文件"></a>2.如何编写podspec文件</h3><p>我们先来打开ZJKitTool.podspec文件看看里面的内容。基本都是针对ZJKitTool的描述和介绍</p><p><img src="http://p7l9kf5i4.bkt.clouddn.com/2018-06-19-15256024482307.jpg-style02" alt=""></p><p>一些常用的信息介绍：</p><blockquote><p>name：框架名<br>version：当前版本（注意，是当前版本，假如你后续更新了新版本，需要修改此处）<br>summary：简要描述，在pod search ZCPKit的时候会显示该信息。<br>description：详细描述<br>homepage：页面链接<br>license：开源协议<br>author：作者<br>source：源码git地址<br>platform：支持最低ios版本<br>source_files：源文件（可以包含.h和.m）<br>public_header_files：头文件(.h文件)<br>resources：资源文件（配置的文件都会被放到mainBundle中）<br>resource_bundles：资源文件（配置的文件会放到你自己指定的bundle中）<br>frameworks：依赖的系统框架<br>vendored_frameworks：依赖的非系统框架<br>libraries：依赖的系统库<br>vendored_libraries：依赖的非系统的静态库<br>dependency：依赖的三方库</p></blockquote><p>上面列举的信息大部分来自pod默认生成的podspec文件中的给的，其中需要重点注意标识黑体的这几个信息。</p><p>你在三方库中看到的那些文件都是通过这些配置来确定的。当<code>pod install</code>引入三方库时，只会引入你在podspec中配置的那些文件。</p><p>下面我会举例说明该如何写podsepc中的每项配置。</p><p><img src="http://p7l9kf5i4.bkt.clouddn.com/2018-06-19-15256028392850.jpg-style02" alt=""></p><p>如图所示的目录结构，每个配置项的写法如下：</p><p><img src="http://p7l9kf5i4.bkt.clouddn.com/2018-06-19-15256029266168.jpg-style02" alt=""></p><blockquote><p>source_files：配置三方库的源文件（.h或.m文件）</p></blockquote><blockquote><p>写法：<br>source_files = ‘ZJKitTool/ZJHelperKit.h’ // 直接指定文件名<br>或：<br>source_files = ‘ZJKitTool/<em>.{h,m}’ // ZJKitTool文件夹下的所有匹配文件<br>source_files = ‘ZJKitTool/**/</em>.{h,m}’ // ZJKitTool所有路径下的所有匹配文件<br>public_header_files：配置公有的头文件（.h文件）</p></blockquote><blockquote><p>vendored_frameworks：配置需要引用的非系统框架（*<em>/</em>的写法后面不再赘述）</p></blockquote><blockquote><p>写法：<br>vendored_frameworks = ‘Frameworks/MyFramework.framework’<br>frameworks：配置依赖的系统框架</p></blockquote><blockquote><p>写法：<br>frameworks = ‘AVFoundation’, ‘CoreGraphics’, ‘Security’, ‘SystemConfiguration’<br>vendored_libraries：配置需要引用的非系统静态库（要注意，这里的.a静态库名字必须要带lib前缀，如果引用的静态库名字没lib前缀会导致编译报错，只需要重命名加上即可）</p></blockquote><blockquote><p>写法：<br>vendored_libraries = ‘Frameworks/libZCPKit.a’<br>libraries：配置依赖的系统库（要注意，这里的写法需要忽略lib前缀）</p></blockquote><blockquote><p>写法：<br>libraries = ‘c++’, ‘sqlite3’, ‘stdc++.6.0.9’, ‘z’<br>resources：配置资源文件（.bundle，.png，.txt等资源文件，这些资源文件会被放到mainBundle中，要注意避免发生命名重复的问题）</p></blockquote><blockquote><p>写法：<br>resources = ‘Resources/MyRes.bundle’<br>resource_bundles：配置指定bundle的资源文件（可以解决resources导致的命名冲突问题）</p></blockquote><blockquote><p>写法：<br>resource_bundles = {<br>    ‘ZJKitToolBundle’ =&gt; [‘Resources/MyRes.bundle’],<br>}<br>dependency：依赖的三方库，pod库或者可以是自身的subspec</p></blockquote><p>写法：<br>dependency ‘AFNetworking’, ‘~&gt;3.1.0’ // pod三方库<br>dependency ‘Util’ // 自身的subspec<br>或<br>dependency ‘AFNetworking’<br>附上官网链接，可以去看一看：<a href="http://guides.cocoapods.org/making/specs-and-specs-repo.html" target="_blank" rel="noopener">specs-and-specs-repo</a><br>关于资源文件更详细的写法，可以看这篇文章：<a href="http://blog.xianqu.org/2015/08/pod-resources/" target="_blank" rel="noopener">给 Pod 添加资源文件</a></p><h3 id="3-如何实现目录分层"><a href="#3-如何实现目录分层" class="headerlink" title="3.如何实现目录分层"></a>3.如何实现目录分层</h3><p><strong>使用subspec来实现目录分层。</strong><br>目录分层的好处：</p><blockquote><p>目录分层，结构清晰；<br>使用pod引入一个三方库时，可以只引入一个subspec而不用将整个三方库引入。</p></blockquote><p><img src="http://p7l9kf5i4.bkt.clouddn.com/2018-06-19-15256029509992.jpg-style02" alt=""></p><p>如果想有多层的目录结构还可以继续嵌套下去。</p><p>有几个需要注意的地方：</p><p><img src="http://p7l9kf5i4.bkt.clouddn.com/2018-06-19-15256034665366.jpg-style02" alt=""></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">1.层级不能出现循环依赖。</span><br><span class="line"></span><br><span class="line">* 比如类 UIAlertView+ZJHelperKitUIKit.h 中引用#import &quot;NSArray+ZJHelperKit.h&quot;，</span><br><span class="line">同时 NSArray+ZJHelperKit.h中引用 #import &quot;UIAlertView+ZJHelperKitUIKit.h&quot;。</span><br><span class="line">这样当写podspec时就需要在Object层级中写dependency &apos;ZCCategory/UIKit&apos;，在UIKit层级中写dependency &apos;ZCCategory/Object&apos;。如此便存在UIKit与Object层级之间的循环依赖。出现循环依赖时，三方库是无法成功提交到repo上的，会报依赖错误。解决办法是，层级间要尽量解耦。</span><br><span class="line"></span><br><span class="line">2.分层的层级不要太多，层级不要太深。</span><br><span class="line"></span><br><span class="line">为了避免出现上述的循环依赖错误。</span><br><span class="line"></span><br><span class="line">3.source_files使用的是真实的物理路径，而dependency依赖其他层级时使用的是层级路径，不是真实的物理路径</span><br><span class="line"></span><br><span class="line">例如：NSArray+ZJHelperKit.h 文件的真实路径是：ZJKitTool/ZJCategory/Object，而Object层级是属于ZJCategory层级下的一个子subspec，所以当写UIKit层级依赖Object层级时要写：dependency &apos;ZJCategory/Object&apos;而不是dependency &apos;ZJKitTool/ZJCategory/Object&apos;</span><br></pre></td></tr></table></figure><h3 id="4-如何校验podspec文件"><a href="#4-如何校验podspec文件" class="headerlink" title="4.如何校验podspec文件"></a>4.如何校验podspec文件</h3><p>在podspec写好之后我们需要验证一下编写的内容是否有误。可以在命令行的三方库当前路径下使用下面的命令：</p><figure class="highlight plain"><figcaption><span>lib lint （从本地验证你的pod能否通过验证）</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">pod spec lint （从本地和远程验证你的pod能否通过验证）</span><br><span class="line"></span><br><span class="line">pod lib lint --verbose （加--verbose可以显示详细的检测过程，出错时会显示详细的错误信息）</span><br><span class="line">pod lib lint --allow-warnings (允许警告，用来解决由于代码中存在警告导致不能通过校验的问题)</span><br><span class="line">pod lib lint --help （查看所有可选参数，可选参数可以加多个）</span><br></pre></td></tr></table></figure><p>我们目前只是在本地写的三方库，所以只需要使用pod lib lint验证即可（这个过程会较为费时，需要稍微等待）。</p><p><strong>需要注意的：</strong><br>在检测的时候会很经常会出现各种乱七八糟的错误，在文件多的情况下不太容易一次通过，并且即使你的代码在Xcode中编译通过了，但是也还是会出现很多错误。所以你需要尽量去注意下面的几个问题：</p><blockquote><p>1.当代码中存在警告时要记得使用–allow-warnings参数。</p></blockquote><blockquote><p>2.如果引入的文件或分好的层级需要依赖系统库或三方库，要记得使用上面介绍的libararies，frameworks等属性。</p></blockquote><blockquote><p>3.如果你的三方库是在一个xcode项目中编写调试，那么尽量不要用pch。</p></blockquote><blockquote><p>因为很多类之间的小依赖会被pch给遮掩过去，这会导致在校验时出现大量错误。<br>4.如果想要分层，那么尽量解耦使模块能够单独存在。</p></blockquote><blockquote><p>原因是当分层较多层级较深时，很可能产生循环依赖的问题。</p></blockquote><h3 id="更新维护"><a href="#更新维护" class="headerlink" title="更新维护"></a>更新维护</h3><p>当你的代码更新维护后，就需要重写发布，流程是：</p><p>更新ZJKitTool.podspec中的版本号<br>打上标签推送远程<br>pod trunk push ZJKitTool.podspec 推送到pods仓库</p><p>如果有引用到库framwork或C语言库的话必须使用<br> –use-libraries </p><p> –allow-warnings 允许警告</p><p> 检测本地与远程是否通过</p><p> pod spec lint –allow-warnings</p><p>pod spec lint ZJKitTool.podspec –use-libraries –allow-warnings</p><p>检测本地与是否通过<br>pod lib lint –allow-warnings</p><p>pod lib lint ZJKitTool.podspec –use-libraries –allow-warnings</p><p>上传到 cocoapods<br>pod trunk push ZJKitTool.podspec  –use-libraries –allow-warnings           </p><p>必须保证github上有上传框架代码和示例代码，同时保证统一和上传tag版本<br><strong>–use-libraries</strong>  (有引用框架时，需加入 <strong>–use-libraries</strong>)</p><p>最后回到项目的根目录 pod update 更新最新版本</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;目录&quot;&gt;&lt;a href=&quot;#目录&quot; class=&quot;headerlink&quot; title=&quot;目录&quot;&gt;&lt;/a&gt;目录&lt;/h3&gt;&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;如何创建podspec文件&lt;/li&gt;
&lt;li&gt;如何编写podspec文件&lt;/li&gt;
&lt;li&gt;如何实现目
      
    
    </summary>
    
      <category term="CocoaPods" scheme="http://yoursite.com/categories/CocoaPods/"/>
    
    
      <category term="CocoaPods" scheme="http://yoursite.com/tags/CocoaPods/"/>
    
  </entry>
  
  <entry>
    <title>iOS开发 UIBezierPath学习</title>
    <link href="http://yoursite.com/2018/06/16/iOS%E5%BC%80%E5%8F%91-UIBezierPath%E5%AD%A6%E4%B9%A0/"/>
    <id>http://yoursite.com/2018/06/16/iOS开发-UIBezierPath学习/</id>
    <published>2018-06-15T16:48:07.000Z</published>
    <updated>2018-06-15T16:49:42.325Z</updated>
    
    <content type="html"><![CDATA[<h3 id="一、属性"><a href="#一、属性" class="headerlink" title="一、属性"></a>一、属性</h3><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 将UIBezierPath类转换成CGPath，类似于UIColor的CGColor</span></span><br><span class="line"><span class="keyword">@property</span>(<span class="keyword">nonatomic</span>) <span class="built_in">CGPathRef</span> <span class="built_in">CGPath</span>; </span><br><span class="line"></span><br><span class="line"><span class="comment">// empty：只读类型，路径上是否有有效的元素</span></span><br><span class="line"><span class="keyword">@property</span>(<span class="keyword">readonly</span>,<span class="keyword">getter</span>=isEmpty) <span class="built_in">BOOL</span> empty;</span><br><span class="line"></span><br><span class="line"><span class="comment">// bounds：和view的bounds是不一样的，它获取path的X坐标、Y坐标、宽度，但是高度为0</span></span><br><span class="line"><span class="keyword">@property</span>(<span class="keyword">nonatomic</span>,<span class="keyword">readonly</span>) <span class="built_in">CGRect</span> bounds;</span><br><span class="line"></span><br><span class="line"><span class="comment">// currentPoint：当前path的位置，可以理解为path的终点</span></span><br><span class="line"><span class="keyword">@property</span>(<span class="keyword">nonatomic</span>,<span class="keyword">readonly</span>) <span class="built_in">CGPoint</span> currentPoint;</span><br><span class="line"></span><br><span class="line"><span class="comment">// lineWidth：path线的宽度</span></span><br><span class="line"><span class="keyword">@property</span>(<span class="keyword">nonatomic</span>) <span class="built_in">CGFloat</span> lineWidth;</span><br><span class="line"></span><br><span class="line"><span class="comment">// lineCapStylepath端点样式，有3种样式</span></span><br><span class="line"><span class="keyword">@property</span>(<span class="keyword">nonatomic</span>) <span class="built_in">CGLineCap</span> lineCapStyle;</span><br><span class="line"><span class="comment">/* Line cap styles. */</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="built_in">CF_ENUM</span>(int32_t, <span class="built_in">CGLineCap</span>) &#123;</span><br><span class="line">    kCGLineCapButt,     <span class="comment">// 无端点</span></span><br><span class="line">    kCGLineCapRound,    <span class="comment">// 圆形端点</span></span><br><span class="line">    kCGLineCapSquare    <span class="comment">// 方形端点（样式上和kCGLineCapButt是一样的，但是比kCGLineCapButt长一点）</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 拐角样式</span></span><br><span class="line"><span class="keyword">@property</span>(<span class="keyword">nonatomic</span>) <span class="built_in">CGLineJoin</span> lineJoinStyle;</span><br><span class="line"><span class="comment">/* Line join styles. */</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="built_in">CF_ENUM</span>(int32_t, <span class="built_in">CGLineJoin</span>) &#123;</span><br><span class="line">    kCGLineJoinMiter,       <span class="comment">// 尖角</span></span><br><span class="line">    kCGLineJoinRound,       <span class="comment">// 圆角</span></span><br><span class="line">    kCGLineJoinBevel        <span class="comment">// 缺角</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// miterLimit:最大斜接长度（只有在使用kCGLineJoinMiter是才有效）， 边角的角度越小，斜接长度就会越大</span></span><br><span class="line"><span class="keyword">@property</span>(<span class="keyword">nonatomic</span>) <span class="built_in">CGFloat</span> miterLimit; <span class="comment">// Used when lineJoinStyle is kCGLineJoinMiter</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// flatness:弯曲路径的渲染精度，默认为0.6，越小精度越高，相应的更加消耗性能。</span></span><br><span class="line"><span class="keyword">@property</span>(<span class="keyword">nonatomic</span>) <span class="built_in">CGFloat</span> flatness;</span><br><span class="line"></span><br><span class="line"><span class="comment">//usesEvenOddFillRule：单双数圈规则是否用于绘制路径，默认是NO。</span></span><br><span class="line"><span class="keyword">@property</span>(<span class="keyword">nonatomic</span>) <span class="built_in">BOOL</span> usesEvenOddFillRule; <span class="comment">// Default is NO. When YES, the even-odd fill rule is used for drawing, clipping, and hit testing.</span></span><br></pre></td></tr></table></figure><h3 id="二、UIBezierPath创建方法"><a href="#二、UIBezierPath创建方法" class="headerlink" title="二、UIBezierPath创建方法"></a>二、UIBezierPath创建方法</h3><h4 id="1、实例化UIBezierPath对象-instancetype-bezierPath"><a href="#1、实例化UIBezierPath对象-instancetype-bezierPath" class="headerlink" title="1、实例化UIBezierPath对象 + (instancetype)bezierPath;"></a>1、实例化UIBezierPath对象 <code>+ (instancetype)bezierPath;</code></h4><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">- (<span class="keyword">void</span>)drawRect:(<span class="built_in">CGRect</span>)rect &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">UIBezierPath</span> *path = [<span class="built_in">UIBezierPath</span> bezierPath];</span><br><span class="line">        </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2、-在Rect里面画一个矩形"><a href="#2、-在Rect里面画一个矩形" class="headerlink" title="2、 在Rect里面画一个矩形"></a>2、 在Rect里面画一个矩形</h4><p><code>+ (instancetype)bezierPathWithRect:(CGRect)rect;</code></p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">- (<span class="keyword">void</span>)drawRect:(<span class="built_in">CGRect</span>)rect &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">UIBezierPath</span> *path1 = [<span class="built_in">UIBezierPath</span> bezierPathWithRect:<span class="built_in">CGRectMake</span>(<span class="number">100</span>, <span class="number">80</span>, <span class="number">80</span>, <span class="number">80</span>)];</span><br><span class="line">    [[<span class="built_in">UIColor</span> orangeColor] set];</span><br><span class="line">    path1.lineWidth = <span class="number">3</span>;</span><br><span class="line">    [path1 stroke];</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="http://p7l9kf5i4.bkt.clouddn.com/2018-06-16-15290492725497.jpg-style02" alt=""></p><h4 id="3-在rect里的画一个内切曲线"><a href="#3-在rect里的画一个内切曲线" class="headerlink" title="3.在rect里的画一个内切曲线:"></a>3.在rect里的画一个内切曲线:</h4><p><code>+ (instancetype)bezierPathWithOvalInRect:(CGRect)rect;</code></p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">- (<span class="keyword">void</span>)drawRect:(<span class="built_in">CGRect</span>)rect &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">UIBezierPath</span> *path2 = [<span class="built_in">UIBezierPath</span> bezierPathWithOvalInRect:<span class="built_in">CGRectMake</span>(<span class="number">100</span>, <span class="number">100</span>, <span class="number">180</span>, <span class="number">100</span>)];</span><br><span class="line">    [[<span class="built_in">UIColor</span> orangeColor] set];</span><br><span class="line">    path2.lineWidth = <span class="number">3</span>;</span><br><span class="line">    [path2 stroke];</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="http://p7l9kf5i4.bkt.clouddn.com/2018-06-16-15290493826030.jpg-style02" alt=""></p><h4 id="3-根据一个Rect-画一个圆角矩形曲线-Radius-圆角半径-当Rect为正方形时且Radius等于边长一半时画的是一个圆"><a href="#3-根据一个Rect-画一个圆角矩形曲线-Radius-圆角半径-当Rect为正方形时且Radius等于边长一半时画的是一个圆" class="headerlink" title="3.根据一个Rect 画一个圆角矩形曲线 (Radius:圆角半径)   当Rect为正方形时且Radius等于边长一半时画的是一个圆"></a>3.根据一个Rect 画一个圆角矩形曲线 (Radius:圆角半径)   当Rect为正方形时且Radius等于边长一半时画的是一个圆</h4><p><code>+ (instancetype)bezierPathWithRoundedRect:(CGRect)rect cornerRadius:(CGFloat)cornerRadius;</code></p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">- (<span class="keyword">void</span>)drawRect:(<span class="built_in">CGRect</span>)rect &#123;</span><br><span class="line">    </span><br><span class="line">   </span><br><span class="line">    rect = <span class="built_in">CGRectMake</span>(<span class="number">130</span>,<span class="number">100</span>, <span class="number">150</span>,<span class="number">90</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">UIBezierPath</span> *path3 = [<span class="built_in">UIBezierPath</span> bezierPathWithRoundedRect:rect cornerRadius:<span class="number">8</span>];</span><br><span class="line">    [[<span class="built_in">UIColor</span> blueColor] set];</span><br><span class="line">    [path3 fill];</span><br><span class="line">    path3.lineWidth = <span class="number">3</span>;</span><br><span class="line">    [[<span class="built_in">UIColor</span> redColor] set];</span><br><span class="line">    [path3 stroke];</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="http://p7l9kf5i4.bkt.clouddn.com/2018-06-16-15290496271092.jpg-style02" alt=""></p><h4 id="4-根据Rect针对四角中的某个或多个角设置圆角"><a href="#4-根据Rect针对四角中的某个或多个角设置圆角" class="headerlink" title="4.根据Rect针对四角中的某个或多个角设置圆角"></a>4.根据Rect针对四角中的某个或多个角设置圆角</h4><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *  参数：</span></span><br><span class="line"><span class="comment"> *  rect-&gt;矩形的Frame</span></span><br><span class="line"><span class="comment"> *　corners-&gt;指定的圆角</span></span><br><span class="line"><span class="comment"> *　cornerRadii-&gt;圆角的大小</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">+ (<span class="keyword">instancetype</span>)bezierPathWithRoundedRect:(<span class="built_in">CGRect</span>)rect byRoundingCorners:(<span class="built_in">UIRectCorner</span>)corners cornerRadii:(<span class="built_in">CGSize</span>)cornerRadii;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用</span></span><br><span class="line">- (<span class="keyword">void</span>)drawRect:(<span class="built_in">CGRect</span>)rect &#123;</span><br><span class="line"></span><br><span class="line">    rect = <span class="built_in">CGRectMake</span>(<span class="number">130</span>,<span class="number">100</span>, <span class="number">150</span>,<span class="number">90</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">UIBezierPath</span> *path4 = [<span class="built_in">UIBezierPath</span> bezierPathWithRoundedRect:rect byRoundingCorners: <span class="built_in">UIRectCornerTopLeft</span>|<span class="built_in">UIRectCornerBottomRight</span> cornerRadii:<span class="built_in">CGSizeMake</span>(<span class="number">10</span>,<span class="number">50</span>)];</span><br><span class="line">    [[<span class="built_in">UIColor</span> purpleColor] set];</span><br><span class="line">    [path4 fill];</span><br><span class="line">    [[<span class="built_in">UIColor</span> yellowColor] set];</span><br><span class="line">    [path4 stroke];</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="http://p7l9kf5i4.bkt.clouddn.com/2018-06-16-15290500921401.jpg-style02" alt=""></p><h4 id="5-以某个中心点画弧线"><a href="#5-以某个中心点画弧线" class="headerlink" title="5.以某个中心点画弧线"></a>5.以某个中心点画弧线</h4><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *  参数：</span></span><br><span class="line"><span class="comment"> *  center-&gt;圆点</span></span><br><span class="line"><span class="comment"> *　radius-&gt;半径</span></span><br><span class="line"><span class="comment"> *　startAngle-&gt;起始位置</span></span><br><span class="line"><span class="comment"> *　endAngle-&gt;结束位置</span></span><br><span class="line"><span class="comment"> *　clockwise-&gt;是否顺时针方向</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">+ (<span class="keyword">instancetype</span>)bezierPathWithArcCenter:(<span class="built_in">CGPoint</span>)center radius:(<span class="built_in">CGFloat</span>)radius startAngle:(<span class="built_in">CGFloat</span>)startAngle endAngle:(<span class="built_in">CGFloat</span>)endAngle clockwise:(<span class="built_in">BOOL</span>)clockwise;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用</span></span><br><span class="line">- (<span class="keyword">void</span>)drawRect:(<span class="built_in">CGRect</span>)rect &#123;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">UIBezierPath</span> *path5 = [<span class="built_in">UIBezierPath</span> bezierPathWithArcCenter:<span class="built_in">CGPointMake</span>(<span class="number">180</span>, <span class="number">180</span>) radius:<span class="number">100</span> startAngle:<span class="number">0</span> endAngle:<span class="number">90</span> clockwise:<span class="literal">YES</span>];</span><br><span class="line">    [[<span class="built_in">UIColor</span> purpleColor] set];</span><br><span class="line">    [path5 fill];</span><br><span class="line">    path5.lineWidth = <span class="number">3</span>;</span><br><span class="line">    [[<span class="built_in">UIColor</span> orangeColor] set];</span><br><span class="line">    [path5 stroke];</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="http://p7l9kf5i4.bkt.clouddn.com/2018-06-16-15290800782036.jpg-style02" alt=""></p><p><img src="http://p7l9kf5i4.bkt.clouddn.com/2018-06-16-15290503333241.jpg-style02" alt=""></p><h4 id="6-根据CGPath创建并返回一个新的UIBezierPath对象"><a href="#6-根据CGPath创建并返回一个新的UIBezierPath对象" class="headerlink" title="6.根据CGPath创建并返回一个新的UIBezierPath对象"></a>6.根据CGPath创建并返回一个新的UIBezierPath对象</h4><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">+ (<span class="keyword">instancetype</span>)bezierPathWithCGPath:(<span class="built_in">CGPathRef</span>)<span class="built_in">CGPath</span></span><br></pre></td></tr></table></figure><h4 id="7-建并返回一个新的BezierPath-这个-BezierPath-的方向是原-BezierPath-的反方向"><a href="#7-建并返回一个新的BezierPath-这个-BezierPath-的方向是原-BezierPath-的反方向" class="headerlink" title="7.建并返回一个新的BezierPath, 这个 BezierPath 的方向是原 BezierPath 的反方向"></a>7.建并返回一个新的BezierPath, 这个 BezierPath 的方向是原 BezierPath 的反方向</h4><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * 通过该方法反转一条路径, 并不会修改该路径的样子. 它仅仅是修改了绘制的方向</span></span><br><span class="line"><span class="comment">  * @return: 返回一个新的 UIBezierPath 对象, 形状和原来路径的形状一样,</span></span><br><span class="line"><span class="comment">  *          但是绘制的方向相反.</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line">- (<span class="built_in">UIBezierPath</span> *) bezierPathByReversingPath;</span><br></pre></td></tr></table></figure><h3 id="三、构造路径"><a href="#三、构造路径" class="headerlink" title="三、构造路径"></a>三、构造路径</h3><h4 id="1-将-UIBezierPath-对象的-currentPoint-移动到指定的点"><a href="#1-将-UIBezierPath-对象的-currentPoint-移动到指定的点" class="headerlink" title="1.将 UIBezierPath 对象的 currentPoint 移动到指定的点"></a>1.将 UIBezierPath 对象的 currentPoint 移动到指定的点</h4><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * 如果当前有正在绘制的子路径, 该方法则会隐式的结束当前路径, </span></span><br><span class="line"><span class="comment">  * 并将 currentPoint 设置为指定点. 当上一条子路径被终止, 该方法</span></span><br><span class="line"><span class="comment">  * 实际上并不会去闭合上一条子路径. 所以上一条自路径的起始点 和</span></span><br><span class="line"><span class="comment">  * 结束点并没有被链接.</span></span><br><span class="line"><span class="comment">  * 对于大多数构造路径相关的方法而言, 在你绘制直线或曲线之前, 需要先调用这个方法.</span></span><br><span class="line"><span class="comment">  * @param point:   当前坐标系统中的某一点</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line">- (<span class="keyword">void</span>)moveToPoint:(<span class="built_in">CGPoint</span>)point;</span><br></pre></td></tr></table></figure><h4 id="2-在当前子路径中追加一条直线"><a href="#2-在当前子路径中追加一条直线" class="headerlink" title="2.在当前子路径中追加一条直线"></a>2.在当前子路径中追加一条直线</h4><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * 该方法将会从 currentPoint 到 指定点 链接一条直线. </span></span><br><span class="line"><span class="comment">  * <span class="doctag">Note:</span> 在追加完这条直线后, 该方法将会更新 currentPoint 为 指定点</span></span><br><span class="line"><span class="comment">  *       调用该方法之前, 你必须先设置 currentPoint. 如果当前绘制路径</span></span><br><span class="line"><span class="comment">  *       为空, 并且未设置 currentPoint, 那么调用该方法将不会产生任何</span></span><br><span class="line"><span class="comment">  *       效果.</span></span><br><span class="line"><span class="comment">  * @param point:   绘制直线的终点坐标, 当前坐标系统中的某一点</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line">- (<span class="keyword">void</span>)addLineToPoint:(<span class="built_in">CGPoint</span>)point;</span><br></pre></td></tr></table></figure><h4 id="3-在当前子路径中追加一条圆弧"><a href="#3-在当前子路径中追加一条圆弧" class="headerlink" title="3.在当前子路径中追加一条圆弧"></a>3.在当前子路径中追加一条圆弧</h4><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * 该方法将会从 currentPoint 添加一条指定的圆弧.</span></span><br><span class="line"><span class="comment">  * 该方法的介绍和构造方法中的一样. 请前往上文查看</span></span><br><span class="line"><span class="comment">  * @param center: 圆心</span></span><br><span class="line"><span class="comment">  * @param radius: 半径</span></span><br><span class="line"><span class="comment">  * @param startAngle: 起始角度</span></span><br><span class="line"><span class="comment">  * @param endAngle: 结束角度</span></span><br><span class="line"><span class="comment">  * @param clockwise: 是否顺时针绘制</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line">- (<span class="keyword">void</span>)addArcWithCenter:(<span class="built_in">CGPoint</span>)center </span><br><span class="line">                  radius:(<span class="built_in">CGFloat</span>)radius </span><br><span class="line">              startAngle:(<span class="built_in">CGFloat</span>)startAngle </span><br><span class="line">                endAngle:(<span class="built_in">CGFloat</span>)endAngle </span><br><span class="line">               clockwise:(<span class="built_in">BOOL</span>)clockwise <span class="built_in">NS_AVAILABLE_IOS</span>(<span class="number">4</span>_0);</span><br></pre></td></tr></table></figure><h4 id="4-在当前-子路经中追加一条-三次贝塞尔曲线"><a href="#4-在当前-子路经中追加一条-三次贝塞尔曲线" class="headerlink" title="4.在当前 子路经中追加一条 三次贝塞尔曲线"></a>4.在当前 子路经中追加一条 三次贝塞尔曲线</h4><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * 该方法将会从 currentPoint 到 指定的 endPoint 追加一条三次贝塞尔曲线.</span></span><br><span class="line"><span class="comment">  * 三次贝塞尔曲线的弯曲由两个控制点来控制. 如下图所示</span></span><br><span class="line"><span class="comment">  * <span class="doctag">Note:</span> 调用该方法前, 你必须先设置 currentPoint, 如果路径为空, </span></span><br><span class="line"><span class="comment">  *       并且尚未设置 currentPoint, 调用该方法则不会产生任何效果. </span></span><br><span class="line"><span class="comment">  *       当添加完贝塞尔曲线后, 该方法将会自动更新 currentPoint 为</span></span><br><span class="line"><span class="comment">  *       指定的结束点</span></span><br><span class="line"><span class="comment">  * @param endPoint: 终点</span></span><br><span class="line"><span class="comment">  * @param controlPoint1: 控制点1</span></span><br><span class="line"><span class="comment">  * @param controlPoint2: 控制点2</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line">- (<span class="keyword">void</span>)addCurveToPoint:(<span class="built_in">CGPoint</span>)endPoint </span><br><span class="line">          controlPoint1:(<span class="built_in">CGPoint</span>)controlPoint1 </span><br><span class="line">          controlPoint2:(<span class="built_in">CGPoint</span>)controlPoint2;</span><br></pre></td></tr></table></figure><p><img src="http://p7l9kf5i4.bkt.clouddn.com/2018-06-16-15290805456435.jpg-style02" alt="图片摘自苹果官网"></p><h4 id="5-当前-子路经中追加一条-二次贝塞尔曲线"><a href="#5-当前-子路经中追加一条-二次贝塞尔曲线" class="headerlink" title="5.当前 子路经中追加一条 二次贝塞尔曲线"></a>5.当前 子路经中追加一条 二次贝塞尔曲线</h4><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * 该方法将会从 currentPoint 到 指定的 endPoint 追加一条二次贝塞尔曲线.</span></span><br><span class="line"><span class="comment">  * currentPoint、endPoint、controlPoint 三者的关系最终定义了二次贝塞尔曲线的形状.</span></span><br><span class="line"><span class="comment">  * 二次贝塞尔曲线的弯曲由一个控制点来控制. 如下图所示</span></span><br><span class="line"><span class="comment">  * <span class="doctag">Note:</span> 调用该方法前, 你必须先设置 currentPoint, 如果路径为空, </span></span><br><span class="line"><span class="comment">  *       并且尚未设置 currentPoint, 调用该方法则不会产生任何效果. </span></span><br><span class="line"><span class="comment">  *       当添加完贝塞尔曲线后, 该方法将会自动更新 currentPoint 为</span></span><br><span class="line"><span class="comment">  *       指定的结束点</span></span><br><span class="line"><span class="comment">  * @param endPoint: 终点</span></span><br><span class="line"><span class="comment">  * @param controlPoint: 控制点</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line">- (<span class="keyword">void</span>)addQuadCurveToPoint:(<span class="built_in">CGPoint</span>)endPoint </span><br><span class="line">               controlPoint:(<span class="built_in">CGPoint</span>)controlPoint;</span><br></pre></td></tr></table></figure><p><img src="http://p7l9kf5i4.bkt.clouddn.com/2018-06-16-15290806246756.jpg-style02" alt="图片摘自苹果官网"></p><h4 id="6-关闭当前子路经"><a href="#6-关闭当前子路经" class="headerlink" title="6.关闭当前子路经"></a>6.关闭当前子路经</h4><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * 该方法将会从 currentPoint 到子路经的起点 绘制一条直线, </span></span><br><span class="line"><span class="comment">  * 以此来关闭当前的自路径. 紧接着该方法将会更新 currentPoint</span></span><br><span class="line"><span class="comment">  * 为 刚添加的这条直线的终点, 也就是当前子路经的起点.</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line">- (<span class="keyword">void</span>)closePath;</span><br></pre></td></tr></table></figure><h4 id="7-删除-UIBezierPath-对象中的所有点-效果也就等同于删除了所有子路经"><a href="#7-删除-UIBezierPath-对象中的所有点-效果也就等同于删除了所有子路经" class="headerlink" title="7.删除 UIBezierPath 对象中的所有点, 效果也就等同于删除了所有子路经"></a>7.删除 UIBezierPath 对象中的所有点, 效果也就等同于删除了所有子路经</h4><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">- (<span class="keyword">void</span>)removeAllPoints;</span><br><span class="line">将指定 <span class="built_in">UIBezierPath</span> 中的内容添加到当前 <span class="built_in">UIBezierPath</span> 对象中</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * 该方法将会在当前 UIBezierPath 对象的路径中追加</span></span><br><span class="line"><span class="comment">  * 指定的 UIBezierPath 对象中的内容. </span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line">- (<span class="keyword">void</span>)appendPath:(<span class="built_in">UIBezierPath</span> *)bezierPath;</span><br></pre></td></tr></table></figure><h4 id="8-UIBezierPath-中的-CGPath-对象"><a href="#8-UIBezierPath-中的-CGPath-对象" class="headerlink" title="8.UIBezierPath 中的 CGPath 对象"></a>8.UIBezierPath 中的 CGPath 对象</h4><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * 获取这个属性, 你将会获得一个不可变的 CGPathRef 对象,</span></span><br><span class="line"><span class="comment">  * 他可以传入 CoreGraphics 提供的函数中</span></span><br><span class="line"><span class="comment">  * 你可以是用 CoreGraphics 框架提供的方法创建一个路径, </span></span><br><span class="line"><span class="comment">  * 并给这个属性赋值, 当时设置了一个新的路径后, </span></span><br><span class="line"><span class="comment">  * 这个将会对你给出的路径对象进行 Copy 操作</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"><span class="keyword">@property</span>(<span class="keyword">nonatomic</span>) <span class="built_in">CGPathRef</span> <span class="built_in">CGPath</span>;</span><br></pre></td></tr></table></figure><h4 id="9-绘图路径中的当前点"><a href="#9-绘图路径中的当前点" class="headerlink" title="9.绘图路径中的当前点"></a>9.绘图路径中的当前点</h4><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * 该属性的值, 将会是下一条绘制的直线或曲线的起始点.</span></span><br><span class="line"><span class="comment">  * 如果当前路径为空, 那么该属性的值将会是 CGPointZero</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"><span class="keyword">@property</span>(<span class="keyword">nonatomic</span>, <span class="keyword">readonly</span>) <span class="built_in">CGPoint</span> currentPoint;</span><br></pre></td></tr></table></figure><p>五、绘制路径</p><h4 id="1-填充路径"><a href="#1-填充路径" class="headerlink" title="1.填充路径"></a>1.填充路径</h4><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * 该方法当前的填充颜色 和 绘图属性对路径的封闭区域进行填充.</span></span><br><span class="line"><span class="comment">  * 如果当前路径是一条开放路径, 该方法将会隐式的将路径进行关闭后进行填充</span></span><br><span class="line"><span class="comment">  * 该方法在进行填充操作之前, 会自动保存当前绘图的状态, 所以我们不需要</span></span><br><span class="line"><span class="comment">  * 自己手动的去保存绘图状态了. </span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line">- (<span class="keyword">void</span>)fill;</span><br></pre></td></tr></table></figure><h4 id="2-使用混合模式进行填充"><a href="#2-使用混合模式进行填充" class="headerlink" title="2.使用混合模式进行填充"></a>2.使用混合模式进行填充</h4><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * 该方法当前的填充颜色 和 绘图属性 (外加指定的混合模式 和 透明度) </span></span><br><span class="line"><span class="comment">  * 对路径的封闭区域进行填充. 如果当前路径是一条开放路径, 该方法将</span></span><br><span class="line"><span class="comment">  * 会隐式的将路径进行关闭后进行填充</span></span><br><span class="line"><span class="comment">  * 该方法在进行填充操作之前, 会自动保存当前绘图的状态, 所以我们不需要</span></span><br><span class="line"><span class="comment">  * 自己手动的去保存绘图状态了. </span></span><br><span class="line"><span class="comment">  *</span></span><br><span class="line"><span class="comment">  * @param blendMode: 混合模式决定了如何和已经存在的被渲染过的内容进行合成</span></span><br><span class="line"><span class="comment">  * @param alpha: 填充路径时的透明度</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line">- (<span class="keyword">void</span>)fillWithBlendMode:(<span class="built_in">CGBlendMode</span>)blendMode </span><br><span class="line">                    alpha:(<span class="built_in">CGFloat</span>)alpha;</span><br><span class="line"> ```                   </span><br><span class="line">                    </span><br><span class="line"><span class="meta">#### 3.绘制路径</span></span><br><span class="line"></span><br><span class="line">``` Objc</span><br><span class="line">- (<span class="keyword">void</span>)stroke;</span><br></pre></td></tr></table></figure><h4 id="4-使用混合模式进行填充"><a href="#4-使用混合模式进行填充" class="headerlink" title="4.使用混合模式进行填充"></a>4.使用混合模式进行填充</h4><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * @param blendMode: 混合模式决定了如何和已经存在的被渲染过的内容进行合成</span></span><br><span class="line"><span class="comment">  * @param alpha: 填充路径时的透明度</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line">- (<span class="keyword">void</span>)strokeWithBlendMode:(<span class="built_in">CGBlendMode</span>)blendMode</span><br><span class="line">                      alpha:(<span class="built_in">CGFloat</span>)alpha;</span><br></pre></td></tr></table></figure><h4 id="5-剪切路径"><a href="#5-剪切路径" class="headerlink" title="5.剪切路径"></a>5.剪切路径</h4><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  *  该方法将会修改当前绘图上下文的可视区域.</span></span><br><span class="line"><span class="comment">  *  当调用这个方法之后, 会导致接下来所有的渲染</span></span><br><span class="line"><span class="comment">  *  操作, 只会在剪切下来的区域内进行, 区域外的</span></span><br><span class="line"><span class="comment">  *  内容将不会被渲染.</span></span><br><span class="line"><span class="comment">  *  如果你希望执行接下来的绘图时, 删除剪切区域,</span></span><br><span class="line"><span class="comment">  *  那么你必须在调用该方法前, 先使用 CGContextSaveGState 方法</span></span><br><span class="line"><span class="comment">  *  保存当前的绘图状态, 当你不再需要这个剪切区域</span></span><br><span class="line"><span class="comment">  *  的时候, 你只需要使用 CGContextRestoreGState 方法</span></span><br><span class="line"><span class="comment">  *  来恢复之前保存的绘图状态就可以了.</span></span><br><span class="line"><span class="comment">  * @param blendMode: 混合模式决定了如何和</span></span><br><span class="line"><span class="comment">  *                   已经存在的被渲染过的内容进行合成</span></span><br><span class="line"><span class="comment">  * @param alpha: 填充路径时的透明度</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line">- (<span class="keyword">void</span>)addClip;</span><br></pre></td></tr></table></figure><h3 id="六、Hit-Detection"><a href="#六、Hit-Detection" class="headerlink" title="六、Hit Detection"></a>六、Hit Detection</h3><h4 id="1-是否包含某个点"><a href="#1-是否包含某个点" class="headerlink" title="1.是否包含某个点"></a>1.是否包含某个点</h4><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  *  该方法返回一个布尔值, 当曲线的覆盖区域包含</span></span><br><span class="line"><span class="comment">  * 指定的点(内部点)， 则返回 YES, 否则返回 NO. </span></span><br><span class="line"><span class="comment">  * <span class="doctag">Note:</span> 如果当前的路径是一个开放的路径, 那么</span></span><br><span class="line"><span class="comment">  *       就算指定点在路径覆盖范围内, 该方法仍然会</span></span><br><span class="line"><span class="comment">  *       返回 NO, 所以如果你想判断一个点是否在一个</span></span><br><span class="line"><span class="comment">  *       开放路径的范围内时, 你需要先Copy一份路径,</span></span><br><span class="line"><span class="comment">  *       并调用 -(void)closePath; 将路径封闭, 然后</span></span><br><span class="line"><span class="comment">  *       再调用此方法来判断指定点是否是内部点.</span></span><br><span class="line"><span class="comment">  * @param point: 指定点.</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line">- (<span class="built_in">BOOL</span>) containsPoint:(<span class="built_in">CGPoint</span>)point;</span><br></pre></td></tr></table></figure><h4 id="2-路径是否为空"><a href="#2-路径是否为空" class="headerlink" title="2.路径是否为空"></a>2.路径是否为空</h4><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * 检测当前路径是否绘制过直线或曲线.</span></span><br><span class="line"><span class="comment">  * <span class="doctag">Note:</span> 记住, 就算你仅仅调用了 moveToPoint 方法</span></span><br><span class="line"><span class="comment">  *       那么当前路径也被看做不为空.</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">readonly</span>, <span class="keyword">getter</span>=isEmpty) <span class="built_in">BOOL</span> empty;</span><br></pre></td></tr></table></figure><h4 id="3-路径覆盖的矩形区域"><a href="#3-路径覆盖的矩形区域" class="headerlink" title="3.路径覆盖的矩形区域"></a>3.路径覆盖的矩形区域</h4><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * 该属性描述的是一个能够完全包含路径中所有点</span></span><br><span class="line"><span class="comment">  *  的一个最小的矩形区域. 该区域包含二次贝塞尔</span></span><br><span class="line"><span class="comment">  *  曲线和三次贝塞尔曲线的控制点.</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">readonly</span>) <span class="built_in">CGRect</span> bounds;</span><br></pre></td></tr></table></figure><h4 id="4-Apply-Transform"><a href="#4-Apply-Transform" class="headerlink" title="4.Apply Transform"></a>4.Apply Transform</h4><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * 该方法将会直接对路径中的所有点进行指定的放射</span></span><br><span class="line"><span class="comment">  * 变换操作. </span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line">- (<span class="keyword">void</span>)applyTransform:(<span class="built_in">CGAffineTransform</span>)transform;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;一、属性&quot;&gt;&lt;a href=&quot;#一、属性&quot; class=&quot;headerlink&quot; title=&quot;一、属性&quot;&gt;&lt;/a&gt;一、属性&lt;/h3&gt;&lt;figure class=&quot;highlight objc&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre
      
    
    </summary>
    
      <category term="iOS 开发" scheme="http://yoursite.com/categories/iOS-%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="UIBezierPath" scheme="http://yoursite.com/tags/UIBezierPath/"/>
    
  </entry>
  
  <entry>
    <title>iOS开发NSString详解</title>
    <link href="http://yoursite.com/2018/06/13/iOS%E5%BC%80%E5%8F%91NSString%E8%AF%A6%E8%A7%A3/"/>
    <id>http://yoursite.com/2018/06/13/iOS开发NSString详解/</id>
    <published>2018-06-13T10:52:43.000Z</published>
    <updated>2018-06-14T09:35:31.399Z</updated>
    
    <content type="html"><![CDATA[<h3 id="一、前言"><a href="#一、前言" class="headerlink" title="一、前言"></a>一、前言</h3><p>NSString 是Foundation框架下的一个处理字符串的类，也是我们平常开发过程中使用的比较多的类。</p><h3 id="二、详解"><a href="#二、详解" class="headerlink" title="二、详解"></a>二、详解</h3><h4 id="1-属性"><a href="#1-属性" class="headerlink" title="1. 属性"></a>1. 属性</h4><p><code>@property (readonly) NSUInteger length;</code></p><p>length 文本长度，只读。</p><h4 id="2-字符串的获取"><a href="#2-字符串的获取" class="headerlink" title="2.字符串的获取"></a>2.字符串的获取</h4><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 为了避免像表情符号这样的字符序列被破坏，你可以这么做:</span></span><br><span class="line"><span class="comment">    [str substringFromIndex:[str rangeOfComposedCharacterSequenceAtIndex:index].location]</span></span><br><span class="line"><span class="comment">    [str substringToIndex:NSMaxRange([str rangeOfComposedCharacterSequenceAtIndex:index])]</span></span><br><span class="line"><span class="comment">    [str substringWithRange:[str rangeOfComposedCharacterSequencesForRange:range]</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//截取指定位置之后的字符串</span></span><br><span class="line">- (<span class="built_in">NSString</span> *)substringFromIndex:(<span class="built_in">NSUInteger</span>)from;</span><br><span class="line"></span><br><span class="line"><span class="comment">//从0下标开始截取到指定位置的字符串  </span></span><br><span class="line">- (<span class="built_in">NSString</span> *)substringToIndex:(<span class="built_in">NSUInteger</span>)to;</span><br><span class="line"></span><br><span class="line"><span class="comment">//截取指定范围的字符串  </span></span><br><span class="line">- (<span class="built_in">NSString</span> *)substringWithRange:(<span class="built_in">NSRange</span>)range;            </span><br><span class="line"></span><br><span class="line"><span class="comment">//截取字符串指定范围的字符 </span></span><br><span class="line">- (<span class="keyword">void</span>)getCharacters:(<span class="keyword">unichar</span> *)buffer range:(<span class="built_in">NSRange</span>)range;</span><br></pre></td></tr></table></figure><h4 id="3-字符串的比较"><a href="#3-字符串的比较" class="headerlink" title="3.字符串的比较"></a>3.字符串的比较</h4><h5 id="3-1用NSComparisonResult作为比较返回结果的方法："><a href="#3-1用NSComparisonResult作为比较返回结果的方法：" class="headerlink" title="3.1用NSComparisonResult作为比较返回结果的方法："></a>3.1用<code>NSComparisonResult</code>作为比较返回结果的方法：</h5><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 在compare:方法中，range参数指定要在比较中使用的接收者的子例程，而不是整个。范围不应用于搜索字符串。</span></span><br><span class="line"><span class="comment">例如，[@“AB”compare:@“ABC”选项:0 range:NSMakeRange(0,1)]将“A”与“ABC”进行比较，</span></span><br><span class="line"><span class="comment">而不是“A”与“A”，并返回nsordered升序。指定超出接收方界限的范围是错误的，可能会引发异常。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">- (<span class="built_in">NSComparisonResult</span>)compare:(<span class="built_in">NSString</span> *)string;</span><br><span class="line">- (<span class="built_in">NSComparisonResult</span>)compare:(<span class="built_in">NSString</span> *)string options:(<span class="built_in">NSStringCompareOptions</span>)mask;</span><br><span class="line">- (<span class="built_in">NSComparisonResult</span>)compare:(<span class="built_in">NSString</span> *)string options:(<span class="built_in">NSStringCompareOptions</span>)mask range:(<span class="built_in">NSRange</span>)rangeOfReceiverToCompare;</span><br><span class="line">- (<span class="built_in">NSComparisonResult</span>)compare:(<span class="built_in">NSString</span> *)string options:(<span class="built_in">NSStringCompareOptions</span>)mask range:(<span class="built_in">NSRange</span>)rangeOfReceiverToCompare locale:(<span class="keyword">nullable</span> <span class="keyword">id</span>)locale; <span class="comment">// locale arg used to be a dictionary pre-Leopard. We now accept NSLocale. Assumes the current locale if non-nil and non-NSLocale. nil continues to mean canonical compare, which doesn't depend on user's locale choice.</span></span><br><span class="line">- (<span class="built_in">NSComparisonResult</span>)caseInsensitiveCompare:(<span class="built_in">NSString</span> *)string;</span><br><span class="line">- (<span class="built_in">NSComparisonResult</span>)localizedCompare:(<span class="built_in">NSString</span> *)string;</span><br><span class="line">- (<span class="built_in">NSComparisonResult</span>)localizedCaseInsensitiveCompare:(<span class="built_in">NSString</span> *)string;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* localizedStandardCompare:，在10.6中添加，当文件名或其他字符串出现在列表和表中时，应该使用它，在那里类似查找器的排序是合适的。</span></span><br><span class="line"><span class="comment">这个方法的确切行为可以在以后的版本中进行调整，并且在不同的本地化下会有所不同，因此客户机不应该依赖于字符串的精确排序顺序。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">- (<span class="built_in">NSComparisonResult</span>)localizedStandardCompare:(<span class="built_in">NSString</span> *)string API_AVAILABLE(macos(<span class="number">10.6</span>), ios(<span class="number">4.0</span>), watchos(<span class="number">2.0</span>), tvos(<span class="number">9.0</span>));</span><br></pre></td></tr></table></figure><p>返回的结果NScomparisonResult:</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="built_in">NS_ENUM</span>(<span class="built_in">NSInteger</span>, <span class="built_in">NSComparisonResult</span>) &#123;</span><br><span class="line"><span class="built_in">NSOrderedAscending</span> = <span class="number">-1</span>L,   <span class="comment">// 递增</span></span><br><span class="line"><span class="built_in">NSOrderedSame</span>,              <span class="comment">// 相等</span></span><br><span class="line"><span class="built_in">NSOrderedDescending</span>         <span class="comment">// 递减</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>参数类型 NSStringCompareOptions：</p><blockquote><p>NSCaseInsensitiveSearch      不区分大小写比较<br>NSLiteralSearch    区分大小写比较<br>NSBackwardsSearch    从字符串末尾开始搜索<br>NSAnchoredSearch    搜索限制范围的字符串<br>NSNumericSearch    按照字符串里的数字为依据，算出顺序<br>NSDiacriticInsensitiveSearch    忽略 “-“ 符号的比较<br>NSWidthInsensitiveSearch    忽略字符串的长度，比较出结果<br>NSForcedOrderingSearch    忽略不区分大小写比较的选项<br>NSRegularExpressionSearch    只能应用于 rangeOfString:…, stringByReplacingOccurrencesOfString:…和 replaceOccurrencesOfString:…方法</p></blockquote><p>比较原理:</p><p>如果没有调用option的方法，比较是从两个字符串的第一个字母开始一一对比，相同则比较下一个，不同则返回结果为升序或者降序，两个比较字符串建议长度一致，不一致也可以比较，比如：</p><p>@”agc” compare @” ab” //返回降序， </p><p>@”abc” compare @”gd” //比较第一个字母之后就返回升序</p><p>参数range；</p><p>是决定前一个比较对象所需比较的范围。</p><h5 id="3-2使用isEqualToString比较是否相等"><a href="#3-2使用isEqualToString比较是否相等" class="headerlink" title="3.2使用isEqualToString比较是否相等"></a>3.2使用<code>isEqualToString</code>比较是否相等</h5><p><code>-(BOOL)isEqualToString:(NSString *)aString;</code></p><h4 id="4-字符串检索"><a href="#4-字符串检索" class="headerlink" title="4.字符串检索"></a>4.字符串检索</h4><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//////////搜索基本//////////  </span></span><br><span class="line"><span class="comment">//1.是否包含前缀(以str开头)  </span></span><br><span class="line">- (<span class="built_in">BOOL</span>)hasPrefix:(<span class="built_in">NSString</span> *)str;  </span><br><span class="line"><span class="comment">//2.是否包含后缀(以str结尾)  </span></span><br><span class="line">- (<span class="built_in">BOOL</span>)hasSuffix:(<span class="built_in">NSString</span> *)str;  </span><br><span class="line"><span class="comment">//3.获取公共前缀  </span></span><br><span class="line">- (<span class="built_in">NSString</span> *)commonPrefixWithString:(<span class="built_in">NSString</span> *)str options:(<span class="built_in">NSStringCompareOptions</span>)mask;  </span><br><span class="line"><span class="comment">//4.是否包含字符串  </span></span><br><span class="line">- (<span class="built_in">BOOL</span>)containsString:(<span class="built_in">NSString</span> *)str;  </span><br><span class="line"><span class="comment">//5.本地化是否包含字符串(不区分大小写)  </span></span><br><span class="line">- (<span class="built_in">BOOL</span>)localizedCaseInsensitiveContainsString:(<span class="built_in">NSString</span> *)str;  </span><br><span class="line"><span class="comment">//6.本地化是否包含字符串(标准)  </span></span><br><span class="line">- (<span class="built_in">BOOL</span>)localizedStandardContainsString:(<span class="built_in">NSString</span> *)str;  </span><br><span class="line"><span class="comment">//7.本地化搜索字符串范围(标准)  </span></span><br><span class="line">- (<span class="built_in">NSRange</span>)localizedStandardRangeOfString:(<span class="built_in">NSString</span> *)str;  </span><br><span class="line">  </span><br><span class="line">   <span class="comment">//////////搜索字符串//////////  </span></span><br><span class="line"><span class="comment">//8.搜索(指定字符串)  </span></span><br><span class="line">- (<span class="built_in">NSRange</span>)rangeOfString:(<span class="built_in">NSString</span> *)searchString;  </span><br><span class="line"><span class="comment">//9.搜索(指定字符串,条件)  </span></span><br><span class="line">- (<span class="built_in">NSRange</span>)rangeOfString:(<span class="built_in">NSString</span> *)searchString options:(<span class="built_in">NSStringCompareOptions</span>)mask;  </span><br><span class="line"><span class="comment">//10.搜索(指定字符串,条件,范围)  </span></span><br><span class="line">- (<span class="built_in">NSRange</span>)rangeOfString:(<span class="built_in">NSString</span> *)searchString options:(<span class="built_in">NSStringCompareOptions</span>)mask range:(<span class="built_in">NSRange</span>)searchRange;  </span><br><span class="line"><span class="comment">//11.搜索(指定字符串,条件,范围,本地化)  </span></span><br><span class="line">- (<span class="built_in">NSRange</span>)rangeOfString:(<span class="built_in">NSString</span> *)searchString options:(<span class="built_in">NSStringCompareOptions</span>)mask range:(<span class="built_in">NSRange</span>)searchRange locale:(<span class="keyword">nullable</span> <span class="built_in">NSLocale</span> *)locale;  </span><br><span class="line">  </span><br><span class="line">   <span class="comment">//////////搜索字符集合//////////  </span></span><br><span class="line"><span class="comment">//12.搜索(指定字符集合)  </span></span><br><span class="line">- (<span class="built_in">NSRange</span>)rangeOfCharacterFromSet:(<span class="built_in">NSCharacterSet</span> *)searchSet;  </span><br><span class="line"><span class="comment">//13.搜索(指定字符集合,条件)  </span></span><br><span class="line">- (<span class="built_in">NSRange</span>)rangeOfCharacterFromSet:(<span class="built_in">NSCharacterSet</span> *)searchSet options:(<span class="built_in">NSStringCompareOptions</span>)mask;  </span><br><span class="line"><span class="comment">//14.搜索(指定字符集合,条件,范围)  </span></span><br><span class="line">- (<span class="built_in">NSRange</span>)rangeOfCharacterFromSet:(<span class="built_in">NSCharacterSet</span> *)searchSet options:(<span class="built_in">NSStringCompareOptions</span>)mask range:(<span class="built_in">NSRange</span>)searchRange;  </span><br><span class="line">  </span><br><span class="line"><span class="comment">//15.用字符串的字符编码指定索引查找位置  </span></span><br><span class="line">- (<span class="built_in">NSRange</span>)rangeOfComposedCharacterSequenceAtIndex:(<span class="built_in">NSUInteger</span>)index;  </span><br><span class="line"><span class="comment">//16.用字符串的字符编码指定区域段查找位置  </span></span><br><span class="line">- (<span class="built_in">NSRange</span>)rangeOfComposedCharacterSequencesForRange:(<span class="built_in">NSRange</span>)range;</span><br></pre></td></tr></table></figure><h4 id="5-字符串拼接"><a href="#5-字符串拼接" class="headerlink" title="5.字符串拼接"></a>5.字符串拼接</h4><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// 后面直接拼接字符串</span></span><br><span class="line">- (<span class="built_in">NSString</span> *)stringByAppendingString:(<span class="built_in">NSString</span> *)aString;  </span><br><span class="line"></span><br><span class="line"><span class="comment">// 后面可以直接拼接字符串，也可拼接字符串参数</span></span><br><span class="line">- (<span class="built_in">NSString</span> *)stringByAppendingFormat:(<span class="built_in">NSString</span> *)format, ... <span class="built_in">NS_FORMAT_FUNCTION</span>(<span class="number">1</span>,<span class="number">2</span>);  </span><br><span class="line"></span><br><span class="line"><span class="comment">// 添加路径</span></span><br><span class="line">- (<span class="built_in">NSString</span> *)stringByAppendingPathComponent:(<span class="built_in">NSString</span> *)str;</span><br></pre></td></tr></table></figure><blockquote><p>注意：stringByAppendingString 与 stringByAppendingFormat的与别</p></blockquote><h4 id="6-字符串可以转化为基本数据"><a href="#6-字符串可以转化为基本数据" class="headerlink" title="6.字符串可以转化为基本数据"></a>6.字符串可以转化为基本数据</h4><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 面的便利方法都跳过了初始空格字符(whitespaceSet)，忽略了尾随字符。他们不是识别地区。NSScanner或NSNumberFormatter可以用于更强大和本地感知的数字解析。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">readonly</span>) <span class="keyword">double</span> doubleValue;</span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">readonly</span>) <span class="keyword">float</span> floatValue;</span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">readonly</span>) <span class="keyword">int</span> intValue;</span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">readonly</span>) <span class="built_in">NSInteger</span> integerValue API_AVAILABLE(macos(<span class="number">10.5</span>), ios(<span class="number">2.0</span>), watchos(<span class="number">2.0</span>), tvos(<span class="number">9.0</span>));</span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">readonly</span>) <span class="keyword">long</span> <span class="keyword">long</span> longLongValue API_AVAILABLE(macos(<span class="number">10.5</span>), ios(<span class="number">2.0</span>), watchos(<span class="number">2.0</span>), tvos(<span class="number">9.0</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 跳过初始的空格字符(白色的)，或者是可选的-/+符号，后跟0。当遇到“Y”、“Y”、“T”、“T”或数字1-9时返回YES。它忽略任何尾字符。</span></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">readonly</span>) <span class="built_in">BOOL</span> boolValue API_AVAILABLE(macos(<span class="number">10.5</span>), ios(<span class="number">2.0</span>), watchos(<span class="number">2.0</span>), tvos(<span class="number">9.0</span>));</span><br></pre></td></tr></table></figure><blockquote><p>注意：这里需要提示一下，如果字符串内全是数字，则会全部转化（如果有小数点，转为float和double类型会全转，其他形式只取整数，），如果全是非数字，或者没有以数字开头，怎转化值为0，比如：@”dgtgwge566” //0   如果开头以数字开头，开始会提取到开头几个数字的，后面的提取不了，如：@”456dkhgeo90” //456</p></blockquote><h4 id="7-字符大小写转化"><a href="#7-字符大小写转化" class="headerlink" title="7.字符大小写转化"></a>7.字符大小写转化</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">NSString *string = @&quot;string&quot;;  </span><br><span class="line">  </span><br><span class="line">NSLog(@&quot;大写:         %@&quot;, string.uppercaseString);  </span><br><span class="line">NSLog(@&quot;小写:         %@&quot;, string.lowercaseString);  </span><br><span class="line">NSLog(@&quot;首字母大写:    %@&quot;, string.capitalizedString);  </span><br><span class="line">//输出:   大写:         STRING  </span><br><span class="line">//输出:   小写:         string  </span><br><span class="line">//输出:   首字母大写:    String  </span><br><span class="line">  </span><br><span class="line">//本地化(大写)  </span><br><span class="line">- (NSString *)uppercaseStringWithLocale:(nullable NSLocale *)locale;   </span><br><span class="line">//本地化(小写)  </span><br><span class="line">- (NSString *)lowercaseStringWithLocale:(nullable NSLocale *)locale;  </span><br><span class="line">//本地化(首字母大写)  </span><br><span class="line">- (NSString *)capitalizedStringWithLocale:(nullable NSLocale *)locale;</span><br></pre></td></tr></table></figure><h4 id="8-字符串分行分段"><a href="#8-字符串分行分段" class="headerlink" title="8.字符串分行分段"></a>8.字符串分行分段</h4><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//分行 </span></span><br><span class="line"><span class="comment">//1.指定范围,分行取字符串  </span></span><br><span class="line">- (<span class="keyword">void</span>)getLineStart:(<span class="keyword">nullable</span> <span class="built_in">NSUInteger</span> *)startPtr </span><br><span class="line">                 end:(<span class="keyword">nullable</span> <span class="built_in">NSUInteger</span> *)lineEndPtr </span><br><span class="line">         contentsEnd:(<span class="keyword">nullable</span> <span class="built_in">NSUInteger</span> *)contentsEndPtr </span><br><span class="line">            forRange:(<span class="built_in">NSRange</span>)range;  </span><br><span class="line"><span class="comment">//2.获取指定范围该行的范围  </span></span><br><span class="line">- (<span class="built_in">NSRange</span>)lineRangeForRange:(<span class="built_in">NSRange</span>)range;  </span><br><span class="line">  </span><br><span class="line"><span class="comment">//分段</span></span><br><span class="line"><span class="comment">//3.指定范围,分段取字符串  </span></span><br><span class="line">- (<span class="keyword">void</span>)getParagraphStart:(<span class="keyword">nullable</span> <span class="built_in">NSUInteger</span> *)startPtr </span><br><span class="line">                      end:(<span class="keyword">nullable</span> <span class="built_in">NSUInteger</span> *)parEndPtr </span><br><span class="line">              contentsEnd:(<span class="keyword">nullable</span> <span class="built_in">NSUInteger</span> *)contentsEndPtr </span><br><span class="line">                 forRange:(<span class="built_in">NSRange</span>)range;  </span><br><span class="line"><span class="comment">//4.获取指定范围该段落的范围  </span></span><br><span class="line">- (<span class="built_in">NSRange</span>)paragraphRangeForRange:(<span class="built_in">NSRange</span>)range;  </span><br><span class="line">  </span><br><span class="line"><span class="comment">//字符串分行,分段/ </span></span><br><span class="line"><span class="built_in">NSString</span> *string = <span class="string">@"123 456\nABC,DEF\nabc.def"</span>;  </span><br><span class="line"><span class="comment">//获取该行的范围(指定范围)  </span></span><br><span class="line"><span class="built_in">NSRange</span> range1 = [string lineRangeForRange:<span class="built_in">NSMakeRange</span>(<span class="number">0</span>, <span class="number">10</span>)];  </span><br><span class="line"><span class="built_in">NSLog</span>(<span class="string">@"%ld 行长度:     %ld"</span>, range1.location, range1.length);  </span><br><span class="line"><span class="comment">//输出:       0 行长度:     16  </span></span><br><span class="line">  </span><br><span class="line"><span class="comment">//获取该段落范围(指定范围)  </span></span><br><span class="line"><span class="built_in">NSRange</span> range2 = [string paragraphRangeForRange:<span class="built_in">NSMakeRange</span>(<span class="number">0</span>, <span class="number">3</span>)];  </span><br><span class="line"><span class="built_in">NSLog</span>(<span class="string">@"%ld 段落长度:   %ld"</span>, range2.location, range2.length);  </span><br><span class="line"><span class="comment">//输出:       0 段落长度:   8</span></span><br></pre></td></tr></table></figure><h4 id="9-字符串列举条件"><a href="#9-字符串列举条件" class="headerlink" title="9.字符串列举条件"></a>9.字符串列举条件</h4><p>NSStringEnumerationOptions</p><blockquote><p>NSStringEnumerationByLines    按行<br>NSStringEnumerationByParagraphs    按段落<br>NSStringEnumerationByComposedCharacterSequences    按字符顺序<br>NSStringEnumerationByWords    按单词,字<br>NSStringEnumerationBySentences    按句子<br>NSStringEnumerationReverse    反向遍历<br>NSStringEnumerationSubstringNotRequired    不需要子字符串<br>NSStringEnumerationLocalized    本地化</p></blockquote><h4 id="10-字符串编码与转换"><a href="#10-字符串编码与转换" class="headerlink" title="10.字符串编码与转换"></a>10.字符串编码与转换</h4><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1.选择编码,是否允许有损编码【重要】  </span></span><br><span class="line">- (<span class="keyword">nullable</span> <span class="built_in">NSData</span> *)dataUsingEncoding:(<span class="built_in">NSStringEncoding</span>)encoding allowLossyConversion:(<span class="built_in">BOOL</span>)lossy;  </span><br><span class="line"><span class="comment">//2.选择编码  </span></span><br><span class="line">- (<span class="keyword">nullable</span> <span class="built_in">NSData</span> *)dataUsingEncoding:(<span class="built_in">NSStringEncoding</span>)encoding;  </span><br><span class="line"><span class="comment">//3.判断是否可以无损编码  </span></span><br><span class="line">- (<span class="built_in">BOOL</span>)canBeConvertedToEncoding:(<span class="built_in">NSStringEncoding</span>)encoding;  </span><br><span class="line">  </span><br><span class="line"><span class="comment">//4.C字符编码转换  </span></span><br><span class="line">- (<span class="keyword">nullable</span> __<span class="keyword">strong</span> <span class="keyword">const</span> charchar *)cStringUsingEncoding:(<span class="built_in">NSStringEncoding</span>)encoding;  </span><br><span class="line"><span class="comment">//5.判读C字符转化是否可以成功  </span></span><br><span class="line">- (<span class="built_in">BOOL</span>)getCString:(charchar *)buffer maxLength:(<span class="built_in">NSUInteger</span>)maxBufferCount encoding:(<span class="built_in">NSStringEncoding</span>)encoding;  </span><br><span class="line"><span class="comment">//6.指定缓存区转换  </span></span><br><span class="line">- (<span class="built_in">BOOL</span>)getBytes:(<span class="keyword">nullable</span> voidvoid *)buffer maxLength:(<span class="built_in">NSUInteger</span>)maxBufferCount usedLength:(<span class="keyword">nullable</span> <span class="built_in">NSUInteger</span> *)usedBufferCount encoding:(<span class="built_in">NSStringEncoding</span>)encoding options:(<span class="built_in">NSStringEncodingConversionOptions</span>)options range:(<span class="built_in">NSRange</span>)range remainingRange:(<span class="keyword">nullable</span> <span class="built_in">NSRangePointer</span>)leftover;  </span><br><span class="line">  </span><br><span class="line"><span class="comment">//7.对字符串进行编码时所需的最大字节数  </span></span><br><span class="line">- (<span class="built_in">NSUInteger</span>)maximumLengthOfBytesUsingEncoding:(<span class="built_in">NSStringEncoding</span>)enc;  </span><br><span class="line"><span class="comment">//8.对字符串进行编码时所需的字节数  </span></span><br><span class="line">- (<span class="built_in">NSUInteger</span>)lengthOfBytesUsingEncoding:(<span class="built_in">NSStringEncoding</span>)enc;  </span><br><span class="line">  </span><br><span class="line"><span class="comment">//9.可用字符串编码  </span></span><br><span class="line">+ (<span class="keyword">const</span> <span class="built_in">NSStringEncoding</span> *)availableStringEncodings;   </span><br><span class="line"><span class="comment">//10.本地化编码名称  </span></span><br><span class="line">+ (<span class="built_in">NSString</span> *)localizedNameOfStringEncoding:(<span class="built_in">NSStringEncoding</span>)encoding;  </span><br><span class="line"><span class="comment">//11.默认C字符串编码  </span></span><br><span class="line">+ (<span class="built_in">NSStringEncoding</span>)defaultCStringEncoding;</span><br></pre></td></tr></table></figure><h4 id="11-字符串分割"><a href="#11-字符串分割" class="headerlink" title="11.字符串分割"></a>11.字符串分割</h4><p>NSCharacterSet集合</p><blockquote><p>controlCharacterSet    控制符<br>whitespaceCharacterSet    空格符<br>whitespaceAndNewlineCharacterSet    空格换行符<br>decimalDigitCharacterSet    小数<br>letterCharacterSet    文字<br>lowercaseLetterCharacterSet    小写字母<br>uppercaseLetterCharacterSet    大写字母<br>nonBaseCharacterSet    非基础<br>alphanumericCharacterSet    数字字母<br>decomposableCharacterSet    可分解<br>illegalCharacterSet    非法<br>punctuationCharacterSet    标点<br>capitalizedLetterCharacterSet    大写<br>symbolCharacterSet    符号<br>newlineCharacterSet    换行符</p></blockquote><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//字符串分割</span></span><br><span class="line"><span class="built_in">NSString</span> *string = <span class="string">@"A_B_c_D_E_F"</span>;  </span><br><span class="line">  </span><br><span class="line"><span class="comment">//分割(指定字符串)  </span></span><br><span class="line"><span class="built_in">NSArray</span> *resultArr1 = [string componentsSeparatedByString:<span class="string">@"_"</span>];  </span><br><span class="line"><span class="built_in">NSLog</span>(<span class="string">@"%@"</span>, resultArr1);  </span><br><span class="line"><span class="comment">//输出:   (A, B, c, D, E, F)  </span></span><br><span class="line">  </span><br><span class="line"><span class="comment">//分割(指定字符集合)  </span></span><br><span class="line"><span class="built_in">NSArray</span> *resultArr2 = [string componentsSeparatedByCharactersInSet:[<span class="built_in">NSCharacterSet</span> lowercaseLetterCharacterSet]];  </span><br><span class="line"><span class="built_in">NSLog</span>(<span class="string">@"%@"</span>, resultArr2);      </span><br><span class="line"><span class="comment">//输出:   ("A_B_" , "_D_E_F")</span></span><br></pre></td></tr></table></figure><h4 id="12-字符串操作（修剪，替换，折叠，填充）"><a href="#12-字符串操作（修剪，替换，折叠，填充）" class="headerlink" title="12.字符串操作（修剪，替换，折叠，填充）"></a>12.字符串操作（修剪，替换，折叠，填充）</h4><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">NSString</span> *string = <span class="string">@"3EWRs a;af"</span>;  </span><br><span class="line">  </span><br><span class="line"><span class="comment">//////////修剪//////////  </span></span><br><span class="line"><span class="built_in">NSString</span> *result1 = [string stringByTrimmingCharactersInSet:[<span class="built_in">NSCharacterSet</span> lowercaseLetterCharacterSet]];  </span><br><span class="line"><span class="built_in">NSLog</span>(<span class="string">@"%@"</span>, result1);  </span><br><span class="line"><span class="comment">//输出:   3EWRs a;  </span></span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line"><span class="comment">//////////填充//////////  </span></span><br><span class="line"><span class="built_in">NSString</span> *result2 = [string stringByPaddingToLength:<span class="number">20</span> withString:<span class="string">@"填充"</span> startingAtIndex:<span class="number">1</span>];  </span><br><span class="line"><span class="built_in">NSLog</span>(<span class="string">@"%@"</span>, result2);  </span><br><span class="line"><span class="comment">//输出:   3EWRs a;af充填充填充填充填充填  </span></span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line"><span class="comment">//////////折叠//////////  </span></span><br><span class="line"><span class="built_in">NSString</span> *result3 = [string stringByFoldingWithOptions:<span class="built_in">NSNumericSearch</span> locale:[<span class="built_in">NSLocale</span> systemLocale]];  </span><br><span class="line"><span class="built_in">NSLog</span>(<span class="string">@"%@"</span>, result3);  </span><br><span class="line"><span class="comment">//输出:   3EWRs a;af  </span></span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line"><span class="comment">//////////替换//////////  </span></span><br><span class="line"><span class="comment">//替换(指定字符串)  </span></span><br><span class="line"><span class="built_in">NSString</span> *result4 = [string stringByReplacingOccurrencesOfString:<span class="string">@" "</span> withString:<span class="string">@"替换"</span>];  </span><br><span class="line"><span class="built_in">NSLog</span>(<span class="string">@"%@"</span>, result4);  </span><br><span class="line"><span class="comment">//输出:   3EWRs替换a;af  </span></span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line"><span class="comment">//替换(指定字符串,条件,范围)  </span></span><br><span class="line"><span class="built_in">NSString</span> *result5 = [string stringByReplacingOccurrencesOfString:<span class="string">@"a"</span> withString:<span class="string">@"替换"</span> options:<span class="built_in">NSRegularExpressionSearch</span> range:<span class="built_in">NSMakeRange</span>(<span class="number">0</span>, string.length - <span class="number">2</span>)];  </span><br><span class="line"><span class="built_in">NSLog</span>(<span class="string">@"%@"</span>, result5);  </span><br><span class="line"><span class="comment">//输出:   3EWRs 替换;af  </span></span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line"><span class="comment">//替换(指定范围)  </span></span><br><span class="line"><span class="built_in">NSString</span> *result6 = [string stringByReplacingCharactersInRange:<span class="built_in">NSMakeRange</span>(<span class="number">0</span>, string.length) withString:<span class="string">@"替换"</span>];  </span><br><span class="line"><span class="built_in">NSLog</span>(<span class="string">@"%@"</span>, result6);  </span><br><span class="line"><span class="comment">//输出:   替换</span></span><br></pre></td></tr></table></figure><h4 id="13-字符串写入"><a href="#13-字符串写入" class="headerlink" title="13.字符串写入"></a>13.字符串写入</h4><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//字符串写入 </span></span><br><span class="line"><span class="comment">//写入到指定路径,编码的文件中  </span></span><br><span class="line">[string writeToFile:<span class="string">@"/Users/Desktop/LuisX.txt"</span> atomically:<span class="literal">YES</span> encoding:<span class="built_in">NSUTF8StringEncoding</span> error:<span class="literal">nil</span>];  </span><br><span class="line">  </span><br><span class="line"><span class="comment">//写入到指定URL,编码的文件中  </span></span><br><span class="line">[string writeToURL:[<span class="built_in">NSURL</span> URLWithString:<span class="string">@"file://LuisX.text"</span>] atomically:<span class="literal">YES</span> encoding:<span class="built_in">NSUTF8StringEncoding</span> error:<span class="literal">nil</span>];</span><br></pre></td></tr></table></figure><h4 id="14-NSMutableString的介绍"><a href="#14-NSMutableString的介绍" class="headerlink" title="14.NSMutableString的介绍"></a>14.NSMutableString的介绍</h4><p>NSMutableString是NSString的字类，可以动态的扩展字符串。</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1.初始化容量为Capacity大小的字符串  (需要手动释放内存)  </span></span><br><span class="line"><span class="built_in">NSMutableString</span> *mutableStr1 = [[<span class="built_in">NSMutableString</span> alloc] initWithCapacity:<span class="number">20</span>];  </span><br><span class="line">  </span><br><span class="line"><span class="comment">//2.初始化容量为Capacity大小的字符串  (不需要手动释放内存)  </span></span><br><span class="line"><span class="built_in">NSMutableString</span> *mutableStr2 = [<span class="built_in">NSMutableString</span> stringWithCapacity:<span class="number">20</span>];  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line"><span class="built_in">NSMutableString</span> *str = [<span class="built_in">NSMutableString</span> stringWithString:<span class="string">@"string"</span>];  </span><br><span class="line">  </span><br><span class="line"><span class="comment">//////////插入//////////  </span></span><br><span class="line">[str insertString:<span class="string">@"123"</span> atIndex:<span class="number">2</span>];  </span><br><span class="line"><span class="built_in">NSLog</span>(<span class="string">@"%@"</span>, str);  </span><br><span class="line"><span class="comment">//输出:   st123ring  </span></span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line"><span class="comment">//////////删除//////////  </span></span><br><span class="line">[str deleteCharactersInRange:<span class="built_in">NSMakeRange</span>(<span class="number">2</span>, <span class="number">2</span>)];  </span><br><span class="line"><span class="built_in">NSLog</span>(<span class="string">@"%@"</span>, str);  </span><br><span class="line"><span class="comment">//输出:   st3ring  </span></span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line"><span class="comment">//////////拼接//////////  </span></span><br><span class="line">[str appendString:<span class="string">@"456"</span>];  </span><br><span class="line"><span class="built_in">NSLog</span>(<span class="string">@"%@"</span>, str);  </span><br><span class="line"><span class="comment">//输出:   st3ring456  </span></span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line"><span class="comment">//////////格式化拼接//////////  </span></span><br><span class="line">[str appendFormat:<span class="string">@"7 89"</span>];  </span><br><span class="line"><span class="built_in">NSLog</span>(<span class="string">@"%@"</span>, str);  </span><br><span class="line"><span class="comment">//输出:   st3ring4567 89  </span></span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line"><span class="comment">//////////设置新字符串//////////  </span></span><br><span class="line">[str setString:<span class="string">@"string"</span>];  </span><br><span class="line"><span class="built_in">NSLog</span>(<span class="string">@"%@"</span>, str);  </span><br><span class="line"><span class="comment">//输出:   string  </span></span><br><span class="line">  </span><br><span class="line"><span class="comment">//////////字符串替换//////////  </span></span><br><span class="line"><span class="comment">//1.指定范围替换  </span></span><br><span class="line">[str1 replaceCharactersInRange:<span class="built_in">NSMakeRange</span>(<span class="number">2</span>, <span class="number">2</span>) withString:<span class="string">@"123"</span>];  </span><br><span class="line"><span class="built_in">NSLog</span>(<span class="string">@"%@"</span>, str1);  </span><br><span class="line"><span class="comment">//输出:   st123ng  </span></span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line"><span class="comment">//2.指定字符串,条件,范围替换  </span></span><br><span class="line">[str1 replaceOccurrencesOfString:<span class="string">@"123"</span> withString:<span class="string">@"--"</span> options:<span class="built_in">NSRegularExpressionSearch</span> range:<span class="built_in">NSMakeRange</span>(<span class="number">0</span>, str1.length)];  </span><br><span class="line"><span class="built_in">NSLog</span>(<span class="string">@"%@"</span>, str1);  </span><br><span class="line"><span class="comment">//输出:   st--ng</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;一、前言&quot;&gt;&lt;a href=&quot;#一、前言&quot; class=&quot;headerlink&quot; title=&quot;一、前言&quot;&gt;&lt;/a&gt;一、前言&lt;/h3&gt;&lt;p&gt;NSString 是Foundation框架下的一个处理字符串的类，也是我们平常开发过程中使用的比较多的类。&lt;/p&gt;
&lt;h3
      
    
    </summary>
    
      <category term="iOS 开发" scheme="http://yoursite.com/categories/iOS-%E5%BC%80%E5%8F%91/"/>
    
      <category term="基础知识" scheme="http://yoursite.com/categories/iOS-%E5%BC%80%E5%8F%91/%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
    
      <category term="NSString" scheme="http://yoursite.com/categories/iOS-%E5%BC%80%E5%8F%91/%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/NSString/"/>
    
    
  </entry>
  
  <entry>
    <title>iOS开发本地推送UILocalNotification</title>
    <link href="http://yoursite.com/2018/06/11/iOS%E5%BC%80%E5%8F%91%E6%9C%AC%E5%9C%B0%E6%8E%A8%E9%80%81UILocalNotification/"/>
    <id>http://yoursite.com/2018/06/11/iOS开发本地推送UILocalNotification/</id>
    <published>2018-06-10T16:39:27.000Z</published>
    <updated>2018-06-14T09:34:40.254Z</updated>
    
    <content type="html"><![CDATA[<h3 id="一、简介"><a href="#一、简介" class="headerlink" title="一、简介"></a>一、简介</h3><p><code>UILocalNotification</code> 是通过设置时间来触发本地推送通知的通知方式,不需要连网就能实现推送功能。本地通知触发后，会显示在通知中心中，并根据配置，显示横幅和播放声音，和App的icon上显示通知的条数。 </p><p><code>UILocalNotification</code> 适用于闹钟、提醒、备忘录等功能。缺点是<code>UILocalNotification</code>可以设置的最大提醒条数为64条。超过64条的通知将系统会自动忽略。</p><h3 id="二、使用"><a href="#二、使用" class="headerlink" title="二、使用"></a>二、使用</h3><ol><li>创建UILocalNotification实例</li><li>设置相关的属性，如：时间、时间间隔、是否重复、推送方式、推送铃声、推送标题、推送简介、推送的参数等等。</li><li>注册添加本地通知</li><li>Appdelegate.m 接收注册通知</li><li>触发通知的业务跳转处理</li><li>取消通知</li></ol><h3 id="三、属性介绍"><a href="#三、属性介绍" class="headerlink" title="三、属性介绍"></a>三、属性介绍</h3><p>属性介绍</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@property</span>(<span class="keyword">nullable</span>, <span class="keyword">nonatomic</span>,<span class="keyword">copy</span>) <span class="built_in">NSDate</span> *fireDate;设置通知的提醒时间</span><br><span class="line"></span><br><span class="line"><span class="keyword">@property</span>(<span class="keyword">nullable</span>, <span class="keyword">nonatomic</span>,<span class="keyword">copy</span>) <span class="built_in">NSTimeZone</span> *timeZone;设置时间的时区</span><br><span class="line"></span><br><span class="line"><span class="keyword">@property</span>(<span class="keyword">nonatomic</span>) <span class="built_in">NSCalendarUnit</span> repeatInterval;   设置重复间隔的单位，（天、周、月、年，<span class="number">0</span>表示不重复）  </span><br><span class="line"></span><br><span class="line"><span class="keyword">@property</span>(<span class="keyword">nullable</span>, <span class="keyword">nonatomic</span>,<span class="keyword">copy</span>) <span class="built_in">NSCalendar</span> *repeatCalendar;重复激发通知所使用的日历单位需要参考的日历，如果不设置的话，系统默认的日历将被作为参考日历。</span><br><span class="line"></span><br><span class="line"><span class="comment">//    NSString *const NSGregorianCalendar; 公历</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//    NSString * const NSChineseCalendar;   农历</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">@property</span>(<span class="keyword">nullable</span>, <span class="keyword">nonatomic</span>,<span class="keyword">copy</span>) <span class="built_in">CLRegion</span> *region;设置触发通知的地理区域</span><br><span class="line"></span><br><span class="line"><span class="keyword">@property</span>(<span class="keyword">nonatomic</span>,<span class="keyword">assign</span>) <span class="built_in">BOOL</span> regionTriggersOnce;是否穿越通知地理区域时再次触发通知</span><br><span class="line"></span><br><span class="line"><span class="keyword">@property</span>(<span class="keyword">nullable</span>, <span class="keyword">nonatomic</span>,<span class="keyword">copy</span>) <span class="built_in">NSString</span> *alertBody; 通知提示中显示的消息，内容。</span><br><span class="line"></span><br><span class="line"><span class="keyword">@property</span>(<span class="keyword">nonatomic</span>) <span class="built_in">BOOL</span> hasAction;  控制该通知是否显示或隐藏警报动作。</span><br><span class="line"></span><br><span class="line"><span class="keyword">@property</span>(<span class="keyword">nullable</span>, <span class="keyword">nonatomic</span>,<span class="keyword">copy</span>) <span class="built_in">NSString</span> *alertAction; 设置通知动作按钮的标题。</span><br><span class="line"></span><br><span class="line"><span class="keyword">@property</span>(<span class="keyword">nullable</span>, <span class="keyword">nonatomic</span>,<span class="keyword">copy</span>) <span class="built_in">NSString</span> *alertLaunchImage;设置通知动作按钮的图像。</span><br><span class="line"></span><br><span class="line"><span class="keyword">@property</span>(<span class="keyword">nullable</span>, <span class="keyword">nonatomic</span>,<span class="keyword">copy</span>) <span class="built_in">NSString</span> *alertTitle; 设置通知原因的简短描述。</span><br><span class="line"></span><br><span class="line"><span class="keyword">@property</span>(<span class="keyword">nullable</span>, <span class="keyword">nonatomic</span>,<span class="keyword">copy</span>) <span class="built_in">NSString</span> *soundName;通知提示音，可以自定义</span><br><span class="line"></span><br><span class="line"><span class="keyword">@property</span>(<span class="keyword">nonatomic</span>) <span class="built_in">NSInteger</span> applicationIconBadgeNumber;应用程序icon上的提醒个数</span><br><span class="line"></span><br><span class="line"><span class="keyword">@property</span>(<span class="keyword">nullable</span>, <span class="keyword">nonatomic</span>,<span class="keyword">copy</span>) <span class="built_in">NSDictionary</span> *userInfo; 设置应用自定义信息</span><br><span class="line"></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nullable</span>, <span class="keyword">nonatomic</span>, <span class="keyword">copy</span>) <span class="built_in">NSString</span> *category ;设置通知的分类标示</span><br></pre></td></tr></table></figure><p>  <strong><code>NSCalendarUnit repeatInterval</code> 循环枚举</strong></p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="built_in">NS_OPTIONS</span>(<span class="built_in">NSUInteger</span>, <span class="built_in">NSCalendarUnit</span>) &#123;</span><br><span class="line">        <span class="built_in">NSCalendarUnitEra</span>                = kCFCalendarUnitEra,<span class="comment">//一个年代、一个世纪循环一次。</span></span><br><span class="line">        <span class="built_in">NSCalendarUnitYear</span>               = kCFCalendarUnitYear,<span class="comment">//每年循环一次</span></span><br><span class="line">        <span class="built_in">NSCalendarUnitMonth</span>              = kCFCalendarUnitMonth,<span class="comment">//每月循环一次</span></span><br><span class="line">        <span class="built_in">NSCalendarUnitDay</span>                = kCFCalendarUnitDay,<span class="comment">//每天循环一次</span></span><br><span class="line">        <span class="built_in">NSCalendarUnitHour</span>               = kCFCalendarUnitHour,<span class="comment">//每小时循环一次</span></span><br><span class="line">        <span class="built_in">NSCalendarUnitMinute</span>             = kCFCalendarUnitMinute,<span class="comment">//每分钟循环一次</span></span><br><span class="line">        <span class="built_in">NSCalendarUnitSecond</span>             = kCFCalendarUnitSecond,<span class="comment">//每秒循环一次</span></span><br><span class="line">        <span class="built_in">NSCalendarUnitWeekday</span>            = kCFCalendarUnitWeekday,<span class="comment">//平常日、工作日循环，但是周末也会。(*而不是每周循环，具体和NSCalendarUnitDay有什么区别，暂时没有测试出来，如果哪位知道请告知，感谢)</span></span><br><span class="line">        <span class="built_in">NSCalendarUnitWeekdayOrdinal</span>     = kCFCalendarUnitWeekdayOrdinal,</span><br><span class="line">        <span class="built_in">NSCalendarUnitQuarter</span>            <span class="built_in">NS_ENUM_AVAILABLE</span>(<span class="number">10</span>_6, <span class="number">4</span>_0) = kCFCalendarUnitQuarter,<span class="comment">//一个季度循环一次</span></span><br><span class="line">        <span class="built_in">NSCalendarUnitWeekOfMonth</span>        <span class="built_in">NS_ENUM_AVAILABLE</span>(<span class="number">10</span>_7, <span class="number">5</span>_0) = kCFCalendarUnitWeekOfMonth,<span class="comment">//每个月的第几周</span></span><br><span class="line">        <span class="built_in">NSCalendarUnitWeekOfYear</span>         <span class="built_in">NS_ENUM_AVAILABLE</span>(<span class="number">10</span>_7, <span class="number">5</span>_0) = kCFCalendarUnitWeekOfYear,<span class="comment">//每年的第几周</span></span><br><span class="line">        <span class="built_in">NSCalendarUnitYearForWeekOfYear</span>  <span class="built_in">NS_ENUM_AVAILABLE</span>(<span class="number">10</span>_7, <span class="number">5</span>_0) = kCFCalendarUnitYearForWeekOfYear,</span><br><span class="line">        <span class="built_in">NSCalendarUnitNanosecond</span>         <span class="built_in">NS_ENUM_AVAILABLE</span>(<span class="number">10</span>_7, <span class="number">5</span>_0) = (<span class="number">1</span> &lt;&lt; <span class="number">15</span>),</span><br><span class="line">        <span class="built_in">NSCalendarUnitCalendar</span>           <span class="built_in">NS_ENUM_AVAILABLE</span>(<span class="number">10</span>_7, <span class="number">4</span>_0) = (<span class="number">1</span> &lt;&lt; <span class="number">20</span>),</span><br><span class="line">        <span class="built_in">NSCalendarUnitTimeZone</span>           <span class="built_in">NS_ENUM_AVAILABLE</span>(<span class="number">10</span>_7, <span class="number">4</span>_0) = (<span class="number">1</span> &lt;&lt; <span class="number">21</span>),</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="四、代码实现"><a href="#四、代码实现" class="headerlink" title="四、代码实现"></a>四、代码实现</h3><h4 id="1-在-Appdelegate-的application-UIApplication-application-didFinishLaunchingWithOptions-NSDictionary-launchOptions-方法里面添加注册接收方法"><a href="#1-在-Appdelegate-的application-UIApplication-application-didFinishLaunchingWithOptions-NSDictionary-launchOptions-方法里面添加注册接收方法" class="headerlink" title="1.在 Appdelegate 的application:(UIApplication *)application didFinishLaunchingWithOptions:(NSDictionary *)launchOptions  方法里面添加注册接收方法"></a>1.在 Appdelegate 的<code>application:(UIApplication *)application didFinishLaunchingWithOptions:(NSDictionary *)launchOptions</code>  方法里面添加注册接收方法</h4><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> ([<span class="built_in">UIApplication</span> instancesRespondToSelector:<span class="keyword">@selector</span>(registerUserNotificationSettings:)])&#123;</span><br><span class="line">       [[<span class="built_in">UIApplication</span> sharedApplication] registerUserNotificationSettings:[<span class="built_in">UIUserNotificationSettings</span> settingsForTypes:<span class="built_in">UIUserNotificationTypeAlert</span>|<span class="built_in">UIUserNotificationTypeBadge</span>|<span class="built_in">UIUserNotificationTypeSound</span> categories:<span class="literal">nil</span>]];</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h4 id="2-在需要添加通知的页面添加注册通知，或者封装一层调用，可以根据通知需要传入需要的参数，控制通知的注册添加或取消删除"><a href="#2-在需要添加通知的页面添加注册通知，或者封装一层调用，可以根据通知需要传入需要的参数，控制通知的注册添加或取消删除" class="headerlink" title="2.在需要添加通知的页面添加注册通知，或者封装一层调用，可以根据通知需要传入需要的参数，控制通知的注册添加或取消删除"></a>2.在需要添加通知的页面添加注册通知，或者封装一层调用，可以根据通知需要传入需要的参数，控制通知的注册添加或取消删除</h4><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#pragma mark - 注册本地通知方法</span></span><br><span class="line"><span class="comment">// 注册本地通知</span></span><br><span class="line">-(<span class="keyword">void</span>)registerLocalNotification:(<span class="built_in">NSString</span> *)timeStr title:(<span class="built_in">NSString</span> *)title desc:(<span class="built_in">NSString</span> *)desc soundName:(<span class="built_in">NSString</span> *)soundName remindType:(<span class="built_in">NSString</span> *)remindType tagStr:(<span class="built_in">NSString</span> *)tagStr remindId:(<span class="built_in">NSString</span> *)remindId&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">UILocalNotification</span> * notification = [[<span class="built_in">UILocalNotification</span> alloc] init];</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">NSDateFormatter</span> * curndf = [[<span class="built_in">NSDateFormatter</span> alloc] init];</span><br><span class="line">    [curndf setDateFormat:<span class="string">@"yyyy-MM-dd"</span>];</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">NSString</span> * curDate = [curndf stringFromDate:[<span class="built_in">NSDate</span> date]];</span><br><span class="line">    <span class="comment">// 时间加上秒</span></span><br><span class="line">    <span class="built_in">NSString</span> * finalTimeStr = [<span class="built_in">NSString</span> stringWithFormat:<span class="string">@"%@ %@:00"</span>,curDate,timeStr];</span><br><span class="line">    <span class="built_in">NSDateFormatter</span> * finalTimeFormatter = [[<span class="built_in">NSDateFormatter</span> alloc] init];</span><br><span class="line">    [finalTimeFormatter setDateFormat:<span class="string">@"yyyy-MM-dd HH:mm:ss"</span>];</span><br><span class="line">    <span class="built_in">NSDate</span> * finalDate = [finalTimeFormatter dateFromString:finalTimeStr];</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 设置什么时间点(具体的时间)触发本地通知.</span></span><br><span class="line">    notification.fireDate = finalDate;</span><br><span class="line">    <span class="comment">// 设置时区,default手机时区</span></span><br><span class="line">    notification.timeZone = [<span class="built_in">NSTimeZone</span> defaultTimeZone];</span><br><span class="line">    <span class="comment">// 设置重复间隔, 按天跑</span></span><br><span class="line">    notification.repeatInterval = kCFCalendarUnitDay;</span><br><span class="line">    <span class="comment">// 弹出的通知标题</span></span><br><span class="line">    notification.alertTitle = title;</span><br><span class="line">    <span class="comment">// 弹出的通知内容</span></span><br><span class="line">    notification.alertBody = desc;</span><br><span class="line">    <span class="comment">// Badge个数</span></span><br><span class="line">    notification.applicationIconBadgeNumber = notification.applicationIconBadgeNumber+<span class="number">1</span>;</span><br><span class="line">    <span class="comment">// 通知被触发时播放声音</span></span><br><span class="line">    notification.soundName = <span class="built_in">UILocalNotificationDefaultSoundName</span>;</span><br><span class="line">    <span class="comment">// 通知触发时播放的声音</span></span><br><span class="line">    notification.soundName = [<span class="built_in">NSString</span> stringWithFormat:<span class="string">@"%@.mp3"</span>,soundName];</span><br><span class="line">    <span class="comment">// 通知的参数</span></span><br><span class="line">    <span class="built_in">NSDictionary</span> * userDict = @&#123;<span class="string">@"nTimeStr"</span>:timeStr,<span class="string">@"remindType"</span>:remindType,<span class="string">@"tag"</span>:tagStr,<span class="string">@"remindId"</span>:remindId&#125;;</span><br><span class="line">    notification.userInfo = userDict;</span><br><span class="line">    <span class="comment">// 添加推送到UIApplication</span></span><br><span class="line">    [[<span class="built_in">UIApplication</span> sharedApplication] scheduleLocalNotification:notification];</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-取消通知"><a href="#3-取消通知" class="headerlink" title="3.取消通知"></a>3.取消通知</h4><h5 id="3-1-取消全部的通知"><a href="#3-1-取消全部的通知" class="headerlink" title="3.1 取消全部的通知"></a>3.1 取消全部的通知</h5><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 取消全部的通知</span></span><br><span class="line">[[<span class="built_in">UIApplication</span> sharedApplication] cancelAllLocalNotifications];</span><br></pre></td></tr></table></figure><h5 id="3-2-取消对应-ID-的通知"><a href="#3-2-取消对应-ID-的通知" class="headerlink" title="3.2 取消对应 ID 的通知"></a>3.2 取消对应 ID 的通知</h5><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// IOS最多允许最近本地通知数量是64个，超过限制的本地通知将被忽略。</span></span><br><span class="line"><span class="meta">#pragma mark -- 删除通知</span></span><br><span class="line"></span><br><span class="line">-(<span class="keyword">void</span>)cancelLocalNotificationWithKey:(<span class="built_in">NSString</span> *)key remindType:(<span class="built_in">NSString</span> *)remindType</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 获取所有本地通知数组</span></span><br><span class="line">    <span class="built_in">NSArray</span> *localNotifications = [<span class="built_in">UIApplication</span> sharedApplication].scheduledLocalNotifications;</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@"\n本地通知总数%@ \n 一共: %ld 个"</span>,localNotifications ,[localNotifications count]);</span><br><span class="line">    <span class="comment">// 循环遍历所有的通知</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="built_in">UILocalNotification</span> *notification <span class="keyword">in</span> localNotifications) &#123;</span><br><span class="line">    <span class="comment">// 取出每个通知的通知数据</span></span><br><span class="line">        <span class="built_in">NSDictionary</span> *userInfo = notification.userInfo;</span><br><span class="line">        <span class="keyword">if</span> (userInfo) &#123;</span><br><span class="line">            <span class="comment">// 根据设置通知参数时指定的key来获取通知参数</span></span><br><span class="line">            <span class="built_in">NSString</span> *info = userInfo[<span class="string">@"nTimeStr"</span>];</span><br><span class="line"></span><br><span class="line">            <span class="built_in">NSString</span> *type = userInfo[<span class="string">@"remindType"</span>];</span><br><span class="line">            </span><br><span class="line">            <span class="comment">// 如果找到需要取消的通知，则取消</span></span><br><span class="line">            <span class="keyword">if</span> (info != <span class="literal">nil</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> ([info isEqualToString:key] &amp;&amp; [type isEqualToString:remindType]) &#123;</span><br><span class="line">                    [[<span class="built_in">UIApplication</span> sharedApplication] cancelLocalNotification:notification];</span><br><span class="line">                    <span class="built_in">NSLog</span>(<span class="string">@"type:%@,key:%@,本地通知取消成功!!!"</span>,type,key);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                </span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4-接收通知"><a href="#4-接收通知" class="headerlink" title="4.接收通知"></a>4.接收通知</h4><h5 id="4-1-前台接收通知，调用系统application-UIApplication-application-didReceiveLocalNotification-UILocalNotification-notification方法-，在这个方法里面做业务处理"><a href="#4-1-前台接收通知，调用系统application-UIApplication-application-didReceiveLocalNotification-UILocalNotification-notification方法-，在这个方法里面做业务处理" class="headerlink" title="4.1 前台接收通知，调用系统application:(UIApplication *)application didReceiveLocalNotification:(UILocalNotification *)notification方法 ，在这个方法里面做业务处理"></a>4.1 前台接收通知，调用系统<code>application:(UIApplication *)application didReceiveLocalNotification:(UILocalNotification *)notification</code>方法 ，在这个方法里面做业务处理</h5><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 程序没有被杀死时,接收到本地通知时调用--点击通知时会执行这个方法,如果程序被杀死时,这个方法不再走,在application: didFinishLaunchingWithOptions:方法中获取</span></span><br><span class="line">- (<span class="keyword">void</span>)application:(<span class="built_in">UIApplication</span> *)application didReceiveLocalNotification:(<span class="built_in">UILocalNotification</span> *)notification&#123;</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@"notification.userInfo = %@"</span>,notification.userInfo);</span><br><span class="line">    <span class="comment">// 获取通知详情</span></span><br><span class="line">    <span class="built_in">NSDictionary</span> *dict = notification.userInfo;</span><br><span class="line">    <span class="keyword">if</span> (dict) &#123;</span><br><span class="line">        <span class="comment">// 根据通知的类型参数做出对应的跳转</span></span><br><span class="line">        <span class="keyword">if</span> ([dict[<span class="string">@"remindType"</span>] isEqualToString:CPTakeMediciTableName]) &#123;</span><br><span class="line">            </span><br><span class="line">            CPMedicineRemindDetailViewController *medicine = [[CPMedicineRemindDetailViewController alloc]init];</span><br><span class="line">            medicine.remindId = dict[<span class="string">@"remindId"</span>];</span><br><span class="line">            medicine.timeStr = dict[<span class="string">@"nTimeStr"</span>];</span><br><span class="line">            medicine.type = CPMedicinePushNow;</span><br><span class="line">            [[<span class="keyword">self</span> currentViewController].navigationController pushViewController:medicine animated:<span class="literal">YES</span>];</span><br><span class="line">            </span><br><span class="line">            </span><br><span class="line">            </span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>([dict[<span class="string">@"remindType"</span>] isEqualToString:CPMeasureTableName])&#123;</span><br><span class="line"></span><br><span class="line">            CPMeasureRemindDetailViewController *measure = [[CPMeasureRemindDetailViewController alloc]init];</span><br><span class="line">            measure.tagStr = dict[<span class="string">@"tag"</span>];</span><br><span class="line">            measure.timeStr = dict[<span class="string">@"nTimeStr"</span>];</span><br><span class="line">            measure.type = CPMeasurePushNow;</span><br><span class="line">            [[<span class="keyword">self</span> currentViewController] presentViewController:measure animated:<span class="literal">YES</span> completion:<span class="literal">nil</span>];</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="4-2-应用在后台被杀死了调用pplication-UIApplication-application-didFinishLaunchingWithOptions-NSDictionary-launchOptions方法，在这个方法里面做业务处理"><a href="#4-2-应用在后台被杀死了调用pplication-UIApplication-application-didFinishLaunchingWithOptions-NSDictionary-launchOptions方法，在这个方法里面做业务处理" class="headerlink" title="4.2 应用在后台被杀死了调用pplication:(UIApplication *)application didFinishLaunchingWithOptions:(NSDictionary *)launchOptions方法，在这个方法里面做业务处理"></a>4.2 应用在后台被杀死了调用<code>pplication:(UIApplication *)application didFinishLaunchingWithOptions:(NSDictionary *)launchOptions</code>方法，在这个方法里面做业务处理</h5><p>在<code>pplication:(UIApplication *)application didFinishLaunchingWithOptions:(NSDictionary *)launchOptions</code>方法中添加下面的代码</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (launchOptions != <span class="literal">nil</span>) &#123;</span><br><span class="line">        <span class="built_in">UILocalNotification</span> *localNotification = launchOptions[<span class="built_in">UIApplicationLaunchOptionsLocalNotificationKey</span>];</span><br><span class="line">        <span class="keyword">if</span> (localNotification != <span class="literal">nil</span>) &#123;</span><br><span class="line">            <span class="comment">// 程序完全退出状态下，点击推送通知后的业务处理</span></span><br><span class="line">            <span class="comment">// 根据通知的参数做不同的跳转</span></span><br><span class="line">            <span class="built_in">NSDictionary</span> *dict = localNotification.userInfo;</span><br><span class="line">            <span class="keyword">if</span> (dict) &#123;</span><br><span class="line">                </span><br><span class="line">                <span class="keyword">if</span> ([dict[<span class="string">@"remindType"</span>] isEqualToString:CPTakeMediciTableName]) &#123;</span><br><span class="line">                    CPMedicineRemindDetailViewController *medicine = [[CPMedicineRemindDetailViewController alloc]init];</span><br><span class="line">                    medicine.remindId = dict[<span class="string">@"remindId"</span>];</span><br><span class="line">                    medicine.timeStr = dict[<span class="string">@"nTimeStr"</span>];</span><br><span class="line">                    CPNavigationController *nav = [[CPNavigationController alloc]initWithRootViewController:medicine];</span><br><span class="line">                    [AppDelegate sharedInstance].window.rootViewController = nav;</span><br><span class="line">                &#125;<span class="keyword">else</span> <span class="keyword">if</span>([dict[<span class="string">@"remindType"</span>] isEqualToString:CPMeasureTableName])&#123;</span><br><span class="line">                    </span><br><span class="line">                    CPMeasureRemindDetailViewController *measure = [[CPMeasureRemindDetailViewController alloc]init];</span><br><span class="line">                    measure.tagStr = dict[<span class="string">@"tag"</span>];</span><br><span class="line">                    measure.timeStr = dict[<span class="string">@"nTimeStr"</span>];</span><br><span class="line">                    [AppDelegate sharedInstance].window.rootViewController = measure;</span><br><span class="line">                &#125;</span><br><span class="line">                </span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="五、其他设置"><a href="#五、其他设置" class="headerlink" title="五、其他设置"></a>五、其他设置</h3><p>实现发送基于位置的通知方法（iOS8+）：</p><blockquote><p>1、无需编码，如果设备用户打开了定位，系统会给用户当前的位置来决定是否要给用户发送通知；</p></blockquote><blockquote><p>2、需要获取用户定位权限CLLocation；</p></blockquote><blockquote><p>3、精准度一般般。</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;一、简介&quot;&gt;&lt;a href=&quot;#一、简介&quot; class=&quot;headerlink&quot; title=&quot;一、简介&quot;&gt;&lt;/a&gt;一、简介&lt;/h3&gt;&lt;p&gt;&lt;code&gt;UILocalNotification&lt;/code&gt; 是通过设置时间来触发本地推送通知的通知方式,不需要连网就能
      
    
    </summary>
    
      <category term="iOS 开发" scheme="http://yoursite.com/categories/iOS-%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="本地推送" scheme="http://yoursite.com/tags/%E6%9C%AC%E5%9C%B0%E6%8E%A8%E9%80%81/"/>
    
      <category term="UILocalNotification" scheme="http://yoursite.com/tags/UILocalNotification/"/>
    
  </entry>
  
  <entry>
    <title>001- 初识汇编</title>
    <link href="http://yoursite.com/2018/04/20/001-%E5%88%9D%E8%AF%86%E6%B1%87%E7%BC%96/"/>
    <id>http://yoursite.com/2018/04/20/001-初识汇编/</id>
    <published>2018-04-20T15:59:03.000Z</published>
    <updated>2018-06-27T10:44:54.732Z</updated>
    
    <content type="html"><![CDATA[<p>我们在学习逆向开发之前,我们要了解一个基本的逆向原理.首先我们是逆向iOS系统上面的APP.那么我们知道,一个APP安装在手机上面的可执行文件本质上是二进制文件.因为iPhone手机本质上执行的指令是二进制.是由手机上的CPU执行的.所以逆向开发是建立在分析二进制上面.所以今天我们接下来的课程从非常基础的东西开始讲解.</p><h2 id="汇编语言的发展"><a href="#汇编语言的发展" class="headerlink" title="汇编语言的发展"></a>汇编语言的发展</h2><h3 id="机器语言"><a href="#机器语言" class="headerlink" title="机器语言"></a>机器语言</h3><blockquote><p>由0和1组成的机器指令.</p></blockquote><ul><li>加：0100 0000</li><li>减：0100 1000</li><li>乘：1111 0111 1110 0000 </li><li>除：1111 0111 1111 0000 </li></ul><h3 id="汇编语言-assembly-language"><a href="#汇编语言-assembly-language" class="headerlink" title="汇编语言(assembly language)"></a>汇编语言(assembly language)</h3><blockquote><p>使用助记符代替机器语言<br>如:</p></blockquote><ul><li>加：INC EAX        通过编译器 0100 0000</li><li>减：DEC EAX        通过编译器 0100 1000</li><li>乘：MUL EAX         通过编译器 1111 0111 1110 0000</li><li>除：DIV EAX        通过编译器 1111 0111 1111 0000</li></ul><p>###高级语言（High-level programming language)</p><blockquote><p>C\C++\Java\OC\Swift,更加接近人类的自然语言<br>比如C语言:</p></blockquote><ul><li>加：A+B        通过编译器            0100 0000</li><li>减：A-B        通过编译器            0100 1000</li><li>乘：A*B     通过编译器            1111 0111 1110 0000</li><li>除：A/B        通过编译器            1111 0111 1111 0000</li></ul><p>我们的代码在终端设备上是这样的过程:<br><img src="http://p7l9kf5i4.bkt.clouddn.com/2018-04-28-15247619245714.jpg-style02" alt=""></p><ul><li><strong>汇编语言</strong>与<strong>机器语言</strong>一一对应，每一条机器指令都有与之对应的汇编指令</li><li><strong>汇编语言</strong>可以通过编译得到<strong>机器语言</strong>，<strong>机器语言</strong>可以通过反汇编得到<strong>汇编语言</strong></li><li><strong>高级语言</strong>可以通过编译得到<strong>汇编语言</strong> \ <strong>机器语言</strong>，但汇编语言\机器语言几乎不可能还原成<strong>高级语言</strong></li></ul><h3 id="汇编语言的特点"><a href="#汇编语言的特点" class="headerlink" title="汇编语言的特点"></a>汇编语言的特点</h3><ul><li><p>可以直接访问、控制各种硬件设备，比如存储器、CPU等，能最大限度地发挥硬件的功能</p></li><li><p>能够不受编译器的限制，对生成的二进制代码进行完全的控制</p></li><li><p>目标代码简短，占用内存少，执行速度快</p></li><li><p>汇编指令是机器指令的助记符,同机器指令一一对应。每一种CPU都有自己的机器指令集\汇编指令集，所以汇编语言不具备可移植性</p></li><li><p>知识点过多，开发者需要对CPU等硬件结构有所了解，不易于编写、调试、维护</p></li><li><p>不区分大小写，比如mov和MOV是一样的</p></li></ul><h3 id="汇编的用途-哥么我学了能干啥"><a href="#汇编的用途-哥么我学了能干啥" class="headerlink" title="汇编的用途(哥么我学了能干啥?)"></a>汇编的用途(哥么我学了能干啥?)</h3><ul><li>编写驱动程序、操作系统（比如Linux内核的某些关键部分）</li><li>对性能要求极高的程序或者代码片段，可与高级语言混合使用（内联汇编）</li><li>软件安全<ul><li>病毒分析与防治</li><li>逆向\加壳\脱壳\破解\外挂\免杀\加密解密\漏洞\黑客</li></ul></li><li>理解整个计算机系统的最佳起点和最有效途径</li><li>为编写高效代码打下基础</li><li>弄清代码的本质<ul><li>函数的本质究竟是什么?</li><li>++a + ++a + ++a 底层如何执行的?</li><li>编译器到底帮我们干了什么?</li><li>DEBUG模式和RELEASE模式有什么关键的地方被我们忽略</li><li>……</li></ul></li></ul><p>最后来句装13的话</p><blockquote><p>越底层越单纯!真正的程序员都需要了解的一门非常重要的语言,汇编!</p></blockquote><h3 id="汇编语言的种类"><a href="#汇编语言的种类" class="headerlink" title="汇编语言的种类"></a>汇编语言的种类</h3><ul><li><p>目前讨论比较多的汇编语言有</p><ul><li>8086汇编（8086处理器是16bit的CPU）</li><li>Win32汇编</li><li>Win64汇编</li><li>ARM汇编（嵌入式、Mac、iOS）</li><li>……</li></ul></li><li><p>我们iPhone里面用到的是ARM汇编,但是不同的设备也有差异.因CPU的架构不同.</p></li></ul><table><thead><tr><th>架构</th><th>设备 </th></tr></thead><tbody><tr><td>armv6</td><td>iPhone, iPhone2, iPhone3G, 第一代、第二代 iPod Touch</td></tr><tr><td>armv7</td><td>iPhone3GS, iPhone4, iPhone4S,iPad, iPad2, iPad3(The New iPad), iPad mini, iPod Touch 3G, iPod Touch4</td></tr><tr><td>armv7s</td><td>iPhone5, iPhone5C, iPad4(iPad with Retina Display)</td></tr><tr><td>arm64</td><td>iPhone5S 以后 iPhoneX , iPad Air, iPad mini2以后</td></tr></tbody></table><h3 id="几个必要的常识"><a href="#几个必要的常识" class="headerlink" title="几个必要的常识"></a>几个必要的常识</h3><ul><li>要想学好汇编,首先需要了解CPU等硬件结构</li><li>APP/程序的执行过程<br><img src="http://p7l9kf5i4.bkt.clouddn.com/2018-04-28-15247619726174.jpg-style02" alt=""></li><li>硬件相关最为重要是CPU/内存</li><li>在汇编中,大部分指令都是和CPU与内存相关的</li></ul><h3 id="总线"><a href="#总线" class="headerlink" title="总线"></a>总线</h3><p><img src="http://p7l9kf5i4.bkt.clouddn.com/2018-04-28-15247620013282.jpg-style02" alt=""><br><img src="http://p7l9kf5i4.bkt.clouddn.com/2018-04-28-15247620275065.jpg-style02" alt=""></p><ul><li>每一个CPU芯片都有许多管脚，这些管脚和总线相连，CPU通过总线跟外部器件进行交互</li><li>总线：一根根导线的集合</li><li><p>总线的分类</p><ul><li>地址总线</li><li>数据总线</li><li>控制总线</li></ul><p><img src="http://p7l9kf5i4.bkt.clouddn.com/2018-04-28-15247620691639.jpg-style02" alt=""></p></li></ul><p><strong>举个例子</strong></p><p><img src="http://p7l9kf5i4.bkt.clouddn.com/2018-04-28-15247621338263.png-style02" alt=""></p><ul><li><strong>地址总线</strong><ul><li>它的宽度决定了CPU的<em>寻址能力</em></li><li>8086的地址总线宽度是_20_，所以寻址能力是_1M_（ 2^20  ）</li></ul></li></ul><p><img src="http://p7l9kf5i4.bkt.clouddn.com/2018-04-28-15247621451257.png-style02" alt=""></p><ul><li><strong>数据总线</strong><ul><li>它的宽度决定了CPU的单次数据传送量，也就是数据<em>传送速度</em></li><li>8086的数据总线宽度是_16_，所以单次最大传递<em>2个字节</em>的数据</li></ul></li><li><strong>控制总线</strong><ul><li>它的宽度决定了CPU对其他器件的<em>控制能力</em>、能有多少种控制</li></ul></li></ul><p><strong>做个小练习</strong></p><ol><li>一个CPU 的寻址能力为8KB,那么它的地址总线的宽度为____</li><li>8080,8088,80286,80386 的<strong>地址总线</strong>宽度分别为16根,20根,24根,32根.那么他们的寻址能力分别为多少____KB, ____MB,____MB,____GB?</li><li>8080,8088,8086,80286,80386 的<strong>数据总线</strong>宽度分别为8根,8根,16根,16根,32根.那么它们一次可以传输的数据为:____B,____B,____B,____B,____B,</li><li>从内存中读取1024字节的数据,8086至少要读____次,80386至少要读取____次.</li></ol><p><strong>解答:</strong></p><ol><li>8KB = 1024 * 8 =  2^10 + 2^3 ,所以地址总线的宽度为13</li><li></li></ol><ul><li>地址总线为16,所以 寻址能力为 2^16 = 2^10 * 2^6 = 64KB</li><li>地址总线为20,所以 寻址能力为 2^20 = 2^10 <em> 2^10 = 1024 </em> 1024 = 1MB;</li><li>地址总线为24,所以 寻址能力为 2^24 = 2^20 <em> 2^4 = 1MB </em> 16 = 16MB;</li><li>地址总线为32,所以 寻址能力为 2^30 = 2^30 <em> 2^2 = 1GB </em> 4 = 4GB;</li></ul><p><strong>答案</strong><br><img src="http://p7l9kf5i4.bkt.clouddn.com/2018-04-28-15247622018451.png-style02" alt=""></p><h3 id="内存"><a href="#内存" class="headerlink" title="内存"></a>内存</h3><p><img src="http://p7l9kf5i4.bkt.clouddn.com/2018-04-28-15247622662488.png-style02" alt=""></p><p><img src="http://p7l9kf5i4.bkt.clouddn.com/2018-04-28-15247622844191.png-style02" alt=""></p><p><img src="http://p7l9kf5i4.bkt.clouddn.com/2018-04-28-15247622924501.png-style02" alt=""></p><ul><li><p>内存地址空间的大小受CPU地址总线宽度的限制。8086的地址总线宽度为20，可以定位2^20个不同的内存单元（内存地址范围0x00000~0xFFFFF），所以8086的内存空间大小为1MB</p></li><li><p>0x00000~0x9FFFF：主存储器。可读可写</p></li><li><p>0xA0000~0xBFFFF：向显存中写入数据，这些数据会被显卡输出到显示器。可读可写</p></li><li><p>0xC0000~0xFFFFF：存储各种硬件\系统信息。只读</p></li></ul><p>##进制<br><strong>学习进制的障碍</strong></p><blockquote><p>很多人学不好进制，原因是总以十进制为依托去考虑其他进制，需要运算的时候也总是先转换成十进制，这种学习方法是错误的.<br>我们为什么一定要转换十进制呢？仅仅是因为我们对十进制最熟悉，所以才转换.<br>每一种进制都是完美的,想学好进制首先要忘掉十进制，也要忘掉进制间的转换！</p></blockquote><p>###进制的定义</p><ul><li>八进制由8个符号组成:0 1 2 3 4 5 6 7 逢八进一</li><li>十进制由10个符号组成:0 1 2 3 4 5 6 7 8 9逢十进一</li><li>N进制就是由N个符号组成:逢N进一</li></ul><p>#####做个练习</p><ul><li>1 + 1 在____情况下等于 3 ?</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">.</span><br><span class="line">.</span><br><span class="line">.</span><br><span class="line">.</span><br><span class="line">.</span><br><span class="line">.</span><br><span class="line">.</span><br><span class="line">.</span><br><span class="line">.</span><br><span class="line">.</span><br><span class="line">.</span><br><span class="line">.</span><br><span class="line">.</span><br></pre></td></tr></table></figure><blockquote><p>十进制由10个符号组成: 0 1 3 2 8 A B E S 7 逢十进一</p></blockquote><p>如果这样定义十进制: 1 + 1 = 3!就对了!</p><p><strong>这样的目的何在?</strong><br>传统我们定义的十进制和自定义的十进制不一样.那么这10个符号如果我们不告诉别人这个符号表,别人是没办法拿到我们的具体数据的!用于加密!</p><blockquote><p><strong>十进制</strong>由十个<strong>符号</strong>组成,逢十进一,<strong>符号</strong>是可以<strong>自定义</strong>的!!</p></blockquote><p>###进制的运算</p><p>#####做个练习</p><ul><li>八进制运算<ul><li>2 + 3 = <strong> , 2 * 3 = </strong> ,4 + 5 = <strong> ,4 * 5 = </strong>.</li><li>277 + 333 = <strong> , 276 * 54 = </strong> , 237 - 54 = <strong> , 234 / 4 = </strong> .</li></ul></li></ul><p>#####八进制加法表<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"> 0  1  2  3  4  5  6  7 </span><br><span class="line">10 11 12 13 14 15 16 17</span><br><span class="line">20 21 22 23 24 25 26 27</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">1+1 = 2</span><br><span class="line">1+2 = 3   2+2 = 4</span><br><span class="line">1+3 = 4   2+3 = 5   3+3 = 6</span><br><span class="line">1+4 = 5   2+4 = 6   3+4 = 7   4+4 = 10  </span><br><span class="line">1+5 = 6   2+5 = 7   3+5 = 10  4+5 = 11  5+5 = 12</span><br><span class="line">1+6 = 7   2+6 = 10  3+6 = 11  4+6 = 12  5+6 = 13  6+6 = 14</span><br><span class="line">1+7 = 10  2+7 = 11  3+7 = 12  4+7 = 13  5+7 = 14  6+7 = 15  7+7 = 16</span><br></pre></td></tr></table></figure></p><p>#####八进制乘法表<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">0 1 2 3 4 5 6 7 10 11 12 13 14 15 16 17 20 21 22 23 24 25 26 27...</span><br><span class="line">1*1 = 1</span><br><span class="line">1*2 = 2  2*2 = 4</span><br><span class="line">1*3 = 3  2*3 = 63*3 = 11</span><br><span class="line">1*4 = 4  2*4 = 103*4 = 14  4*4 = 20</span><br><span class="line">1*5 = 5  2*5 = 123*5 = 17  4*5 = 24  5*5 = 31</span><br><span class="line">1*6 = 6  2*6 = 143*6 = 22  4*6 = 30  5*6 = 36  6*6 = 44</span><br><span class="line">1*7 = 7  2*7 = 163*7 = 25  4*7 = 34  5*7 = 43  6*7 = 52  7*7 = 61</span><br></pre></td></tr></table></figure></p><p>#####实战四则运算<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">   277         236         276         234</span><br><span class="line">+  333       -  54       *  54       /   4</span><br><span class="line">--------    --------    --------    --------</span><br></pre></td></tr></table></figure></p><p>###二进制的简写形式<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">       二进制: 1 0 1 1 1 0 1 1 1 1 0 0</span><br><span class="line">三个二进制一组: 101 110 111 100</span><br><span class="line">       八进制:   5   6   7   4</span><br><span class="line">四个二进制一组: 1011 1011 1100</span><br><span class="line">     十六进制:    b    b    c</span><br></pre></td></tr></table></figure></p><blockquote><p>二进制：从0 写到 1111<br>0000 0001 0010 0011 0100 0101 0110 0111 1000 1001 1010 1011 1100 1101 1110 1111<br>这种二进制使用起来太麻烦，改成更简单一点的符号：<br>0 1 2 3 4 5 6 7 8 9 A B C D E F 这就是十六进制了</p></blockquote><p>###数据的宽度<br>数学上的数字，是没有大小限制的，可以无限的大。但在计算机中，由于受硬件的制约，数据都是有长度限制的（我们称为数据宽度），超过最多宽度的数据会被丢弃。</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#import <span class="meta-string">&lt;UIKit/UIKit.h&gt;</span></span></span><br><span class="line"><span class="meta">#import <span class="meta-string">"AppDelegate.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> test()&#123;</span><br><span class="line">    <span class="keyword">int</span> cTemp = <span class="number">0x1FFFFFFFF</span>;</span><br><span class="line">    <span class="keyword">return</span> cTemp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> main(<span class="keyword">int</span> argc, <span class="keyword">char</span> * argv[]) &#123;</span><br><span class="line">    printf(<span class="string">"%x\n"</span>,test());</span><br><span class="line">    <span class="keyword">@autoreleasepool</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">UIApplicationMain</span>(argc, argv, <span class="literal">nil</span>, <span class="built_in">NSStringFromClass</span>([AppDelegate <span class="keyword">class</span>]));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>###计算机中常见的数据宽度</p><ul><li>位(Bit): 1个位就是1个二进制位.0或者1</li><li>字节(Byte): 1个字节由8个Bit组成(8位).内存中的最小单元Byte.</li><li>字(Word): 1个字由2个字节组成(16位),这2个字节分别称为高字节和低字节.</li><li>双字(Doubleword): 1个双字由两个字组成(32位)</li></ul><p>那么计算机存储数据它会分为有符号数和无符号数.那么关于这个看图就理解了!<br><img src="http://p7l9kf5i4.bkt.clouddn.com/2018-04-28-15247623206581.jpg-style02" alt=""></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">无符号数,直接换算!</span><br><span class="line">有符号数:正数:  0    1    2    3    4    5    6    7 负数:  F    E    D    B    C    A    9    8      -1   -2   -3   -4   -5   -6   -7   -8</span><br></pre></td></tr></table></figure><p>###自定义进制符号</p><p>#####练习</p><ul><li>现在有10进制数 10个符号分别是：2，9，1，7，6，5，4， 8，3 , A 逢10进1 那么： 123 + 234 = ____</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">十进制:    0  1  2  3  4  5  6  7  8  9</span><br><span class="line">自定义:    2  9  1  7  6  5  4  8  3  A</span><br><span class="line">         92 99 91 97 96 95 94 98 93 9A</span><br><span class="line">         12 19 11 17 16 15 14 18 13 1A</span><br><span class="line">         72 79 71 77 76 75 74 78 73 7A</span><br><span class="line">         62 69 61 67 66 65 64 68 63 6A</span><br><span class="line">         52 59 51 57 56 55 54 58 53 5A</span><br><span class="line">         42 49 41 47 46 45 44 48 43 4A</span><br><span class="line">         82 89 81 87 86 85 84 88 83 8A</span><br><span class="line">         32 39 31 37 36 35 34 38 33 3A</span><br><span class="line">         922</span><br></pre></td></tr></table></figure><p>那么刚才通过10进制运算可以转化10进制然后查表!但是如果是其他进制.我们就不能转换,要直接学会查表</p><ul><li>现在有9进制数 9个符号分别是：2，9，1，7，6，5，4， 8，3 逢9进1 那么： 123 + 234 = ____</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">十进制:    0  1  2  3  4  5  6  7  8  </span><br><span class="line">自定义:    2  9  1  7  6  5  4  8  3  </span><br><span class="line">         92 99 91 97 96 95 94 98 93 </span><br><span class="line">         12 19 11 17 16 15 14 18 13 </span><br><span class="line">         72 79 71 77 76 75 74 78 73 </span><br><span class="line">         62 69 61 67 66 65 64 68 63 </span><br><span class="line">         52 59 51 57 56 55 54 58 53 </span><br><span class="line">         42 49 41 47 46 45 44 48 43 </span><br><span class="line">         82 89 81 87 86 85 84 88 83 </span><br><span class="line">         32 39 31 37 36 35 34 38 33 </span><br><span class="line">         922</span><br></pre></td></tr></table></figure><h3 id="寄存器"><a href="#寄存器" class="headerlink" title="寄存器"></a>寄存器</h3><p><strong>内部部件之间由总线连接</strong><br><img src="http://p7l9kf5i4.bkt.clouddn.com/2018-04-28-15247623385765.jpg-style02" alt=""></p><ul><li>对程序员来说，CPU中最主要部件是寄存器，可以通过改变寄存器的内容来实现对CPU的控制</li><li>不同的CPU，寄存器的个数、结构是不相同的</li></ul><h3 id="通用寄存器"><a href="#通用寄存器" class="headerlink" title="通用寄存器"></a>通用寄存器</h3><ul><li><p>ARM64拥有有31个64位的通用寄存器 x0 到 x30,这些寄存器通常用来存放一般性的数据，称为通用寄存器（有时也有特定用途）</p><ul><li>那么w0 到 w28 这些是32位的. 因为64位CPU可以兼容32位.所以可以只使用64位寄存器的低32位.</li><li>比如 w0 就是 x0的低32位!<br><img src="http://p7l9kf5i4.bkt.clouddn.com/2018-04-28-15247623516661.jpg-style02" alt=""></li></ul></li><li><p>通常，CPU会先将内存中的数据存储到通用寄存器中，然后再对通用寄存器中的数据进行运算</p></li><li>假设内存中有块红色内存空间的值是3，现在想把它的值加1，并将结果存储到蓝色内存空间</li></ul><p><img src="http://p7l9kf5i4.bkt.clouddn.com/2018-04-28-15247623786930.jpg-style02" alt=""></p><ul><li>CPU首先会将红色内存空间的值放到X0寄存器中：mov X0,红色内存空间</li><li>然后让X0寄存器与1相加：add X0,1</li><li>最后将值赋值给内存空间：mov 蓝色内存空间,X0</li></ul><p>###pc寄存器(program counter)</p><ul><li>为指令指针寄存器，它指示了CPU当前要读取指令的地址</li><li>在内存或者磁盘上，指令和数据没有任何区别，都是二进制信息</li><li>CPU在工作的时候把有的信息看做指令，有的信息看做数据，为同样的信息赋予了不同的意义<ul><li>比如 1110 0000 0000 0011 0000 1000 1010 1010 </li><li>可以当做数据   0xE003008AA </li><li>也可以当做指令  mov    x0, x8</li></ul></li><li>CPU根据什么将内存中的信息看做指令？<ul><li>CPU将pc指向的内存单元的内容看做指令</li><li>如果内存中的某段内容曾被CPU执行过，那么它所在的内存单元必然被pc指向过</li></ul></li></ul><h3 id="bl指令"><a href="#bl指令" class="headerlink" title="bl指令"></a>bl指令</h3><ul><li>CPU从何处执行指令是由pc中的内容决定的，我们可以通过改变pc的内容来控制CPU执行目标指令</li><li>ARM64提供了一个mov指令（传送指令），可以用来修改大部分寄存器的值，比如<ul><li>mov x0,#10、mov x1,#20</li></ul></li><li><p>但是，mov指令不能用于设置pc的值，ARM64没有提供这样的功能</p></li><li><p>ARM64提供了另外的指令来修改PC的值，这些指令统称为转移指令，最简单的是bl指令</p></li></ul><h3 id="bl指令-–-练习"><a href="#bl指令-–-练习" class="headerlink" title="bl指令 – 练习"></a>bl指令 – 练习</h3><p>现在有两段代码!假设程序先执行A,请写出指令执行顺序.最终寄存器x0的值是多少?</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">_A:</span><br><span class="line">    mov x0,#0xa0</span><br><span class="line">    mov x1,#0x00</span><br><span class="line">    add x1, x0, #0x14</span><br><span class="line">    mov x0,x1</span><br><span class="line">    bl _B</span><br><span class="line">    mov x0,#0x0</span><br><span class="line">    ret</span><br><span class="line"></span><br><span class="line">_B:</span><br><span class="line">    add x0, x0, #0x10</span><br><span class="line">    ret</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;我们在学习逆向开发之前,我们要了解一个基本的逆向原理.首先我们是逆向iOS系统上面的APP.那么我们知道,一个APP安装在手机上面的可执行文件本质上是二进制文件.因为iPhone手机本质上执行的指令是二进制.是由手机上的CPU执行的.所以逆向开发是建立在分析二进制上面.所以
      
    
    </summary>
    
      <category term="汇编" scheme="http://yoursite.com/categories/%E6%B1%87%E7%BC%96/"/>
    
      <category term="安全攻防" scheme="http://yoursite.com/categories/%E6%B1%87%E7%BC%96/%E5%AE%89%E5%85%A8%E6%94%BB%E9%98%B2/"/>
    
    
      <category term="安全攻防" scheme="http://yoursite.com/tags/%E5%AE%89%E5%85%A8%E6%94%BB%E9%98%B2/"/>
    
  </entry>
  
  <entry>
    <title>OpenGL学习 纹理下(五)</title>
    <link href="http://yoursite.com/2018/02/15/OpenGL%20%E7%BA%B9%E7%90%86%E4%B8%8B%EF%BC%88%E4%BA%94%EF%BC%89/"/>
    <id>http://yoursite.com/2018/02/15/OpenGL 纹理下（五）/</id>
    <published>2018-02-15T12:05:40.000Z</published>
    <updated>2018-06-27T10:49:20.985Z</updated>
    
    <content type="html"><![CDATA[<script src="//cdn.bootcss.com/jquery/1.11.3/jquery.min.js"></script><div id="security">  <div class="input-container">  <input type="password" class="form-control" id="pass" placeholder="欢迎来到我的博客,请输入密码继续阅读." />    <label for="pass">欢迎来到我的博客,请输入密码继续阅读.</label>    <div class="bottom-line"></div>  </div></div><div id="decryptionError" style="display: none;">Incorrect Password!</div><div id="noContentError" style="display: none;">No content to display!</div><div id="encrypt-blog" style="display:none"></div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      阅读此文章需要密码,请输入密码继续阅读.
    
    </summary>
    
      <category term="OpenGL" scheme="http://yoursite.com/categories/OpenGL/"/>
    
    
      <category term="OpenGL" scheme="http://yoursite.com/tags/OpenGL/"/>
    
  </entry>
  
  <entry>
    <title>OpenGL学习 纹理上(五)</title>
    <link href="http://yoursite.com/2018/02/11/15244707402194/"/>
    <id>http://yoursite.com/2018/02/11/15244707402194/</id>
    <published>2018-02-11T12:05:40.000Z</published>
    <updated>2018-06-27T10:45:24.951Z</updated>
    
    <content type="html"><![CDATA[<script src="//cdn.bootcss.com/jquery/1.11.3/jquery.min.js"></script><div id="security">  <div class="input-container">  <input type="password" class="form-control" id="pass" placeholder="欢迎来到我的博客,请输入密码继续阅读." />    <label for="pass">欢迎来到我的博客,请输入密码继续阅读.</label>    <div class="bottom-line"></div>  </div></div><div id="decryptionError" style="display: none;">Incorrect Password!</div><div id="noContentError" style="display: none;">No content to display!</div><div id="encrypt-blog" style="display:none"></div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      阅读此文章需要密码,请输入密码继续阅读.
    
    </summary>
    
      <category term="OpenGL" scheme="http://yoursite.com/categories/OpenGL/"/>
    
    
      <category term="OpenGL" scheme="http://yoursite.com/tags/OpenGL/"/>
    
  </entry>
  
  <entry>
    <title>OpenGL学习 基本变化 (四)</title>
    <link href="http://yoursite.com/2018/02/09/15244691153165/"/>
    <id>http://yoursite.com/2018/02/09/15244691153165/</id>
    <published>2018-02-09T15:38:35.000Z</published>
    <updated>2018-06-27T10:45:28.673Z</updated>
    
    <content type="html"><![CDATA[<h3 id="一、抗锯齿"><a href="#一、抗锯齿" class="headerlink" title="一、抗锯齿"></a>一、抗锯齿</h3><p><strong>混合的两大功能:颜⾊色组合、抗锯⻮齿</strong></p><p>混合处理-抗锯齿</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">//开启混合处理理 glEnable(GL_BLEND);</span><br><span class="line">//指定混合因⼦子 GLBlendFunc(GL_SRC_ALPHA,GL_ONE_MINUS_SRC_ALPHA);</span><br><span class="line">//指定混合⽅方程式 glBlendEquation(GL_FUNC_ADD);</span><br><span class="line">glEnable(GL_POINT_SMOOTH); //对点进⾏行行抗锯⻮齿处理理</span><br><span class="line">glEnable(GL_LINE_SMOOTH);//对线进⾏行行抗锯⻮齿处理理 </span><br><span class="line">glEnable(GL_POLYGON_SMOOTH);//对多边形进⾏行行抗锯⻮齿处理理</span><br></pre></td></tr></table></figure><h3 id="二、多重采样"><a href="#二、多重采样" class="headerlink" title="二、多重采样"></a>二、多重采样</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">//1.可以调⽤用 glutInitDisplayMode 添加采样缓存区 glutInitDisplayMode(GLUT_MULTISAMPLE);</span><br><span class="line">//2.可以使⽤用glEnable| glDisable组合使⽤用GLUT_MULTISAMPLE 打开| 关闭 多重采样。</span><br><span class="line">glEnable(GLUT_MULTISAMPLE);</span><br><span class="line">glDisable(GLUT_MULTISAMPLE);</span><br></pre></td></tr></table></figure><h3 id="三、多重采样、抗锯⻮齿混合综合使⽤用"><a href="#三、多重采样、抗锯⻮齿混合综合使⽤用" class="headerlink" title="三、多重采样、抗锯⻮齿混合综合使⽤用"></a>三、多重采样、抗锯⻮齿混合综合使⽤用</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">glDisable(GLUT_MULTISAMPLE);</span><br><span class="line">glEnable(GL_POINT_SMOOTH);</span><br><span class="line">//Draw some smooth point</span><br><span class="line">glDisable(GL_POINT_SMOOTH);</span><br><span class="line">glDisable(GL_LINE_SMOOTH);</span><br><span class="line">glEnable(GLUT_MULTISAMPLE);</span><br><span class="line">//Draw some smooth polygon</span><br></pre></td></tr></table></figure><h3 id="四、多重采样-拓拓展"><a href="#四、多重采样-拓拓展" class="headerlink" title="四、多重采样 拓拓展"></a>四、多重采样 拓拓展</h3><p>多重采样缓存区在默认情况下使⽤用⽚片段RGB值，并不不包含颜 ⾊色的alpha成分，我们可以通过调⽤用glEnable来修改这个 ⾏行行为:</p><blockquote><ul><li>GL_SAMPLE_ALPHA_TO_COVERAGE 使⽤用alpha值</li><li>GL_SAMPLE_ALPHA_TO_ON 使⽤用alpha值并设为1，并 使⽤用它。</li><li>GL_SAMPLE_COVERAGE 使⽤用glSampleCoverage 所设置的值。</li></ul></blockquote><p>当启⽤用 GL_SAMPLE_COVERAGE 时，可以使⽤用 glSampleCoverage函数允许指定⼀一个特定的值，它是与⽚片 段覆盖值进⾏行行按位与操作的结果。</p><h3 id="五、向量"><a href="#五、向量" class="headerlink" title="五、向量"></a>五、向量</h3><p><img src="http://p7l9kf5i4.bkt.clouddn.com/2018-04-23-15244696546998.jpg-style01" alt=""></p><blockquote><p>如何定义三维、四维向量量或三维向量量数组、四维向量量数组?<br>M3DVector3f :表示⼀一个三维的向量量(x,y,z)<br>M3DVector4f :表示⼀一个四维的向量量(x,y,z,w)(R,G,B,A)</p></blockquote><h3 id="六、点乘"><a href="#六、点乘" class="headerlink" title="六、点乘"></a>六、点乘</h3><p><img src="http://p7l9kf5i4.bkt.clouddn.com/2018-04-23-15244697201684.jpg-style01" alt=""></p><p><img src="http://p7l9kf5i4.bkt.clouddn.com/2018-04-23-15244697388234.jpg-style01" alt=""></p><p><img src="http://p7l9kf5i4.bkt.clouddn.com/2018-04-23-15244698154537.jpg-style01" alt=""></p><h3 id="七、使用矩阵堆栈"><a href="#七、使用矩阵堆栈" class="headerlink" title="七、使用矩阵堆栈"></a>七、使用矩阵堆栈</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">//类型</span><br><span class="line">GLMatrixStack::GLMatrixStack(int iStackDepth = 64);</span><br><span class="line"></span><br><span class="line">//在堆栈顶部载⼊入⼀一个单元矩阵</span><br><span class="line">void GLMatrixStack::LoadIdentity(void);</span><br><span class="line"></span><br><span class="line">//在堆栈顶部载⼊入任何矩阵 //参数:4*4矩阵</span><br><span class="line">void GLMatrixStack::LoadMatrix(const M3DMatrix44f m);</span><br><span class="line"></span><br><span class="line">//矩阵乘以矩阵堆栈顶部矩阵，相乘结果存储到堆栈的顶部</span><br><span class="line">void GLMatrixStack::MultMatrix(const M3DMatrix44f);</span><br><span class="line"></span><br><span class="line">//获取矩阵堆栈顶部的值 GetMatrix 函数 //为了了适应GLShaderMananger的使⽤用，或者获取顶部矩阵的副本</span><br><span class="line">const M3DMatrix44f &amp; GLMatrixStack::GetMatrix(void);</span><br><span class="line">void GLMatrixStack::GetMatrix(M3DMatrix44f mMatrix);</span><br></pre></td></tr></table></figure><h3 id="八、压栈、出栈"><a href="#八、压栈、出栈" class="headerlink" title="八、压栈、出栈"></a>八、压栈、出栈</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">//将当前矩阵压⼊入堆栈</span><br><span class="line">void GLMatrixStack::PushMatrix(void);</span><br><span class="line">//将M3DMatrix44f 矩阵对象压⼊入当前矩阵堆栈</span><br><span class="line">void PushMatrix(const M3DMatrix44f mMatrix);</span><br><span class="line">//将GLFame 对象压⼊入矩阵对象</span><br><span class="line">void PushMatrix(GLFame &amp;frame);</span><br><span class="line">//出栈(出栈指的是移除顶部的矩阵对象) void GLMatrixStack::PopMatrix(void);</span><br></pre></td></tr></table></figure><h3 id="九、仿射变换-GLMastrixStack-内建了旋转-平移-缩放"><a href="#九、仿射变换-GLMastrixStack-内建了旋转-平移-缩放" class="headerlink" title="九、仿射变换 GLMastrixStack 内建了旋转\平移\缩放"></a>九、仿射变换 GLMastrixStack 内建了旋转\平移\缩放</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">//Rotate 函数angle参数是传递的度数，⽽而不不是弧度</span><br><span class="line">void MatrixStack::Rotate(GLfloat angle,GLfloat x,GLfloat</span><br><span class="line">y,GLfloat z);</span><br><span class="line">void MatrixStack::Translate(GLfloat x,GLfloat y,GLfloat z);</span><br><span class="line">void MatrixStack::Scale(GLfloat x,GLfloat y,GLfloat z);</span><br></pre></td></tr></table></figure><h3 id="十、使用照相机-和-角色帧-进行移动"><a href="#十、使用照相机-和-角色帧-进行移动" class="headerlink" title="十、使用照相机 和 角色帧 进行移动"></a>十、使用照相机 和 角色帧 进行移动</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">class GLFrame</span><br><span class="line">    &#123;</span><br><span class="line">protected:</span><br><span class="line">M3DVector3f vOrigin; // Where am I? M3DVector3f vForward; // Where am I going? M3DVector3f vUp; // Which way is up?</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="http://p7l9kf5i4.bkt.clouddn.com/2018-04-23-15244700886510.jpg-style01" alt=""></p><h3 id="十一、GLFrame"><a href="#十一、GLFrame" class="headerlink" title="十一、GLFrame"></a>十一、GLFrame</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">//将堆栈的顶部压⼊入任何矩阵</span><br><span class="line">void GLMatrixStack::LoadMatrix(GLFrame &amp;frame);</span><br><span class="line"></span><br><span class="line">//矩阵乘以矩阵堆栈顶部的矩阵。相乘结果存储在堆栈的顶部 </span><br><span class="line">void GLMatrixStack::MultMatrix(GLFrame &amp;frame);</span><br><span class="line"></span><br><span class="line">//将当前的矩阵压栈</span><br><span class="line">void GLMatrixStack::PushMatrix(GLFrame &amp;frame);</span><br></pre></td></tr></table></figure><h3 id="十二、照相机管理"><a href="#十二、照相机管理" class="headerlink" title="十二、照相机管理"></a>十二、照相机管理</h3><p><img src="http://p7l9kf5i4.bkt.clouddn.com/2018-04-23-15244701898614.jpg-style01" alt=""></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">//GLFrame函数，这个函数⽤用来检索条件适合的照相矩阵</span><br><span class="line">void GetCameraMatrix(M3DMatrix44f m,bool bRotationOnly = flase);</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;一、抗锯齿&quot;&gt;&lt;a href=&quot;#一、抗锯齿&quot; class=&quot;headerlink&quot; title=&quot;一、抗锯齿&quot;&gt;&lt;/a&gt;一、抗锯齿&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;混合的两大功能:颜⾊色组合、抗锯⻮齿&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;混合处理-抗锯齿&lt;/p&gt;
&lt;f
      
    
    </summary>
    
      <category term="OpenGL" scheme="http://yoursite.com/categories/OpenGL/"/>
    
    
      <category term="OpenGL" scheme="http://yoursite.com/tags/OpenGL/"/>
    
  </entry>
  
  <entry>
    <title>OpenGL学习 深度测试(三)</title>
    <link href="http://yoursite.com/2018/02/08/15244657893765/"/>
    <id>http://yoursite.com/2018/02/08/15244657893765/</id>
    <published>2018-02-08T14:43:09.000Z</published>
    <updated>2018-06-27T10:45:31.886Z</updated>
    
    <content type="html"><![CDATA[<h3 id="一、渲染过程是中可能产生的问题"><a href="#一、渲染过程是中可能产生的问题" class="headerlink" title="一、渲染过程是中可能产生的问题"></a>一、渲染过程是中可能产生的问题</h3><p><img src="http://p7l9kf5i4.bkt.clouddn.com/2018-04-23-15244658266117.jpg-style01" alt=""></p><p>解决办法：<br>1：油画法<br>2：正面、背面剔除。<br>3：深度测试。</p><h4 id="1-1、油画法"><a href="#1-1、油画法" class="headerlink" title="1.1、油画法"></a>1.1、油画法</h4><p><img src="http://p7l9kf5i4.bkt.clouddn.com/2018-04-23-15244659608381.jpg-style01" alt=""></p><blockquote><p>油画法：比较消耗性能，重复绘制了重叠部分，对于多个图形叠加在一起的，难以分辨哪个是最上层的，导致渲染混乱</p></blockquote><h4 id="1-2、正面背面剔除"><a href="#1-2、正面背面剔除" class="headerlink" title="1.2、正面背面剔除"></a>1.2、正面背面剔除</h4><p>可以调用下面两个方法开启或关闭表面剔除</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">glEnable(GL_CULL_FACE); //开启</span><br><span class="line">glDisable(GL_CULL_FACE); // 关闭</span><br></pre></td></tr></table></figure><p>该函数的原型如下<br><code>void glFrontFace(GLenum mode);</code></p><blockquote><p>mode 参数的可选的值有 GL_CW 和 GL_CCW （默认值是GL_CCW）</p></blockquote><blockquote><p>GL_CW 表示顶点的排列顺序是顺时针的面 是正面。<br>GL_CCW 表示顶点的排列顺序是逆时针的面是正面 （默认值）</p></blockquote><p><code>void glCullFace()</code></p><blockquote><p>GL_FRONT       // 正面剔除<br>GL_BACK         //  背面剔除<br>GL_FRONT_ANF_BACK 正面和反面都要剔除 </p></blockquote><h3 id="二、什么叫深度？"><a href="#二、什么叫深度？" class="headerlink" title="二、什么叫深度？"></a>二、什么叫深度？</h3><p><strong>所谓的深度，就在坐标系中，像素Z坐标距离观察者的距离<br>观察者，可以在任何位置，OpenGL会有专门有一块缓存区来存放Z值，深度缓冲区！<br>每个像素上的Z值。</strong></p><h3 id="三、深度缓冲去区的作用"><a href="#三、深度缓冲去区的作用" class="headerlink" title="三、深度缓冲去区的作用"></a>三、深度缓冲去区的作用</h3><p>一般情况下，我们绘制图形时，后面绘制的会覆盖前面的图形。一般绘制的顺序先后面再前面。<br>产生一个性能问题，就是遮盖部分，先绘制的会被覆盖，这没有任何意义的绘制。<br>深度测试就是用来解决这个问题的<br>它是如何处理的？<br>有了深度缓冲区之后，绘制的时候会检查Z,靠近观察者的覆盖。而不是靠绘制顺序来决定。</p><h3 id="四、如何使用深度缓冲区测试？"><a href="#四、如何使用深度缓冲区测试？" class="headerlink" title="四、如何使用深度缓冲区测试？"></a>四、如何使用深度缓冲区测试？</h3><p>为什么要测试？一旦开启之后就会先测试深度值再绘制</p><p><code>glEnable (GLDEPTHTEST);</code></p><blockquote><p>默认情况下Z值小的情况下会被覆盖<br>如果是观察者，在Z轴的正方向，Z值大的靠近观察者<br>如果是观察者，在Z轴的负方向，Z值小的靠近观察者</p></blockquote><h3 id="五、多边形模型"><a href="#五、多边形模型" class="headerlink" title="五、多边形模型"></a>五、多边形模型</h3><blockquote><p>使用<code>glPolygonMode(Glenum face,Glenum mode)</code> 函数来指定填充方式Face参数:GL_FRONT、GL_BACK、GL_FRONT_AND_BACKMode参数:GL_FILL(默认实心填充) 、GL_LINE、GL_POINT</p></blockquote><h3 id="六、多边形偏移"><a href="#六、多边形偏移" class="headerlink" title="六、多边形偏移"></a>六、多边形偏移</h3><p><strong>深度测试实现深度的过程中，可能产生的2种问题:<br>1、z-fighting(z冲突)<br>2、图形重叠(无法体现深度)</strong></p><h3 id="七、如何解决深度值相同，造成的冲突问题"><a href="#七、如何解决深度值相同，造成的冲突问题" class="headerlink" title="七、如何解决深度值相同，造成的冲突问题"></a>七、如何解决深度值相同，造成的冲突问题</h3><p><strong>第一种方法：</strong><br>在第二次绘制时，稍微偏移一点点解决这个问题。注意：必须非常小心确保Z值的间隙</p><p><strong>第二种方法：</strong><br>采样<code>glPolygonOffset</code> 函数。使得可以调节片段的深度值。使得深度之偏移而不产生悬浮</p><p><code>glPolygonOffset</code> 函数<br><code>void glPolygonOffset(Glfloat factor,Glfloat units);</code></p><blockquote><p>应用到片段上总偏移计算方程式:<br>Depth Offset = (DZ <em> factor) + (r </em> units);<br>DZ:深度值(Z值)r:使得深度缓冲区产生变化的最小值<br>负值，将使得z值距离我们更近，而正值，将使得z值距离我们更远，对于上节课的案例，我们设置factor和units设置为-1，0</p></blockquote><h3 id="八、裁剪"><a href="#八、裁剪" class="headerlink" title="八、裁剪"></a>八、裁剪</h3><p>在OpenGL 提高渲染的一种方式，只刷新屏幕上发生变化的部分。OpenGL 允许我们将要进行渲染的窗口只去指定一个裁剪框。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">//1 开启裁剪测试</span><br><span class="line">glEnable(GL_SCISSOR_TEST);</span><br><span class="line">//2.关闭裁剪测试</span><br><span class="line">glDisable(GL_SCISSOR_TEST);</span><br><span class="line">//3.指定裁剪窗口</span><br><span class="line">//x,y:指定裁剪框左下角位置;width,height:指定裁剪尺寸</span><br><span class="line">void glScissor(Glint x,Glint y,GLSize width,GLSize height);</span><br></pre></td></tr></table></figure><h3 id="九、混合"><a href="#九、混合" class="headerlink" title="九、混合"></a>九、混合</h3><p>我们把OpenGL 渲染时会把颜色值存在颜色缓存区中，每个片段的深度值也是放在深度缓冲区。当深度缓冲区被关闭时，新的颜色将简单的覆盖原来颜色缓存区存在的颜色值，当深度缓冲区再次打开时，新的颜色片段只是当它们比原来的值更接近邻近的裁剪平面才会替换原来的颜色片段。<br><code>glEnable(GL_BlEND);</code></p><h4 id="9-1-组合颜色"><a href="#9-1-组合颜色" class="headerlink" title="9.1 组合颜色"></a>9.1 组合颜色</h4><p>目标颜色:已经存储在颜色缓存区的颜色值<br>源颜色:作为当前渲染命令结果进入颜色缓存区的颜色值<br>当混合功能被启动时，源颜色和目标颜色的组合方式是混合方程式控制的。在默认情况下，混合方程式如下所示:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Cf = (Cs * S) + (Cd * D)</span><br><span class="line">Cf :最终计算参数的颜色</span><br><span class="line">Cs : 源颜色</span><br><span class="line">Cd :目标颜色</span><br><span class="line">S:源混合因子</span><br><span class="line">D:目标混合因子</span><br></pre></td></tr></table></figure><h4 id="9-2-设置混合因子"><a href="#9-2-设置混合因子" class="headerlink" title="9.2 设置混合因子"></a>9.2 设置混合因子</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">设置混合因子，需要用到glBlendFun函数</span><br><span class="line">glBlendFunc(GLenum S,GLenum D);</span><br><span class="line">S:源混合因子</span><br><span class="line">D:目标混合因子</span><br></pre></td></tr></table></figure><h4 id="9-3-混合因子枚举列表"><a href="#9-3-混合因子枚举列表" class="headerlink" title="9.3 混合因子枚举列表"></a>9.3 混合因子枚举列表</h4><p><img src="http://p7l9kf5i4.bkt.clouddn.com/2018-04-23-15244660140634.jpg-style01" alt=""></p><p>表中R、G、B、A 分别代表红、绿、蓝、alpha。<br>表中下标S、D，分别代表源、目标<br>表中C 代表常量颜色(默认黑色)</p><h4 id="9-4总结"><a href="#9-4总结" class="headerlink" title="9.4总结"></a>9.4总结</h4><p>最终颜色是以原先的红色(目标颜色)与 后来的蓝色(源颜色)进行组合。源颜色的alpha值越高，添加的蓝色颜色成分越高，目标颜色所保留的成分就会越少。<br>混合函数经常用于实现在其他一些不透明的物体前面绘制一个透明物体的效果</p><h3 id="十、改变组合方程式"><a href="#十、改变组合方程式" class="headerlink" title="十、改变组合方程式"></a>十、改变组合方程式</h3><p>默认混合方程式:<br><code>Cf = (CsS)+(CdD)</code><br>实际上远不止这一种混合方程式，我们可以从5个不同的方程式中进行选择</p><h4 id="10-1-改变混合方程式的函数-glBlendEquation"><a href="#10-1-改变混合方程式的函数-glBlendEquation" class="headerlink" title="10.1 改变混合方程式的函数 glBlendEquation()"></a>10.1 改变混合方程式的函数 glBlendEquation()</h4><p>选择混合方程式的函数:<br><code>glbBlendEquation(GLenum mode);</code></p><h4 id="10-2-glBlendFuncSeparate-函数"><a href="#10-2-glBlendFuncSeparate-函数" class="headerlink" title="10.2 glBlendFuncSeparate 函数"></a>10.2 glBlendFuncSeparate 函数</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">除了能使用glBlendFunc 来设置混合因子，还可以有更灵活的选择。</span><br><span class="line">strRGB: 源颜色的混合因子</span><br><span class="line">dstRGB: 目标颜色的混合因子</span><br><span class="line">strAlpha: 源颜色的Alpha因子</span><br><span class="line">dstAlpah: 目标颜色的Alpha因子</span><br><span class="line"></span><br><span class="line">void glBlendFuncSeparate(GLenum strRGB,GLenum dstRGB,GLenum strAlpha,GLenumdstAlpha);</span><br></pre></td></tr></table></figure><h4 id="10-3-glBlendFuncSeparate-注意"><a href="#10-3-glBlendFuncSeparate-注意" class="headerlink" title="10.3 glBlendFuncSeparate 注意"></a>10.3 glBlendFuncSeparate 注意</h4><blockquote><p>glBlendFunc 指定 源和目标 RGBA值的混合函数;但是glBlendFuncSeparate函数则允许为RGB 和 Alpha 成分单独指定混合函数。<br>在混合因子表中，GL_CONSTANT_COLOR,GL_ONE_MINUS_CONSTANT_COLOR,GL_CONSTANT_ALPHA,GL_ONE_MINUS_CONSTANT值允许混合方程式中引入一个常量混合颜色。</p></blockquote><h4 id="10-4-常量混合颜色"><a href="#10-4-常量混合颜色" class="headerlink" title="10.4 常量混合颜色"></a>10.4 常量混合颜色</h4><p>常量混合颜色，默认初始化为黑色(0.0f,0.0f,0.0f,0.0f)，但是还是可以修改这个常量混合颜色。<br><code>void glBlendColor(GLclampf red ,GLclampf green ,GLclampf blue ,GLclampf alpha );</code></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;一、渲染过程是中可能产生的问题&quot;&gt;&lt;a href=&quot;#一、渲染过程是中可能产生的问题&quot; class=&quot;headerlink&quot; title=&quot;一、渲染过程是中可能产生的问题&quot;&gt;&lt;/a&gt;一、渲染过程是中可能产生的问题&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;http://p
      
    
    </summary>
    
      <category term="OpenGL" scheme="http://yoursite.com/categories/OpenGL/"/>
    
    
      <category term="OpenGL" scheme="http://yoursite.com/tags/OpenGL/"/>
    
  </entry>
  
  <entry>
    <title>OpenGL学习 基础渲染(二)</title>
    <link href="http://yoursite.com/2018/02/07/15244572175577/"/>
    <id>http://yoursite.com/2018/02/07/15244572175577/</id>
    <published>2018-02-07T15:20:17.000Z</published>
    <updated>2018-06-27T10:45:35.483Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>在OpenGL 3.0之前，OpenGL 包含一个固定功能的管线，它可以在不使用着色器的情况下处理几何与像素数据。在3.1版本开始，固定管线从核心模式去掉。因此现在需要使用着色器来完成工作。<br>使 OpenGL 来说，我们会使 GLSL,(OpenGL Shading Langruage，它是在OpenGL 2.0版本发布的)。 语法与“C、C++”类似。</p></blockquote><h3 id="一、基础图形管线"><a href="#一、基础图形管线" class="headerlink" title="一、基础图形管线"></a>一、基础图形管线</h3><p>OpenGL 中图元只不过是顶点的集合以预定义的方式结合在一起。管线分为:2个部分，上半部分是客户机端，下半部分是服务器端。</p><p>客户端是存储在CPU存储 中的，并且在应用程序中执行 ，或者在主系统内存的驱动程序中执行。驱动程序会将渲染命令和数组组合起来，发送给服务执执 !(在一台典型的个人计算机上，服务器就是实际上就是图形加速卡上的硬件和内存)<br>服务器和 客户机在功能上也是异步的。 它们是各自独力的软件块或硬件块。我们是希望它们2个端都尽量在 不停的工作。客户端不断的把数据块和命令块组合在一起输送到缓冲区，然后缓冲区就会发送到服务器执 。</p><p>如果服务器停止工作等待客户机，或者客户机停止作来等待服务器做好接受更多的命令和准备，我们把这种情况成为管线停滞</p><p><img src="http://p7l9kf5i4.bkt.clouddn.com/2018-04-23-15244572931328.jpg-style01" alt=""></p><h3 id="二、着色器"><a href="#二、着色器" class="headerlink" title="二、着色器"></a>二、着色器</h3><p><strong>渲染过程，必备的两个着色器“顶点着色器”和“片元着色器”。</strong><br>上图的Vertex Shader(顶点着色器) 和 Fragment Shader(片元着色器)<br>着色器是使用GLSL编写的程序，看起来与C语言非常类似。 着色器必须从源代码中编译和链接在一起。最终准备就绪的着色器程序<br>顶点着色器 –&gt;处理从客户机输入的数据、应用变换、进行其他的类型的数学运算来计算关照效果、位移、颜 值等等。(**为了渲染共有3个顶点的三角形，顶点着色器将执 3次，也就是为 了每个顶点执一次)在目前的硬件上有多个执行单元同时运行 ，就意味着所有的3个顶点可以同时进行处理 !</p><p>图上(primitive Assembly 说明的是:3个顶点已经组合在一起， 三角形已经逐个片段的进行光栅化。每个片段通过执片元元着器，进行 填充。 元着器会输出我们将屏幕上看到的最终颜色值。</p><h3 id="三、3种向OpenGL着色器传递渲染数据的方法"><a href="#三、3种向OpenGL着色器传递渲染数据的方法" class="headerlink" title="三、3种向OpenGL着色器传递渲染数据的方法"></a>三、3种向OpenGL着色器传递渲染数据的方法</h3><ul><li>属性</li><li>Uniform</li><li>纹理<h4 id="3-1-属性"><a href="#3-1-属性" class="headerlink" title="3.1 属性"></a>3.1 属性</h4></li></ul><p><strong>属性：就是对一个顶点都要作改变的数据元素。实际上，顶点位置本身就是一个属性。属性可以是浮点类型、整型、布尔类型。</strong></p><p><strong>属性总是以四维向 的形式进行内部存储的，即使我们不会使用所有的4个分量。</strong>一个顶点位置可能存储(x,y,z)，将占有4个分量中的3个。<br>实际上如果是在平面情况下:只要在xy平面上就能绘制，那么Z分量就会自动设置为0;<br>属性还可以是:纹理坐标、颜色值、关照计算表面法线<br>在顶点程序(shader渲染)可以代表你想要的任何意义。因为都是你设定的。<br>属性会从本地客户机内存中复制存储在图形硬件中的一个缓冲区上。这些属性只提供给顶点着 使 ，对于 元着 有太 意义。<br>声明:这些属性对每个顶点都要做改变，但并不意味着它们的值不能重复。通常情况下，它们都是 不一样样的，但有可能整个数组都是同一值的情况。</p><h4 id="3-2-Uniform"><a href="#3-2-Uniform" class="headerlink" title="3.2 Uniform"></a>3.2 Uniform</h4><p><strong>属性是 种对整个批次属性都取统一值的单一值，它是不变的。</strong></p><p><strong>通过设置uniform变量就紧接着发送一个图元批次命令</strong>。Uniform变量实际上可以无限次限制地使用，设置一个应用于整个表面的单个颜色值，还可以设置一个时间值。在每次渲染某种类型的顶点动画时修改它。<br>注意:这 的uniform 变量每个批次改变一次，而不是每个顶点改变一次。<br>uniform变量最常见的应该是在顶点渲染中设置变换矩阵<br>与属性相同点:可以是浮点值、整数、布尔值<br>与属性不同点:顶点着色器和片元着色器都可以用 uniform变量 。uniform 变量还可以是标量类型、 矢量类型、uniform矩阵。</p><h4 id="3-3-纹理"><a href="#3-3-纹理" class="headerlink" title="3.3 纹理"></a>3.3 纹理</h4><p><strong>传递给着器的第三种数据类型:纹理数据</strong></p><p><strong>在顶点着色器、 片段着色器中都可以对纹理数据进行采样和筛选。</strong><br>典型的应用场景: 片段着色器对一个纹理值进行采样，然后在一个三角形表面应用渲染纹理数据。<br>纹理数据， 不仅仅表现在图形，很多图形文件格式都是以无符号字节(每个颜色通道8位)形式对颜分量进行存储的。</p><h4 id="3-4-输出"><a href="#3-4-输出" class="headerlink" title="3.4 输出"></a>3.4 输出</h4><p>输出数据：简单的从一个阶段传递到下一个阶段。<br>客户端的代码接触不到这些内部变量。我们的OpenGL开发暂时接触不到！</p><h3 id="四、创建坐标系"><a href="#四、创建坐标系" class="headerlink" title="四、创建坐标系"></a>四、创建坐标系</h3><h4 id="4-1-正投影"><a href="#4-1-正投影" class="headerlink" title="4.1 正投影"></a>4.1 正投影</h4><p><img src="http://p7l9kf5i4.bkt.clouddn.com/2018-04-23-15244573118476.jpg-style01" alt=""></p><p>这就是一个正投影的 例子，在所在3个轴(X,Y,Z)中，它们的范围都是从-100到+100。这个视景体将包括所有的 几何图形。<br>如果你指定 了视景体外的几何图形，就会被裁减掉!(它将沿着视景体的边界进行剪切)在正投影中，所有在这个空间范围内的所有东西都将被呈现在屏幕上。 存在照相机或视点坐标系的概念。</p><h4 id="4-2透视投影"><a href="#4-2透视投影" class="headerlink" title="4.2透视投影"></a>4.2透视投影</h4><p><code>setPerspective(float ffov,float fAspect,float fNear,float fFar)</code><br><img src="http://p7l9kf5i4.bkt.clouddn.com/2018-04-23-15244573321853.jpg-style01" alt=""></p><p>透视投影会进行透视除法对距离观察者很远的对象进行缩短和收缩。在投影到屏幕之后，视景体背面与视景体正面的宽度测量标准不同。<br>上图所示:平截头体(frustum)的 何体，它的观察方向是从金字塔的尖端到宽阔端。观察者的视点与金字塔的尖端拉开一定距离。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">GLFrustum类通过setPerspective  法为我们构建一个平截头体。</span><br><span class="line">参数:</span><br><span class="line">fFov:垂直方向上的视场角度</span><br><span class="line">fAspect:窗口的宽度与高度的纵横 </span><br><span class="line">fNear:近裁剪面距离</span><br><span class="line">fFar:远裁剪面距离</span><br><span class="line">纵横  = 宽(w)/ (h)</span><br><span class="line"></span><br><span class="line">CLFrustum::SetPerspective(float fFov,float fAspect,float fNear,float fFar);</span><br></pre></td></tr></table></figure><h3 id="五、使用存储着色器"><a href="#五、使用存储着色器" class="headerlink" title="五、使用存储着色器"></a>五、使用存储着色器</h3><h4 id="5-1、使用背景"><a href="#5-1、使用背景" class="headerlink" title="5.1、使用背景"></a>5.1、使用背景</h4><h4 id="5-2存储着色器的使用"><a href="#5-2存储着色器的使用" class="headerlink" title="5.2存储着色器的使用"></a>5.2存储着色器的使用</h4><ul><li>单位着色器</li><li>平面着色器</li><li>上色着色器</li><li>默认光源着色器</li><li>点光源着色器</li><li>纹理替换矩阵</li><li>纹理调整着色器</li><li>纹理光源着色器</li></ul><h4 id="5-3-GLShaderManager-的初始化"><a href="#5-3-GLShaderManager-的初始化" class="headerlink" title="5.3 GLShaderManager 的初始化"></a>5.3 GLShaderManager 的初始化</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">// 定义着色器</span><br><span class="line">GLShaderMananger shaderManager;</span><br><span class="line"></span><br><span class="line">// 初始化着色器</span><br><span class="line">shaderManager.IntalizeStockShaders()</span><br><span class="line"></span><br><span class="line">//使用</span><br><span class="line">shaderManager userStockManager(参数列表)</span><br></pre></td></tr></table></figure><h4 id="5-4-GLShaderManager-属性"><a href="#5-4-GLShaderManager-属性" class="headerlink" title="5.4 GLShaderManager 属性"></a>5.4 GLShaderManager 属性</h4><p><img src="http://p7l9kf5i4.bkt.clouddn.com/2018-04-23-15244573506921.jpg-style01" alt=""></p><p>存储着色器为每一个变量都使用一致的内部变量命名规则和相同的属性槽，以上就是存储着色器的属性列表。</p><h4 id="5-5-GLShanderManager-的-uniform值"><a href="#5-5-GLShanderManager-的-uniform值" class="headerlink" title="5.5 GLShanderManager 的 uniform值"></a>5.5 GLShanderManager 的 uniform值</h4><p>一般情况，要对几何图形进行渲染，我们需要给对象递交属性矩阵， 先要绑定我们想要使用的着色器程序上，并提供程序的uniform值。但是<code>GLShanderManager</code> 类可以暂时为我们完成工作。<br><code>useStockShader</code> 函数会选择一个存储着色器并提供这个着色器的uniform值。</p><p><strong>单位着色器</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">//单位着色器:只是简单地使用默认笛卡尔坐标系(坐标范围(-1.0，1.0))。所有的片段都应用同一种颜色 ，几何图形为心和未渲染的。</span><br><span class="line">//需要设置存储着色器一个属性: GLT_ATTRIBUTE_VERTEX(顶点分量)</span><br><span class="line">//参数2:vColor[4],你需要的颜色</span><br><span class="line"></span><br><span class="line">GLShaderManager::UserStockShader(GLT_ATTRIBUTE_VERTEX,GLfloat vColor[4]);</span><br></pre></td></tr></table></figure><p><strong>平面着色器</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">//参数1:平面着色器 </span><br><span class="line">//参数2:允许变化的4*4矩阵</span><br><span class="line">//参数3:颜色</span><br><span class="line">//它将统一着色器进行了拓展。允许为几何图形变换指定一个 4 * 4 变换矩阵。经常被称为“模型视图投影矩阵”</span><br><span class="line"></span><br><span class="line">GLShaderManager::UserStockShader(GLT_SHADER_FLAT,GLfloat mvp[16],GLfloat vColor[4]);</span><br></pre></td></tr></table></figure><p><strong>上色着器</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">//在几何图形中应用的变换矩阵。</span><br><span class="line">//需要设置存储着色器的 GLT_ATTRIBUTE_VERTEX(顶点分量 ) 和GLT_ATTRIBUTE_COLOR(颜色分量 ) 2个属性。颜色值将被平滑地插入顶点之间(平滑着色 )</span><br><span class="line"></span><br><span class="line">GLShaderManager::UserStockShader(GLT_SHADER_SHADED,GLfloat mvp[16]);</span><br></pre></td></tr></table></figure><p><strong>默认光源着色器</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">//参数1:默认光源着色器  </span><br><span class="line">//参数2:模型视图矩阵</span><br><span class="line">//参数3:投影矩阵</span><br><span class="line">//参数4:颜 值</span><br><span class="line">//这种着色器，是对象产 阴影和关照的效果。需要设置存储着色器的 GLT_ATTRIBUTE_VERTEX(顶点分量) 和GLT_ATTRIBUTE_NORMAL(表面法线)</span><br><span class="line"></span><br><span class="line">GLShaderManager::UserStockShader(GLT_SHADER_DEFAULT_LIGHT,GLfloat mvMatrix[16],GLfloatpMatrix[16],GLfloat vColor[4]);</span><br></pre></td></tr></table></figure><p><strong>点光源着色器</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">//参数1:点光源着色器</span><br><span class="line">//参数2:模型视图矩阵</span><br><span class="line">//参数3:投影矩阵</span><br><span class="line">//参数4:视点坐标光源位置</span><br><span class="line">//参数5:颜色值</span><br><span class="line">//点光源着色器和默认光源着色器很相似，区别在于:光源位置是特定的。同样需要设置存储着色器的 GLT_ATTRIBUTE_VERTEX(顶点分量) 和GLT_ATTRIBUTE_NORMAL(表面法线)</span><br><span class="line"></span><br><span class="line">GLShaderManager::UserStockShader(GLT_SHADER_DEFAULT_LIGHT_DIEF,GLfloatmvMatrix[16],GLfloat pMatrix[16],GLfloat vLightPos[3],GLfloat vColor[4]);</span><br></pre></td></tr></table></figure><p><strong>纹理替换矩阵着色器</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">//着色器通过给定的模型视图投影矩阵，使用绑定到 nTextureUnit (纹 单元) 指定纹理单元的纹理对几何图形进行变化。 段颜 :是直接从纹理样本中直接获取的。</span><br><span class="line">//需要设置存储着色器的 GLT_ATTRIBUTE_VERTEX(顶点分量) 和 GLT_ATTRIBUTE_NORMAL(表面法线)</span><br><span class="line"></span><br><span class="line">GLShaderManager::UserStockShader(GLT_SHADER_TEXTURE_REPLACE,GLfloat mvMatrix[16],GLintnTextureUnit);</span><br></pre></td></tr></table></figure><p><strong>纹理调整着色器</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">//将一个基本色乘以一个取自纹理单元 nTextureUnit 的纹 。需要设置存储着色器的 GLT_ATTRIBUTE_VERTEX(顶点分量) 和 GLT_ATTRIBUTE_TEXTURE0(纹理坐标)</span><br><span class="line"></span><br><span class="line">GLShaderManager::UserStockShader(GLT_SHADER_TEXTURE_MODULATE,GLfloatmvMatrix[16],GLfloat vColor[4],GLint nTextureUnit);</span><br></pre></td></tr></table></figure><p><strong>纹理光源着色器</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">//参数1:纹理光源着色器 </span><br><span class="line">//参数2:投影矩阵</span><br><span class="line">//参数3:视觉空间中的光源位置</span><br><span class="line">//参数4: 何图形的基本色</span><br><span class="line">//参数5:将要使用的纹理单元</span><br><span class="line">//将一个纹理通过漫反射照明计算机进行调整(相乘)。光线在视觉空间中的位置是给定的。</span><br><span class="line">//需要设置存储着色器的 GLT_ATTRIBUTE_VERTEX(顶点分量) 和 GLT_ATTRIBUTE_TEXTURE0(纹理坐标)、GLT_ATTRIBUTE_NORMAL(表面法线)</span><br><span class="line"></span><br><span class="line">GLShaderManager::UserStockShader(GLT_SHADER_TEXTURE_POINT_LIGHT_DIEF,GLfloatmvMatrix[16],GLfloat pMatrix[16],GLfloat vLightPos[3],GLfloat vBaseColor[4],GLint nTextureUnit);</span><br></pre></td></tr></table></figure><h3 id="六、OpenGL图元"><a href="#六、OpenGL图元" class="headerlink" title="六、OpenGL图元"></a>六、OpenGL图元</h3><ul><li>点</li><li>线</li><li>线带</li><li>线环</li><li>三角形</li><li>三角形金字塔</li><li>三角形带</li><li>三角形扇</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">//修改点的大小</span><br><span class="line">glPointSize(4.0f);</span><br><span class="line">//设置点的大小范围，点和点之间的距离</span><br><span class="line">GLfloat sizes[2] = &#123;2.0f,4.0f&#125;;</span><br><span class="line">GLfloat stepSize = 1.0f;</span><br><span class="line">//获取点的大小范围和步长glGetFloatv(GL_POINT_SIZE_RANGE,sizes);</span><br><span class="line">glGetFloatv(GL_POINT_GRAULRITY,&amp;stepSize);</span><br><span class="line">//3.通过使用程序点大小模式设置点大小</span><br><span class="line">glEnable(GL_PROGAM_POINT_SIZE);</span><br><span class="line">//GLSL程序</span><br><span class="line">gl_PointSize = 5.0f;</span><br></pre></td></tr></table></figure><h3 id="七、GLBatch容器-帮助类"><a href="#七、GLBatch容器-帮助类" class="headerlink" title="七、GLBatch容器(帮助类)"></a>七、GLBatch容器(帮助类)</h3><p><img src="http://p7l9kf5i4.bkt.clouddn.com/2018-04-23-15244573753588.jpg-style01" alt=""></p><p><img src="http://p7l9kf5i4.bkt.clouddn.com/2018-04-23-15244573813628.jpg-style01" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;在OpenGL 3.0之前，OpenGL 包含一个固定功能的管线，它可以在不使用着色器的情况下处理几何与像素数据。在3.1版本开始，固定管线从核心模式去掉。因此现在需要使用着色器来完成工作。&lt;br&gt;使 OpenGL 来说，我们会使 GLSL,(Op
      
    
    </summary>
    
      <category term="OpenGL" scheme="http://yoursite.com/categories/OpenGL/"/>
    
    
      <category term="OpenGL" scheme="http://yoursite.com/tags/OpenGL/"/>
    
  </entry>
  
  <entry>
    <title>OpenGL学习 在Mac上搭建OpenGL环境(一)</title>
    <link href="http://yoursite.com/2018/02/05/15244567239248/"/>
    <id>http://yoursite.com/2018/02/05/15244567239248/</id>
    <published>2018-02-05T15:12:43.000Z</published>
    <updated>2018-06-27T10:45:40.919Z</updated>
    
    <content type="html"><![CDATA[<p>一、准备资源</p><ol><li>CLTools</li><li>glew</li><li>libGLTools.a</li><li>百度云盘资源地址：链接: <a href="https://pan.baidu.com/s/1ebesf8" target="_blank" rel="noopener">https://pan.baidu.com/s/1ebesf8</a> 密码: g99g</li></ol><p>二、现在开始配置 openGL 环境</p><p>1、打开Xcode -&gt; macOS -&gt; Cocoa Application</p><p><img src="http://p7l9kf5i4.bkt.clouddn.com/2018-04-23-15244560096062.jpg-style01" alt=""></p><p>2、选中Build Phases, 选择 Link Binary With Libraries ,点击 +  搜索添加 OpenGl.framework 和 GLUT.framework 两个系统库.</p><p><img src="http://p7l9kf5i4.bkt.clouddn.com/2018-04-23-15244567872134.jpg-style01" alt=""></p><p>3、把下载好的 include 和 libGLTools.a 拖入到项目里面，选中 Copy item if needed 和 Create groups<br><img src="http://p7l9kf5i4.bkt.clouddn.com/2018-04-23-15244560540915.jpg-style01" alt=""></p><p><img src="http://p7l9kf5i4.bkt.clouddn.com/2018-04-23-15244560749630.jpg-style01" alt=""></p><p>4、然后点击 Build Settings, 选则All ，找到 Header Search Paths, 把你拖到项目里的 include 文件夹路径 拖到里面。<br>把libGLTools.a 文件拖到Framework 里面<br><img src="http://p7l9kf5i4.bkt.clouddn.com/2018-04-23-15244560944363.jpg-style01" alt=""></p><p>5、接着把 AppDelegate.h, AppDelegate.m,ViewController.h,ViewControllers.m 文件删除掉<br><img src="http://p7l9kf5i4.bkt.clouddn.com/2018-04-23-15244561074509.jpg-style01" alt=""><br>OpenGL006.jpeg</p><p>6、添加新的文件，选择 C++ File ,Name 设置为main，并且不要勾选下面的 also create a header file,点击Next ,生成main.cpp文件<br><img src="http://p7l9kf5i4.bkt.clouddn.com/2018-04-23-15244561195444.jpg-style01" alt=""><br><img src="http://p7l9kf5i4.bkt.clouddn.com/2018-04-23-15244561298591.jpg-style01" alt=""></p><p>7、然后把main.m 文件删除掉。<br><img src="http://p7l9kf5i4.bkt.clouddn.com/2018-04-23-15244561437251.jpg-style01" alt=""></p><p>8、把下面的代码复制到 main.cpp 里面，然后把项目跑起来 Run B<img src="http://p7l9kf5i4.bkt.clouddn.com/2018-04-23-15244561563956.jpg-style01" alt=""><br>OpenGL010.jpeg</p><p>三、注意事项与报错处理</p><p>如果报下面的错误<br>ld: library not found for -lGLTools<br>clang: error: linker command failed with exit code 1 (use -v to see invocation)<br><img src="http://p7l9kf5i4.bkt.clouddn.com/2018-04-23-15244561673939.jpg-style01" alt=""></p><p>选择General 下面 的林科大Frameworks and Libraries<br>选中 libGLTools.a 点击下面的 一 删除掉，然后点击 + , 选择 Add Other,然后找到你项目里面的 libGLTools.a，选中并点击 open，重新 Run Build 就好了。<br><img src="http://p7l9kf5i4.bkt.clouddn.com/2018-04-23-15244561986179.jpg-style01" alt=""><br><img src="http://p7l9kf5i4.bkt.clouddn.com/2018-04-23-15244562088552.jpg-style01" alt=""><br><img src="http://p7l9kf5i4.bkt.clouddn.com/2018-04-23-15244562198692.jpg-style01" alt=""></p><p>注意 ：新建的main.cpp 文件里面 必须要有 main 函数，不然直接build 会报错</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;一、准备资源&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;CLTools&lt;/li&gt;
&lt;li&gt;glew&lt;/li&gt;
&lt;li&gt;libGLTools.a&lt;/li&gt;
&lt;li&gt;百度云盘资源地址：链接: &lt;a href=&quot;https://pan.baidu.com/s/1ebesf8&quot; target=&quot;_
      
    
    </summary>
    
      <category term="OpenGL" scheme="http://yoursite.com/categories/OpenGL/"/>
    
    
      <category term="OpenGL" scheme="http://yoursite.com/tags/OpenGL/"/>
    
  </entry>
  
  <entry>
    <title>iOS 开发 CADisplayLink 定时器的了解与使用</title>
    <link href="http://yoursite.com/2017/09/19/iOS%E5%BC%80%E5%8F%91CADisplayLink-%E5%AE%9A%E6%97%B6%E5%99%A8%E7%9A%84%E4%BA%86%E8%A7%A3%E4%B8%8E%E4%BD%BF%E7%94%A8/"/>
    <id>http://yoursite.com/2017/09/19/iOS开发CADisplayLink-定时器的了解与使用/</id>
    <published>2017-09-19T13:28:05.000Z</published>
    <updated>2018-06-27T10:45:10.258Z</updated>
    
    <content type="html"><![CDATA[<h3 id="一、简介"><a href="#一、简介" class="headerlink" title="一、简介"></a>一、简介</h3><h4 id="1、所在框架"><a href="#1、所在框架" class="headerlink" title="1、所在框架"></a>1、所在框架</h4><p><code>CADisplayLink</code>和其它<code>CoreAnimation</code>类一样，都是在QuartzCore.framework里。</p><p><strong>1.1什么是<code>CADisplayLink</code>?</strong></p><p><strong><code>CADisplayLink</code>是一个能让我们以和屏幕刷新率相同的频率将内容画到屏幕上的定时器。我们在应用中创建一个新的 <code>CADisplayLink</code> 对象，把它添加到一个runloop中，并给它提供一个 target 和selector 在屏幕刷新的时候调用。</strong></p><p>一但 <code>CADisplayLink</code> 以特定的模式注册到runloop之后，每当屏幕需要刷新的时候，runloop就会调用<code>CADisplayLink</code>绑定的target上的selector，这时target可以读到 <code>CADisplayLink</code> 的每次调用的时间戳，用来准备下一帧显示需要的数据。例如一个视频应用使用时间戳来计算下一帧要显示的视频数据。在UI做动画的过程中，需要通过时间戳来计算UI对象在动画的下一帧要更新的大小等等。</p><p>在添加进runloop的时候我们应该选用高一些的优先级，来保证动画的平滑。可以设想一下，我们在动画的过程中，runloop被添加进来了一个高优先级的任务，那么，下一次的调用就会被暂停转而先去执行高优先级的任务，然后在接着执行<code>CADisplayLink</code>的调用，从而造成动画过程的卡顿，使动画不流畅。</p><p><code>duration</code>属性提供了每帧之间的时间，也就是屏幕每次刷新之间的的时间。我们可以使用这个时间来计算出下一帧要显示的UI的数值。但是 <code>duration</code>只是个大概的时间，如果CPU忙于其它计算，就没法保证以相同的频率执行屏幕的绘制操作，这样会跳过几次调用回调方法的机会。<br><code>frameInterval</code>属性是可读可写的NSInteger型值，标识间隔多少帧调用一次selector 方法，默认值是1，即每帧都调用一次。如果每帧都调用一次的话，对于iOS设备来说那刷新频率就是60HZ也就是每秒60次，如果将 frameInterval 设为2 那么就会两帧调用一次，也就是变成了每秒刷新30次。</p><p>我们通过pause属性开控制<code>CADisplayLink</code>的运行。当我们想结束一个<code>CADisplayLink</code>的时候，应该调用-(void)invalidate<br>从runloop中删除并删除之前绑定的 target跟selector<br>另外<code>CADisplayLink</code> 不能被继承。</p><h4 id="2、功能"><a href="#2、功能" class="headerlink" title="2、功能"></a>2、功能</h4><p><code>CADisplayLink</code>最主要的特征是能提供一个周期性的调用我们赋给它的selector的机制，从这点上看它很像定时器NSTimer。</p><h4 id="3、使用方式"><a href="#3、使用方式" class="headerlink" title="3、使用方式"></a>3、使用方式</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">- (void)startDisplayLink  </span><br><span class="line">&#123;  </span><br><span class="line">    self.displayLink = [`CADisplayLink`     displayLinkWithTarget:self selector:@selector(handleDisplayLink:)];  </span><br><span class="line">    [self.displayLink addToRunLoop:[NSRunLoop currentRunLoop] forMode:NSDefaultRunLoopMode];  </span><br><span class="line">&#125;  </span><br><span class="line"></span><br><span class="line">- (void)handleDisplayLink:(`CADisplayLink` *)displayLink  </span><br><span class="line">&#123;  </span><br><span class="line">      //do something  </span><br><span class="line">&#125;  </span><br><span class="line"></span><br><span class="line">- (void)stopDisplayLink  </span><br><span class="line">&#123;  </span><br><span class="line">    [self.displayLink invalidate];  </span><br><span class="line">    self.displayLink = nil;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当把<code>CADisplayLink</code>对象add到runloop中后，selector就能被周期性调用，类似于NSTimer被启动了；执行invalidate操作时，<code>CADisplayLink</code>对象就会从runloop中移除，selector调用也随即停止，类似于NSTimer的invalidate方法。</p><p><code>CADisplayLink</code> 与 NSTimer 有什么不同</p><p>iOS设备的屏幕刷新频率是固定的，<code>CADisplayLink</code>在正常情况下会在每次刷新结束都被调用，精确度相当高。<br>NSTimer的精确度就显得低了点，比如NSTimer的触发时间到的时候，runloop如果在阻塞状态，触发时间就会推迟到下一个runloop周期。并且 NSTimer新增了tolerance属性，让用户可以设置可以容忍的触发的时间的延迟范围。<br><code>CADisplayLink</code>使用场合相对专一，适合做UI的不停重绘，比如自定义动画引擎或者视频播放的渲染。NSTimer的使用范围要广泛的多，各种需要单次或者循环定时处理的任务都可以使用。在UI相关的动画或者显示内容使用 <code>CADisplayLink</code>比起用NSTimer的好处就是我们不需要在格外关心屏幕的刷新频率了，因为它本身就是跟屏幕刷新同步的。</p><h3 id="二、特性"><a href="#二、特性" class="headerlink" title="二、特性"></a>二、特性</h3><p>下面结合<code>NSTimer</code>来介绍<code>CADisplayLink</code>，与NSTimer不同的地方有：</p><h4 id="1、原理不同"><a href="#1、原理不同" class="headerlink" title="1、原理不同"></a>1、原理不同</h4><p><code>CADisplayLink</code>是一个能让我们以和屏幕刷新率同步的频率将特定的内容画到屏幕上的定时器类。<code>CADisplayLink</code>以特定模式注册到runloop后，每当屏幕显示内容刷新结束的时候，runloop就会向<code>CADisplayLink</code>指定的target发送一次指定的selector消息， <code>CADisplayLink</code>类对应的selector就会被调用一次。<br>NSTimer以指定的模式注册到runloop后，每当设定的周期时间到达后，runloop会向指定的target发送一次指定的selector消息。</p><h4 id="2、周期设置方式不同"><a href="#2、周期设置方式不同" class="headerlink" title="2、周期设置方式不同"></a>2、周期设置方式不同</h4><p>iOS设备的屏幕刷新频率(FPS)是60Hz，因此<code>CADisplayLink</code>的selector默认调用周期是每秒60次，这个周期可以通过frameInterval属性设置，<code>CADisplayLink</code>的selector每秒调用次数=60/frameInterval。比如当frameInterval设为2，每秒调用就变成30次。因此，<code>CADisplayLink</code>周期的设置方式略显不便。<br>NSTimer的selector调用周期可以在初始化时直接设定，相对就灵活的多。</p><h4 id="3、精确度不同"><a href="#3、精确度不同" class="headerlink" title="3、精确度不同"></a>3、精确度不同</h4><p>iOS设备的屏幕刷新频率是固定的，<code>CADisplayLink</code>在正常情况下会在每次刷新结束都被调用，精确度相当高。<br>NSTimer的精确度就显得低了点，比如<code>NSTimer</code>的触发时间到的时候，runloop如果在忙于别的调用，触发时间就会推迟到下一个runloop周期。更有甚者，在OS X v10.9以后为了尽量避免在<code>NSTimer</code>触发时间到了而去中断当前处理的任务，NSTimer新增了tolerance属性，让用户可以设置可以容忍的触发的时间范围。</p><h4 id="4、使用场合"><a href="#4、使用场合" class="headerlink" title="4、使用场合"></a>4、使用场合</h4><p>从原理上不难看出，<code>CADisplayLink</code>使用场合相对专一，适合做界面的不停重绘，比如视频播放的时候需要不停地获取下一帧用于界面渲染。<br>NSTimer的使用范围要广泛的多，各种需要单次或者循环定时处理的任务都可以使用。</p><h3 id="三、重要属性"><a href="#三、重要属性" class="headerlink" title="三、重要属性"></a>三、重要属性</h3><p>下面不完整的列出了<code>CADisplayLink</code>的几个重要属性：</p><h4 id="1、frameInterval"><a href="#1、frameInterval" class="headerlink" title="1、frameInterval"></a>1、frameInterval</h4><p>可读可写的<code>NSInteger</code>型值，标识间隔多少帧调用一次<code>selector</code>方法，默认值是1，即每帧都调用一次。官方文档中强调，当该值被设定小于1时，结果是不可预知的。</p><h4 id="2、duration"><a href="#2、duration" class="headerlink" title="2、duration"></a>2、duration</h4><p>只读的<code>CFTimeInterval</code>值，表示两次屏幕刷新之间的时间间隔。需要注意的是，该属性在<code>target</code>的<code>selector</code>被首次调用以后才会被赋值。<code>selector</code>的调用间隔时间计算方式是：时间=duration×frameInterval。<br>现存的iOS设备屏幕的FPS都是60Hz，这一点可以从<code>CADisplayLink</code>的<code>duration</code>属性看出来。duration的值都是0.166666…，即1/60。尽管如此，我们并没法确定苹果不会改变FPS，如果以后某一天将FPS提升到了120Hz了怎么办呢？这时，你设置了<code>frameInterval</code>属性值为2期望每秒刷新30次，却发现每秒刷新了60次，结果可想而知，出于安全考虑，还是先根据<code>duration</code>判断屏幕的FPS再去使用<code>CADisplayLink</code>。</p><h4 id="3、timestamp"><a href="#3、timestamp" class="headerlink" title="3、timestamp"></a>3、timestamp</h4><p>只读的<code>CFTimeInterval</code>值，表示屏幕显示的上一帧的时间戳，这个属性通常被target用来计算下一帧中应该显示的内容。</p><p>虽然名为时间戳，但这和常见的unix时间戳差异很大，事实上这是<code>CoreAnimation</code>使用的时间格式。每个CALayer都有一个本地时间（CALayer本地时间的具体作用会在后续文章中说明），可以获取当前CALayer的本地时间并打印：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">CFTimeInterval localLayerTime = [myLayer convertTime:CACurrentMediaTime() fromLayer:nil];  </span><br><span class="line">NSLog(@&quot;localLayerTime:%f&quot;,localLayerTime);</span><br></pre></td></tr></table></figure><h3 id="四、注意"><a href="#四、注意" class="headerlink" title="四、注意"></a>四、注意</h3><p>iOS并不能保证能以每秒60次的频率调用回调方法，这取决于：</p><h4 id="1、CPU的空闲程度"><a href="#1、CPU的空闲程度" class="headerlink" title="1、CPU的空闲程度"></a>1、CPU的空闲程度</h4><p>如果CPU忙于其它计算，就没法保证以60HZ执行屏幕的绘制动作，导致跳过若干次调用回调方法的机会，跳过次数取决CPU的忙碌程度。</p><h4 id="2、执行回调方法所用的时间"><a href="#2、执行回调方法所用的时间" class="headerlink" title="2、执行回调方法所用的时间"></a>2、执行回调方法所用的时间</h4><p>如果执行回调时间大于重绘每帧的间隔时间，就会导致跳过若干次回调调用机会，这取决于执行时间长短。</p><h4 id="3-通常来讲"><a href="#3-通常来讲" class="headerlink" title="3.通常来讲"></a>3.通常来讲</h4><p>iOS设备的刷新频率事60HZ也就是每秒60次。那么每一次刷新的时间就是1/60秒 大概16.7毫秒。当我们的<code>frameInterval</code>值为1的时候我们需要保证的是 <code>CADisplayLink</code>调用的｀target｀的函数计算时间不应该大于 16.7否则就会出现严重的丢帧现象。</p><h3 id="五、参考文档"><a href="#五、参考文档" class="headerlink" title="五、参考文档"></a>五、参考文档</h3><h5 id="1、官方文档"><a href="#1、官方文档" class="headerlink" title="1、官方文档"></a>1、官方文档</h5><h5 id="2、官方使用CADisplayLink播放视频的例子"><a href="#2、官方使用CADisplayLink播放视频的例子" class="headerlink" title="2、官方使用CADisplayLink播放视频的例子"></a>2、官方使用<code>CADisplayLink</code>播放视频的例子</h5>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;一、简介&quot;&gt;&lt;a href=&quot;#一、简介&quot; class=&quot;headerlink&quot; title=&quot;一、简介&quot;&gt;&lt;/a&gt;一、简介&lt;/h3&gt;&lt;h4 id=&quot;1、所在框架&quot;&gt;&lt;a href=&quot;#1、所在框架&quot; class=&quot;headerlink&quot; title=&quot;1、所在框
      
    
    </summary>
    
      <category term="iOS 开发" scheme="http://yoursite.com/categories/iOS-%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="iOS 开发" scheme="http://yoursite.com/tags/iOS-%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>FMDB 数据库简单基本操作</title>
    <link href="http://yoursite.com/2017/06/27/FMDB-%E6%95%B0%E6%8D%AE%E5%BA%93%E7%AE%80%E5%8D%95%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/"/>
    <id>http://yoursite.com/2017/06/27/FMDB-数据库简单基本操作/</id>
    <published>2017-06-27T14:52:43.000Z</published>
    <updated>2018-06-27T10:45:47.256Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">1.创建表: create table if not exists 表名 (字段名1, 字段名2…); 例如：创建 t_student 表 id（id自增长）</span><br><span class="line"></span><br><span class="line">create table if not exists t_student (id integer primary key autoincrement, name text not null, age integer)</span><br><span class="line">2.增加数据: insert into 表名 (字段名1, 字段名2, …) values(字段1的值, 字段2的值, …); 例如：在 t_student 表插入name，age字段</span><br><span class="line"></span><br><span class="line">insert into t_student (name,age) values (@”Jack”,@17);</span><br><span class="line">3.1根据条件删除数据： delete from 表名 where 条件; 例如：</span><br><span class="line">删除 t_student 表中 name 字段为 Jack 的数据</span><br><span class="line"></span><br><span class="line">delete from t_student where name = @”Jack”;</span><br><span class="line">3.2删除表中所有的数据： delete from 表名； 例如：</span><br><span class="line"></span><br><span class="line">delete from t_student;</span><br><span class="line">4.根据条件更改某个数据 update 表名 set 字段1 = ‘值1’, 字段2 = ‘值2’ where 字段1 = ‘字段1的当前值’ 例如：</span><br><span class="line"></span><br><span class="line">update t_student set name = ‘lily’, age = ‘16’ where name = ‘Jack’</span><br><span class="line">5.1根据条件查找 select from 表名 where 字段1 = ‘字段1的值’ 例如：</span><br><span class="line"></span><br><span class="line">select from t_student where age = ‘16’</span><br><span class="line">5.2查找所有数据 select from 表名 例如：</span><br><span class="line"></span><br><span class="line">select from t_student</span><br><span class="line">5.3排序查找： select from 表名 order by 字段 例如：</span><br><span class="line"></span><br><span class="line">select from t_student order by age asc （升序，默认）</span><br><span class="line">select * from t_student order by age desc （降序） 3.</span><br><span class="line">6.删除表： drop table 表名 例如：</span><br><span class="line"></span><br><span class="line">drop table t_student</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class
      
    
    </summary>
    
      <category term="FMDB" scheme="http://yoursite.com/categories/FMDB/"/>
    
    
      <category term="FMDB" scheme="http://yoursite.com/tags/FMDB/"/>
    
  </entry>
  
  <entry>
    <title>iOS开发权限设置</title>
    <link href="http://yoursite.com/2017/05/05/iOS%E5%BC%80%E5%8F%91%E6%9D%83%E9%99%90%E8%AE%BE%E7%BD%AE/"/>
    <id>http://yoursite.com/2017/05/05/iOS开发权限设置/</id>
    <published>2017-05-05T10:04:23.000Z</published>
    <updated>2018-06-27T10:45:14.095Z</updated>
    
    <content type="html"><![CDATA[<p>iOS 8.0之后调用系统的API需要配置相关的配置信息才能正常使用</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 相册 --&gt;</span><br><span class="line">&lt;key&gt;NSPhotoLibraryUsageDescription&lt;/key&gt;</span><br><span class="line">&lt;string&gt;App需要您的同意,才能访问相册&lt;/string&gt;</span><br><span class="line">&lt;!-- 相机 --&gt;</span><br><span class="line">&lt;key&gt;NSCameraUsageDescription&lt;/key&gt;</span><br><span class="line">&lt;string&gt;App需要您的同意,才能访问相机&lt;/string&gt;</span><br><span class="line">&lt;!-- 麦克风 --&gt;</span><br><span class="line">&lt;key&gt;NSMicrophoneUsageDescription&lt;/key&gt;</span><br><span class="line">&lt;string&gt;App需要您的同意,才能访问麦克风&lt;/string&gt;</span><br><span class="line">&lt;!-- 位置 --&gt;</span><br><span class="line">&lt;key&gt;NSLocationUsageDescription&lt;/key&gt;</span><br><span class="line">&lt;string&gt;App需要您的同意,才能访问位置&lt;/string&gt;</span><br><span class="line">&lt;!-- 在使用期间访问位置 --&gt;</span><br><span class="line">&lt;key&gt;NSLocationWhenInUseUsageDescription&lt;/key&gt;</span><br><span class="line">&lt;string&gt;App需要您的同意,才能在使用期间访问位置&lt;/string&gt;</span><br><span class="line">&lt;!-- 始终访问位置 --&gt;</span><br><span class="line">&lt;key&gt;NSLocationAlwaysUsageDescription&lt;/key&gt;</span><br><span class="line">&lt;string&gt;App需要您的同意,才能始终访问位置&lt;/string&gt;</span><br><span class="line">&lt;!-- 日历 --&gt;</span><br><span class="line">&lt;key&gt;NSCalendarsUsageDescription&lt;/key&gt;</span><br><span class="line">&lt;string&gt;App需要您的同意,才能访问日历&lt;/string&gt;</span><br><span class="line">&lt;!-- 提醒事项 --&gt;</span><br><span class="line">&lt;key&gt;NSRemindersUsageDescription&lt;/key&gt;</span><br><span class="line">&lt;string&gt;App需要您的同意,才能访问提醒事项&lt;/string&gt;</span><br><span class="line">&lt;!-- 运动与健身 --&gt;</span><br><span class="line">&lt;key&gt;NSMotionUsageDescription&lt;/key&gt;</span><br><span class="line">&lt;string&gt;App需要您的同意,才能访问运动与健身&lt;/string&gt;</span><br><span class="line">&lt;!-- 健康更新 --&gt;</span><br><span class="line">&lt;key&gt;NSHealthUpdateUsageDescription&lt;/key&gt;</span><br><span class="line">&lt;string&gt;App需要您的同意,才能访问健康更新 &lt;/string&gt;</span><br><span class="line">&lt;!-- 健康分享 --&gt;</span><br><span class="line">&lt;key&gt;NSHealthShareUsageDescription&lt;/key&gt;</span><br><span class="line">&lt;string&gt;App需要您的同意,才能访问健康分享&lt;/string&gt;</span><br><span class="line">&lt;!-- 蓝牙 --&gt;</span><br><span class="line">&lt;key&gt;NSBluetoothPeripheralUsageDescription&lt;/key&gt;</span><br><span class="line">&lt;string&gt;App需要您的同意,才能访问蓝牙&lt;/string&gt;</span><br><span class="line">&lt;!-- 媒体资料库 --&gt;</span><br><span class="line">&lt;key&gt;NSAppleMusicUsageDescription&lt;/key&gt;</span><br><span class="line">&lt;string&gt;App需要您的同意,才能访问媒体资料库&lt;/string&gt;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;iOS 8.0之后调用系统的API需要配置相关的配置信息才能正常使用&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;
      
    
    </summary>
    
      <category term="iOS 开发" scheme="http://yoursite.com/categories/iOS-%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="iOS 开发" scheme="http://yoursite.com/tags/iOS-%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
</feed>
