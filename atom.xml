<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>CodeDeng</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2018-04-25T16:50:31.204Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>CodeDeng</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>OpenGL学习 纹理(五)</title>
    <link href="http://yoursite.com/2018/02/11/15244707402194/"/>
    <id>http://yoursite.com/2018/02/11/15244707402194/</id>
    <published>2018-02-11T12:05:40.000Z</published>
    <updated>2018-04-25T16:50:31.204Z</updated>
    
    <content type="html"><![CDATA[<script src="//cdn.bootcss.com/jquery/1.11.3/jquery.min.js"></script><div id="security">  <div class="input-container">  <input type="password" class="form-control" id="pass" placeholder="欢迎来到我的博客,请输入密码继续阅读." />    <label for="pass">欢迎来到我的博客,请输入密码继续阅读.</label>    <div class="bottom-line"></div>  </div></div><div id="decryptionError" style="display: none;">Incorrect Password!</div><div id="noContentError" style="display: none;">No content to display!</div><div id="encrypt-blog" style="display:none">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</div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      阅读此文章需要密码,请输入密码继续阅读.
    
    </summary>
    
      <category term="OpenGL" scheme="http://yoursite.com/categories/OpenGL/"/>
    
    
      <category term="OpenGL" scheme="http://yoursite.com/tags/OpenGL/"/>
    
  </entry>
  
  <entry>
    <title>OpenGL学习 基本变化 (四)</title>
    <link href="http://yoursite.com/2018/02/09/15244691153165/"/>
    <id>http://yoursite.com/2018/02/09/15244691153165/</id>
    <published>2018-02-09T15:38:35.000Z</published>
    <updated>2018-04-23T09:50:43.007Z</updated>
    
    <content type="html"><![CDATA[<h3 id="一、抗锯齿"><a href="#一、抗锯齿" class="headerlink" title="一、抗锯齿"></a>一、抗锯齿</h3><p><strong>混合的两大功能:颜⾊色组合、抗锯⻮齿</strong></p><p>混合处理-抗锯齿</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">//开启混合处理理 glEnable(GL_BLEND);</span><br><span class="line">//指定混合因⼦子 GLBlendFunc(GL_SRC_ALPHA,GL_ONE_MINUS_SRC_ALPHA);</span><br><span class="line">//指定混合⽅方程式 glBlendEquation(GL_FUNC_ADD);</span><br><span class="line">glEnable(GL_POINT_SMOOTH); //对点进⾏行行抗锯⻮齿处理理</span><br><span class="line">glEnable(GL_LINE_SMOOTH);//对线进⾏行行抗锯⻮齿处理理 </span><br><span class="line">glEnable(GL_POLYGON_SMOOTH);//对多边形进⾏行行抗锯⻮齿处理理</span><br></pre></td></tr></table></figure><h3 id="二、多重采样"><a href="#二、多重采样" class="headerlink" title="二、多重采样"></a>二、多重采样</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">//1.可以调⽤用 glutInitDisplayMode 添加采样缓存区 glutInitDisplayMode(GLUT_MULTISAMPLE);</span><br><span class="line">//2.可以使⽤用glEnable| glDisable组合使⽤用GLUT_MULTISAMPLE 打开| 关闭 多重采样。</span><br><span class="line">glEnable(GLUT_MULTISAMPLE);</span><br><span class="line">glDisable(GLUT_MULTISAMPLE);</span><br></pre></td></tr></table></figure><h3 id="三、多重采样、抗锯⻮齿混合综合使⽤用"><a href="#三、多重采样、抗锯⻮齿混合综合使⽤用" class="headerlink" title="三、多重采样、抗锯⻮齿混合综合使⽤用"></a>三、多重采样、抗锯⻮齿混合综合使⽤用</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">glDisable(GLUT_MULTISAMPLE);</span><br><span class="line">glEnable(GL_POINT_SMOOTH);</span><br><span class="line">//Draw some smooth point</span><br><span class="line">glDisable(GL_POINT_SMOOTH);</span><br><span class="line">glDisable(GL_LINE_SMOOTH);</span><br><span class="line">glEnable(GLUT_MULTISAMPLE);</span><br><span class="line">//Draw some smooth polygon</span><br></pre></td></tr></table></figure><h3 id="四、多重采样-拓拓展"><a href="#四、多重采样-拓拓展" class="headerlink" title="四、多重采样 拓拓展"></a>四、多重采样 拓拓展</h3><p>多重采样缓存区在默认情况下使⽤用⽚片段RGB值，并不不包含颜 ⾊色的alpha成分，我们可以通过调⽤用glEnable来修改这个 ⾏行行为:</p><blockquote><ul><li>GL_SAMPLE_ALPHA_TO_COVERAGE 使⽤用alpha值</li><li>GL_SAMPLE_ALPHA_TO_ON 使⽤用alpha值并设为1，并 使⽤用它。</li><li>GL_SAMPLE_COVERAGE 使⽤用glSampleCoverage 所设置的值。</li></ul></blockquote><p>当启⽤用 GL_SAMPLE_COVERAGE 时，可以使⽤用 glSampleCoverage函数允许指定⼀一个特定的值，它是与⽚片 段覆盖值进⾏行行按位与操作的结果。</p><h3 id="五、向量"><a href="#五、向量" class="headerlink" title="五、向量"></a>五、向量</h3><p><img src="http://p7l9kf5i4.bkt.clouddn.com/2018-04-23-15244696546998.jpg-style01" alt=""></p><blockquote><p>如何定义三维、四维向量量或三维向量量数组、四维向量量数组?<br>M3DVector3f :表示⼀一个三维的向量量(x,y,z)<br>M3DVector4f :表示⼀一个四维的向量量(x,y,z,w)(R,G,B,A)</p></blockquote><h3 id="六、点乘"><a href="#六、点乘" class="headerlink" title="六、点乘"></a>六、点乘</h3><p><img src="http://p7l9kf5i4.bkt.clouddn.com/2018-04-23-15244697201684.jpg-style01" alt=""></p><p><img src="http://p7l9kf5i4.bkt.clouddn.com/2018-04-23-15244697388234.jpg-style01" alt=""></p><p><img src="http://p7l9kf5i4.bkt.clouddn.com/2018-04-23-15244698154537.jpg-style01" alt=""></p><h3 id="七、使用矩阵堆栈"><a href="#七、使用矩阵堆栈" class="headerlink" title="七、使用矩阵堆栈"></a>七、使用矩阵堆栈</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">//类型</span><br><span class="line">GLMatrixStack::GLMatrixStack(int iStackDepth = 64);</span><br><span class="line"></span><br><span class="line">//在堆栈顶部载⼊入⼀一个单元矩阵</span><br><span class="line">void GLMatrixStack::LoadIdentity(void);</span><br><span class="line"></span><br><span class="line">//在堆栈顶部载⼊入任何矩阵 //参数:4*4矩阵</span><br><span class="line">void GLMatrixStack::LoadMatrix(const M3DMatrix44f m);</span><br><span class="line"></span><br><span class="line">//矩阵乘以矩阵堆栈顶部矩阵，相乘结果存储到堆栈的顶部</span><br><span class="line">void GLMatrixStack::MultMatrix(const M3DMatrix44f);</span><br><span class="line"></span><br><span class="line">//获取矩阵堆栈顶部的值 GetMatrix 函数 //为了了适应GLShaderMananger的使⽤用，或者获取顶部矩阵的副本</span><br><span class="line">const M3DMatrix44f &amp; GLMatrixStack::GetMatrix(void);</span><br><span class="line">void GLMatrixStack::GetMatrix(M3DMatrix44f mMatrix);</span><br></pre></td></tr></table></figure><h3 id="八、压栈、出栈"><a href="#八、压栈、出栈" class="headerlink" title="八、压栈、出栈"></a>八、压栈、出栈</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">//将当前矩阵压⼊入堆栈</span><br><span class="line">void GLMatrixStack::PushMatrix(void);</span><br><span class="line">//将M3DMatrix44f 矩阵对象压⼊入当前矩阵堆栈</span><br><span class="line">void PushMatrix(const M3DMatrix44f mMatrix);</span><br><span class="line">//将GLFame 对象压⼊入矩阵对象</span><br><span class="line">void PushMatrix(GLFame &amp;frame);</span><br><span class="line">//出栈(出栈指的是移除顶部的矩阵对象) void GLMatrixStack::PopMatrix(void);</span><br></pre></td></tr></table></figure><h3 id="九、仿射变换-GLMastrixStack-内建了旋转-平移-缩放"><a href="#九、仿射变换-GLMastrixStack-内建了旋转-平移-缩放" class="headerlink" title="九、仿射变换 GLMastrixStack 内建了旋转\平移\缩放"></a>九、仿射变换 GLMastrixStack 内建了旋转\平移\缩放</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">//Rotate 函数angle参数是传递的度数，⽽而不不是弧度</span><br><span class="line">void MatrixStack::Rotate(GLfloat angle,GLfloat x,GLfloat</span><br><span class="line">y,GLfloat z);</span><br><span class="line">void MatrixStack::Translate(GLfloat x,GLfloat y,GLfloat z);</span><br><span class="line">void MatrixStack::Scale(GLfloat x,GLfloat y,GLfloat z);</span><br></pre></td></tr></table></figure><h3 id="十、使用照相机-和-角色帧-进行移动"><a href="#十、使用照相机-和-角色帧-进行移动" class="headerlink" title="十、使用照相机 和 角色帧 进行移动"></a>十、使用照相机 和 角色帧 进行移动</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">class GLFrame</span><br><span class="line">    &#123;</span><br><span class="line">protected:</span><br><span class="line">M3DVector3f vOrigin; // Where am I? M3DVector3f vForward; // Where am I going? M3DVector3f vUp; // Which way is up?</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="http://p7l9kf5i4.bkt.clouddn.com/2018-04-23-15244700886510.jpg-style01" alt=""></p><h3 id="十一、GLFrame"><a href="#十一、GLFrame" class="headerlink" title="十一、GLFrame"></a>十一、GLFrame</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">//将堆栈的顶部压⼊入任何矩阵</span><br><span class="line">void GLMatrixStack::LoadMatrix(GLFrame &amp;frame);</span><br><span class="line"></span><br><span class="line">//矩阵乘以矩阵堆栈顶部的矩阵。相乘结果存储在堆栈的顶部 </span><br><span class="line">void GLMatrixStack::MultMatrix(GLFrame &amp;frame);</span><br><span class="line"></span><br><span class="line">//将当前的矩阵压栈</span><br><span class="line">void GLMatrixStack::PushMatrix(GLFrame &amp;frame);</span><br></pre></td></tr></table></figure><h3 id="十二、照相机管理"><a href="#十二、照相机管理" class="headerlink" title="十二、照相机管理"></a>十二、照相机管理</h3><p><img src="http://p7l9kf5i4.bkt.clouddn.com/2018-04-23-15244701898614.jpg-style01" alt=""></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">//GLFrame函数，这个函数⽤用来检索条件适合的照相矩阵</span><br><span class="line">void GetCameraMatrix(M3DMatrix44f m,bool bRotationOnly = flase);</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;一、抗锯齿&quot;&gt;&lt;a href=&quot;#一、抗锯齿&quot; class=&quot;headerlink&quot; title=&quot;一、抗锯齿&quot;&gt;&lt;/a&gt;一、抗锯齿&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;混合的两大功能:颜⾊色组合、抗锯⻮齿&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;混合处理-抗锯齿&lt;/p&gt;
&lt;f
      
    
    </summary>
    
      <category term="OpenGL" scheme="http://yoursite.com/categories/OpenGL/"/>
    
    
      <category term="OpenGL" scheme="http://yoursite.com/tags/OpenGL/"/>
    
  </entry>
  
  <entry>
    <title>OpenGL学习 深度测试(三)</title>
    <link href="http://yoursite.com/2018/02/08/15244657893765/"/>
    <id>http://yoursite.com/2018/02/08/15244657893765/</id>
    <published>2018-02-08T14:43:09.000Z</published>
    <updated>2018-04-23T09:51:43.541Z</updated>
    
    <content type="html"><![CDATA[<h3 id="一、渲染过程是中可能产生的问题"><a href="#一、渲染过程是中可能产生的问题" class="headerlink" title="一、渲染过程是中可能产生的问题"></a>一、渲染过程是中可能产生的问题</h3><p><img src="http://p7l9kf5i4.bkt.clouddn.com/2018-04-23-15244658266117.jpg-style01" alt=""></p><p>解决办法：<br>1：油画法<br>2：正面、背面剔除。<br>3：深度测试。</p><h4 id="1-1、油画法"><a href="#1-1、油画法" class="headerlink" title="1.1、油画法"></a>1.1、油画法</h4><p><img src="http://p7l9kf5i4.bkt.clouddn.com/2018-04-23-15244659608381.jpg-style01" alt=""></p><blockquote><p>油画法：比较消耗性能，重复绘制了重叠部分，对于多个图形叠加在一起的，难以分辨哪个是最上层的，导致渲染混乱</p></blockquote><h4 id="1-2、正面背面剔除"><a href="#1-2、正面背面剔除" class="headerlink" title="1.2、正面背面剔除"></a>1.2、正面背面剔除</h4><p>可以调用下面两个方法开启或关闭表面剔除</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">glEnable(GL_CULL_FACE); //开启</span><br><span class="line">glDisable(GL_CULL_FACE); // 关闭</span><br></pre></td></tr></table></figure><p>该函数的原型如下<br><code>void glFrontFace(GLenum mode);</code></p><blockquote><p>mode 参数的可选的值有 GL_CW 和 GL_CCW （默认值是GL_CCW）</p></blockquote><blockquote><p>GL_CW 表示顶点的排列顺序是顺时针的面 是正面。<br>GL_CCW 表示顶点的排列顺序是逆时针的面是正面 （默认值）</p></blockquote><p><code>void glCullFace()</code></p><blockquote><p>GL_FRONT       // 正面剔除<br>GL_BACK         //  背面剔除<br>GL_FRONT_ANF_BACK 正面和反面都要剔除 </p></blockquote><h3 id="二、什么叫深度？"><a href="#二、什么叫深度？" class="headerlink" title="二、什么叫深度？"></a>二、什么叫深度？</h3><p><strong>所谓的深度，就在坐标系中，像素Z坐标距离观察者的距离<br>观察者，可以在任何位置，OpenGL会有专门有一块缓存区来存放Z值，深度缓冲区！<br>每个像素上的Z值。</strong></p><h3 id="三、深度缓冲去区的作用"><a href="#三、深度缓冲去区的作用" class="headerlink" title="三、深度缓冲去区的作用"></a>三、深度缓冲去区的作用</h3><p>一般情况下，我们绘制图形时，后面绘制的会覆盖前面的图形。一般绘制的顺序先后面再前面。<br>产生一个性能问题，就是遮盖部分，先绘制的会被覆盖，这没有任何意义的绘制。<br>深度测试就是用来解决这个问题的<br>它是如何处理的？<br>有了深度缓冲区之后，绘制的时候会检查Z,靠近观察者的覆盖。而不是靠绘制顺序来决定。</p><h3 id="四、如何使用深度缓冲区测试？"><a href="#四、如何使用深度缓冲区测试？" class="headerlink" title="四、如何使用深度缓冲区测试？"></a>四、如何使用深度缓冲区测试？</h3><p>为什么要测试？一旦开启之后就会先测试深度值再绘制</p><p><code>glEnable (GLDEPTHTEST);</code></p><blockquote><p>默认情况下Z值小的情况下会被覆盖<br>如果是观察者，在Z轴的正方向，Z值大的靠近观察者<br>如果是观察者，在Z轴的负方向，Z值小的靠近观察者</p></blockquote><h3 id="五、多边形模型"><a href="#五、多边形模型" class="headerlink" title="五、多边形模型"></a>五、多边形模型</h3><blockquote><p>使用<code>glPolygonMode(Glenum face,Glenum mode)</code> 函数来指定填充方式Face参数:GL_FRONT、GL_BACK、GL_FRONT_AND_BACKMode参数:GL_FILL(默认实心填充) 、GL_LINE、GL_POINT</p></blockquote><h3 id="六、多边形偏移"><a href="#六、多边形偏移" class="headerlink" title="六、多边形偏移"></a>六、多边形偏移</h3><p><strong>深度测试实现深度的过程中，可能产生的2种问题:<br>1、z-fighting(z冲突)<br>2、图形重叠(无法体现深度)</strong></p><h3 id="七、如何解决深度值相同，造成的冲突问题"><a href="#七、如何解决深度值相同，造成的冲突问题" class="headerlink" title="七、如何解决深度值相同，造成的冲突问题"></a>七、如何解决深度值相同，造成的冲突问题</h3><p><strong>第一种方法：</strong><br>在第二次绘制时，稍微偏移一点点解决这个问题。注意：必须非常小心确保Z值的间隙</p><p><strong>第二种方法：</strong><br>采样<code>glPolygonOffset</code> 函数。使得可以调节片段的深度值。使得深度之偏移而不产生悬浮</p><p><code>glPolygonOffset</code> 函数<br><code>void glPolygonOffset(Glfloat factor,Glfloat units);</code></p><blockquote><p>应用到片段上总偏移计算方程式:<br>Depth Offset = (DZ <em> factor) + (r </em> units);<br>DZ:深度值(Z值)r:使得深度缓冲区产生变化的最小值<br>负值，将使得z值距离我们更近，而正值，将使得z值距离我们更远，对于上节课的案例，我们设置factor和units设置为-1，0</p></blockquote><h3 id="八、裁剪"><a href="#八、裁剪" class="headerlink" title="八、裁剪"></a>八、裁剪</h3><p>在OpenGL 提高渲染的一种方式，只刷新屏幕上发生变化的部分。OpenGL 允许我们将要进行渲染的窗口只去指定一个裁剪框。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">//1 开启裁剪测试</span><br><span class="line">glEnable(GL_SCISSOR_TEST);</span><br><span class="line">//2.关闭裁剪测试</span><br><span class="line">glDisable(GL_SCISSOR_TEST);</span><br><span class="line">//3.指定裁剪窗口</span><br><span class="line">//x,y:指定裁剪框左下角位置;width,height:指定裁剪尺寸</span><br><span class="line">void glScissor(Glint x,Glint y,GLSize width,GLSize height);</span><br></pre></td></tr></table></figure><h3 id="九、混合"><a href="#九、混合" class="headerlink" title="九、混合"></a>九、混合</h3><p>我们把OpenGL 渲染时会把颜色值存在颜色缓存区中，每个片段的深度值也是放在深度缓冲区。当深度缓冲区被关闭时，新的颜色将简单的覆盖原来颜色缓存区存在的颜色值，当深度缓冲区再次打开时，新的颜色片段只是当它们比原来的值更接近邻近的裁剪平面才会替换原来的颜色片段。<br><code>glEnable(GL_BlEND);</code></p><h4 id="9-1-组合颜色"><a href="#9-1-组合颜色" class="headerlink" title="9.1 组合颜色"></a>9.1 组合颜色</h4><p>目标颜色:已经存储在颜色缓存区的颜色值<br>源颜色:作为当前渲染命令结果进入颜色缓存区的颜色值<br>当混合功能被启动时，源颜色和目标颜色的组合方式是混合方程式控制的。在默认情况下，混合方程式如下所示:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Cf = (Cs * S) + (Cd * D)</span><br><span class="line">Cf :最终计算参数的颜色</span><br><span class="line">Cs : 源颜色</span><br><span class="line">Cd :目标颜色</span><br><span class="line">S:源混合因子</span><br><span class="line">D:目标混合因子</span><br></pre></td></tr></table></figure><h4 id="9-2-设置混合因子"><a href="#9-2-设置混合因子" class="headerlink" title="9.2 设置混合因子"></a>9.2 设置混合因子</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">设置混合因子，需要用到glBlendFun函数</span><br><span class="line">glBlendFunc(GLenum S,GLenum D);</span><br><span class="line">S:源混合因子</span><br><span class="line">D:目标混合因子</span><br></pre></td></tr></table></figure><h4 id="9-3-混合因子枚举列表"><a href="#9-3-混合因子枚举列表" class="headerlink" title="9.3 混合因子枚举列表"></a>9.3 混合因子枚举列表</h4><p><img src="http://p7l9kf5i4.bkt.clouddn.com/2018-04-23-15244660140634.jpg-style01" alt=""></p><p>表中R、G、B、A 分别代表红、绿、蓝、alpha。<br>表中下标S、D，分别代表源、目标<br>表中C 代表常量颜色(默认黑色)</p><h4 id="9-4总结"><a href="#9-4总结" class="headerlink" title="9.4总结"></a>9.4总结</h4><p>最终颜色是以原先的红色(目标颜色)与 后来的蓝色(源颜色)进行组合。源颜色的alpha值越高，添加的蓝色颜色成分越高，目标颜色所保留的成分就会越少。<br>混合函数经常用于实现在其他一些不透明的物体前面绘制一个透明物体的效果</p><h3 id="十、改变组合方程式"><a href="#十、改变组合方程式" class="headerlink" title="十、改变组合方程式"></a>十、改变组合方程式</h3><p>默认混合方程式:<br><code>Cf = (CsS)+(CdD)</code><br>实际上远不止这一种混合方程式，我们可以从5个不同的方程式中进行选择</p><h4 id="10-1-改变混合方程式的函数-glBlendEquation"><a href="#10-1-改变混合方程式的函数-glBlendEquation" class="headerlink" title="10.1 改变混合方程式的函数 glBlendEquation()"></a>10.1 改变混合方程式的函数 glBlendEquation()</h4><p>选择混合方程式的函数:<br><code>glbBlendEquation(GLenum mode);</code></p><h4 id="10-2-glBlendFuncSeparate-函数"><a href="#10-2-glBlendFuncSeparate-函数" class="headerlink" title="10.2 glBlendFuncSeparate 函数"></a>10.2 glBlendFuncSeparate 函数</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">除了能使用glBlendFunc 来设置混合因子，还可以有更灵活的选择。</span><br><span class="line">strRGB: 源颜色的混合因子</span><br><span class="line">dstRGB: 目标颜色的混合因子</span><br><span class="line">strAlpha: 源颜色的Alpha因子</span><br><span class="line">dstAlpah: 目标颜色的Alpha因子</span><br><span class="line"></span><br><span class="line">void glBlendFuncSeparate(GLenum strRGB,GLenum dstRGB,GLenum strAlpha,GLenumdstAlpha);</span><br></pre></td></tr></table></figure><h4 id="10-3-glBlendFuncSeparate-注意"><a href="#10-3-glBlendFuncSeparate-注意" class="headerlink" title="10.3 glBlendFuncSeparate 注意"></a>10.3 glBlendFuncSeparate 注意</h4><blockquote><p>glBlendFunc 指定 源和目标 RGBA值的混合函数;但是glBlendFuncSeparate函数则允许为RGB 和 Alpha 成分单独指定混合函数。<br>在混合因子表中，GL_CONSTANT_COLOR,GL_ONE_MINUS_CONSTANT_COLOR,GL_CONSTANT_ALPHA,GL_ONE_MINUS_CONSTANT值允许混合方程式中引入一个常量混合颜色。</p></blockquote><h4 id="10-4-常量混合颜色"><a href="#10-4-常量混合颜色" class="headerlink" title="10.4 常量混合颜色"></a>10.4 常量混合颜色</h4><p>常量混合颜色，默认初始化为黑色(0.0f,0.0f,0.0f,0.0f)，但是还是可以修改这个常量混合颜色。<br><code>void glBlendColor(GLclampf red ,GLclampf green ,GLclampf blue ,GLclampf alpha );</code></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;一、渲染过程是中可能产生的问题&quot;&gt;&lt;a href=&quot;#一、渲染过程是中可能产生的问题&quot; class=&quot;headerlink&quot; title=&quot;一、渲染过程是中可能产生的问题&quot;&gt;&lt;/a&gt;一、渲染过程是中可能产生的问题&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;http://p
      
    
    </summary>
    
      <category term="OpenGL" scheme="http://yoursite.com/categories/OpenGL/"/>
    
    
      <category term="OpenGL" scheme="http://yoursite.com/tags/OpenGL/"/>
    
  </entry>
  
  <entry>
    <title>OpenGL学习 基础渲染(二)</title>
    <link href="http://yoursite.com/2018/02/07/15244572175577/"/>
    <id>http://yoursite.com/2018/02/07/15244572175577/</id>
    <published>2018-02-07T15:20:17.000Z</published>
    <updated>2018-04-23T09:52:02.517Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>在OpenGL 3.0之前，OpenGL 包含一个固定功能的管线，它可以在不使用着色器的情况下处理几何与像素数据。在3.1版本开始，固定管线从核心模式去掉。因此现在需要使用着色器来完成工作。<br>使 OpenGL 来说，我们会使 GLSL,(OpenGL Shading Langruage，它是在OpenGL 2.0版本发布的)。 语法与“C、C++”类似。</p></blockquote><h3 id="一、基础图形管线"><a href="#一、基础图形管线" class="headerlink" title="一、基础图形管线"></a>一、基础图形管线</h3><p>OpenGL 中图元只不过是顶点的集合以预定义的方式结合在一起。管线分为:2个部分，上半部分是客户机端，下半部分是服务器端。</p><p>客户端是存储在CPU存储 中的，并且在应用程序中执行 ，或者在主系统内存的驱动程序中执行。驱动程序会将渲染命令和数组组合起来，发送给服务执执 !(在一台典型的个人计算机上，服务器就是实际上就是图形加速卡上的硬件和内存)<br>服务器和 客户机在功能上也是异步的。 它们是各自独力的软件块或硬件块。我们是希望它们2个端都尽量在 不停的工作。客户端不断的把数据块和命令块组合在一起输送到缓冲区，然后缓冲区就会发送到服务器执 。</p><p>如果服务器停止工作等待客户机，或者客户机停止作来等待服务器做好接受更多的命令和准备，我们把这种情况成为管线停滞</p><p><img src="http://p7l9kf5i4.bkt.clouddn.com/2018-04-23-15244572931328.jpg-style01" alt=""></p><h3 id="二、着色器"><a href="#二、着色器" class="headerlink" title="二、着色器"></a>二、着色器</h3><p><strong>渲染过程，必备的两个着色器“顶点着色器”和“片元着色器”。</strong><br>上图的Vertex Shader(顶点着色器) 和 Fragment Shader(片元着色器)<br>着色器是使用GLSL编写的程序，看起来与C语言非常类似。 着色器必须从源代码中编译和链接在一起。最终准备就绪的着色器程序<br>顶点着色器 –&gt;处理从客户机输入的数据、应用变换、进行其他的类型的数学运算来计算关照效果、位移、颜 值等等。(**为了渲染共有3个顶点的三角形，顶点着色器将执 3次，也就是为 了每个顶点执一次)在目前的硬件上有多个执行单元同时运行 ，就意味着所有的3个顶点可以同时进行处理 !</p><p>图上(primitive Assembly 说明的是:3个顶点已经组合在一起， 三角形已经逐个片段的进行光栅化。每个片段通过执片元元着器，进行 填充。 元着器会输出我们将屏幕上看到的最终颜色值。</p><h3 id="三、3种向OpenGL着色器传递渲染数据的方法"><a href="#三、3种向OpenGL着色器传递渲染数据的方法" class="headerlink" title="三、3种向OpenGL着色器传递渲染数据的方法"></a>三、3种向OpenGL着色器传递渲染数据的方法</h3><ul><li>属性</li><li>Uniform</li><li>纹理<h4 id="3-1-属性"><a href="#3-1-属性" class="headerlink" title="3.1 属性"></a>3.1 属性</h4></li></ul><p><strong>属性：就是对一个顶点都要作改变的数据元素。实际上，顶点位置本身就是一个属性。属性可以是浮点类型、整型、布尔类型。</strong></p><p><strong>属性总是以四维向 的形式进行内部存储的，即使我们不会使用所有的4个分量。</strong>一个顶点位置可能存储(x,y,z)，将占有4个分量中的3个。<br>实际上如果是在平面情况下:只要在xy平面上就能绘制，那么Z分量就会自动设置为0;<br>属性还可以是:纹理坐标、颜色值、关照计算表面法线<br>在顶点程序(shader渲染)可以代表你想要的任何意义。因为都是你设定的。<br>属性会从本地客户机内存中复制存储在图形硬件中的一个缓冲区上。这些属性只提供给顶点着 使 ，对于 元着 有太 意义。<br>声明:这些属性对每个顶点都要做改变，但并不意味着它们的值不能重复。通常情况下，它们都是 不一样样的，但有可能整个数组都是同一值的情况。</p><h4 id="3-2-Uniform"><a href="#3-2-Uniform" class="headerlink" title="3.2 Uniform"></a>3.2 Uniform</h4><p><strong>属性是 种对整个批次属性都取统一值的单一值，它是不变的。</strong></p><p><strong>通过设置uniform变量就紧接着发送一个图元批次命令</strong>。Uniform变量实际上可以无限次限制地使用，设置一个应用于整个表面的单个颜色值，还可以设置一个时间值。在每次渲染某种类型的顶点动画时修改它。<br>注意:这 的uniform 变量每个批次改变一次，而不是每个顶点改变一次。<br>uniform变量最常见的应该是在顶点渲染中设置变换矩阵<br>与属性相同点:可以是浮点值、整数、布尔值<br>与属性不同点:顶点着色器和片元着色器都可以用 uniform变量 。uniform 变量还可以是标量类型、 矢量类型、uniform矩阵。</p><h4 id="3-3-纹理"><a href="#3-3-纹理" class="headerlink" title="3.3 纹理"></a>3.3 纹理</h4><p><strong>传递给着器的第三种数据类型:纹理数据</strong></p><p><strong>在顶点着色器、 片段着色器中都可以对纹理数据进行采样和筛选。</strong><br>典型的应用场景: 片段着色器对一个纹理值进行采样，然后在一个三角形表面应用渲染纹理数据。<br>纹理数据， 不仅仅表现在图形，很多图形文件格式都是以无符号字节(每个颜色通道8位)形式对颜分量进行存储的。</p><h4 id="3-4-输出"><a href="#3-4-输出" class="headerlink" title="3.4 输出"></a>3.4 输出</h4><p>输出数据：简单的从一个阶段传递到下一个阶段。<br>客户端的代码接触不到这些内部变量。我们的OpenGL开发暂时接触不到！</p><h3 id="四、创建坐标系"><a href="#四、创建坐标系" class="headerlink" title="四、创建坐标系"></a>四、创建坐标系</h3><h4 id="4-1-正投影"><a href="#4-1-正投影" class="headerlink" title="4.1 正投影"></a>4.1 正投影</h4><p><img src="http://p7l9kf5i4.bkt.clouddn.com/2018-04-23-15244573118476.jpg-style01" alt=""></p><p>这就是一个正投影的 例子，在所在3个轴(X,Y,Z)中，它们的范围都是从-100到+100。这个视景体将包括所有的 几何图形。<br>如果你指定 了视景体外的几何图形，就会被裁减掉!(它将沿着视景体的边界进行剪切)在正投影中，所有在这个空间范围内的所有东西都将被呈现在屏幕上。 存在照相机或视点坐标系的概念。</p><h4 id="4-2透视投影"><a href="#4-2透视投影" class="headerlink" title="4.2透视投影"></a>4.2透视投影</h4><p><code>setPerspective(float ffov,float fAspect,float fNear,float fFar)</code><br><img src="http://p7l9kf5i4.bkt.clouddn.com/2018-04-23-15244573321853.jpg-style01" alt=""></p><p>透视投影会进行透视除法对距离观察者很远的对象进行缩短和收缩。在投影到屏幕之后，视景体背面与视景体正面的宽度测量标准不同。<br>上图所示:平截头体(frustum)的 何体，它的观察方向是从金字塔的尖端到宽阔端。观察者的视点与金字塔的尖端拉开一定距离。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">GLFrustum类通过setPerspective  法为我们构建一个平截头体。</span><br><span class="line">参数:</span><br><span class="line">fFov:垂直方向上的视场角度</span><br><span class="line">fAspect:窗口的宽度与高度的纵横 </span><br><span class="line">fNear:近裁剪面距离</span><br><span class="line">fFar:远裁剪面距离</span><br><span class="line">纵横  = 宽(w)/ (h)</span><br><span class="line"></span><br><span class="line">CLFrustum::SetPerspective(float fFov,float fAspect,float fNear,float fFar);</span><br></pre></td></tr></table></figure><h3 id="五、使用存储着色器"><a href="#五、使用存储着色器" class="headerlink" title="五、使用存储着色器"></a>五、使用存储着色器</h3><h4 id="5-1、使用背景"><a href="#5-1、使用背景" class="headerlink" title="5.1、使用背景"></a>5.1、使用背景</h4><h4 id="5-2存储着色器的使用"><a href="#5-2存储着色器的使用" class="headerlink" title="5.2存储着色器的使用"></a>5.2存储着色器的使用</h4><ul><li>单位着色器</li><li>平面着色器</li><li>上色着色器</li><li>默认光源着色器</li><li>点光源着色器</li><li>纹理替换矩阵</li><li>纹理调整着色器</li><li>纹理光源着色器</li></ul><h4 id="5-3-GLShaderManager-的初始化"><a href="#5-3-GLShaderManager-的初始化" class="headerlink" title="5.3 GLShaderManager 的初始化"></a>5.3 GLShaderManager 的初始化</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">// 定义着色器</span><br><span class="line">GLShaderMananger shaderManager;</span><br><span class="line"></span><br><span class="line">// 初始化着色器</span><br><span class="line">shaderManager.IntalizeStockShaders()</span><br><span class="line"></span><br><span class="line">//使用</span><br><span class="line">shaderManager userStockManager(参数列表)</span><br></pre></td></tr></table></figure><h4 id="5-4-GLShaderManager-属性"><a href="#5-4-GLShaderManager-属性" class="headerlink" title="5.4 GLShaderManager 属性"></a>5.4 GLShaderManager 属性</h4><p><img src="http://p7l9kf5i4.bkt.clouddn.com/2018-04-23-15244573506921.jpg-style01" alt=""></p><p>存储着色器为每一个变量都使用一致的内部变量命名规则和相同的属性槽，以上就是存储着色器的属性列表。</p><h4 id="5-5-GLShanderManager-的-uniform值"><a href="#5-5-GLShanderManager-的-uniform值" class="headerlink" title="5.5 GLShanderManager 的 uniform值"></a>5.5 GLShanderManager 的 uniform值</h4><p>一般情况，要对几何图形进行渲染，我们需要给对象递交属性矩阵， 先要绑定我们想要使用的着色器程序上，并提供程序的uniform值。但是<code>GLShanderManager</code> 类可以暂时为我们完成工作。<br><code>useStockShader</code> 函数会选择一个存储着色器并提供这个着色器的uniform值。</p><p><strong>单位着色器</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">//单位着色器:只是简单地使用默认笛卡尔坐标系(坐标范围(-1.0，1.0))。所有的片段都应用同一种颜色 ，几何图形为心和未渲染的。</span><br><span class="line">//需要设置存储着色器一个属性: GLT_ATTRIBUTE_VERTEX(顶点分量)</span><br><span class="line">//参数2:vColor[4],你需要的颜色</span><br><span class="line"></span><br><span class="line">GLShaderManager::UserStockShader(GLT_ATTRIBUTE_VERTEX,GLfloat vColor[4]);</span><br></pre></td></tr></table></figure><p><strong>平面着色器</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">//参数1:平面着色器 </span><br><span class="line">//参数2:允许变化的4*4矩阵</span><br><span class="line">//参数3:颜色</span><br><span class="line">//它将统一着色器进行了拓展。允许为几何图形变换指定一个 4 * 4 变换矩阵。经常被称为“模型视图投影矩阵”</span><br><span class="line"></span><br><span class="line">GLShaderManager::UserStockShader(GLT_SHADER_FLAT,GLfloat mvp[16],GLfloat vColor[4]);</span><br></pre></td></tr></table></figure><p><strong>上色着器</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">//在几何图形中应用的变换矩阵。</span><br><span class="line">//需要设置存储着色器的 GLT_ATTRIBUTE_VERTEX(顶点分量 ) 和GLT_ATTRIBUTE_COLOR(颜色分量 ) 2个属性。颜色值将被平滑地插入顶点之间(平滑着色 )</span><br><span class="line"></span><br><span class="line">GLShaderManager::UserStockShader(GLT_SHADER_SHADED,GLfloat mvp[16]);</span><br></pre></td></tr></table></figure><p><strong>默认光源着色器</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">//参数1:默认光源着色器  </span><br><span class="line">//参数2:模型视图矩阵</span><br><span class="line">//参数3:投影矩阵</span><br><span class="line">//参数4:颜 值</span><br><span class="line">//这种着色器，是对象产 阴影和关照的效果。需要设置存储着色器的 GLT_ATTRIBUTE_VERTEX(顶点分量) 和GLT_ATTRIBUTE_NORMAL(表面法线)</span><br><span class="line"></span><br><span class="line">GLShaderManager::UserStockShader(GLT_SHADER_DEFAULT_LIGHT,GLfloat mvMatrix[16],GLfloatpMatrix[16],GLfloat vColor[4]);</span><br></pre></td></tr></table></figure><p><strong>点光源着色器</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">//参数1:点光源着色器</span><br><span class="line">//参数2:模型视图矩阵</span><br><span class="line">//参数3:投影矩阵</span><br><span class="line">//参数4:视点坐标光源位置</span><br><span class="line">//参数5:颜色值</span><br><span class="line">//点光源着色器和默认光源着色器很相似，区别在于:光源位置是特定的。同样需要设置存储着色器的 GLT_ATTRIBUTE_VERTEX(顶点分量) 和GLT_ATTRIBUTE_NORMAL(表面法线)</span><br><span class="line"></span><br><span class="line">GLShaderManager::UserStockShader(GLT_SHADER_DEFAULT_LIGHT_DIEF,GLfloatmvMatrix[16],GLfloat pMatrix[16],GLfloat vLightPos[3],GLfloat vColor[4]);</span><br></pre></td></tr></table></figure><p><strong>纹理替换矩阵着色器</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">//着色器通过给定的模型视图投影矩阵，使用绑定到 nTextureUnit (纹 单元) 指定纹理单元的纹理对几何图形进行变化。 段颜 :是直接从纹理样本中直接获取的。</span><br><span class="line">//需要设置存储着色器的 GLT_ATTRIBUTE_VERTEX(顶点分量) 和 GLT_ATTRIBUTE_NORMAL(表面法线)</span><br><span class="line"></span><br><span class="line">GLShaderManager::UserStockShader(GLT_SHADER_TEXTURE_REPLACE,GLfloat mvMatrix[16],GLintnTextureUnit);</span><br></pre></td></tr></table></figure><p><strong>纹理调整着色器</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">//将一个基本色乘以一个取自纹理单元 nTextureUnit 的纹 。需要设置存储着色器的 GLT_ATTRIBUTE_VERTEX(顶点分量) 和 GLT_ATTRIBUTE_TEXTURE0(纹理坐标)</span><br><span class="line"></span><br><span class="line">GLShaderManager::UserStockShader(GLT_SHADER_TEXTURE_MODULATE,GLfloatmvMatrix[16],GLfloat vColor[4],GLint nTextureUnit);</span><br></pre></td></tr></table></figure><p><strong>纹理光源着色器</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">//参数1:纹理光源着色器 </span><br><span class="line">//参数2:投影矩阵</span><br><span class="line">//参数3:视觉空间中的光源位置</span><br><span class="line">//参数4: 何图形的基本色</span><br><span class="line">//参数5:将要使用的纹理单元</span><br><span class="line">//将一个纹理通过漫反射照明计算机进行调整(相乘)。光线在视觉空间中的位置是给定的。</span><br><span class="line">//需要设置存储着色器的 GLT_ATTRIBUTE_VERTEX(顶点分量) 和 GLT_ATTRIBUTE_TEXTURE0(纹理坐标)、GLT_ATTRIBUTE_NORMAL(表面法线)</span><br><span class="line"></span><br><span class="line">GLShaderManager::UserStockShader(GLT_SHADER_TEXTURE_POINT_LIGHT_DIEF,GLfloatmvMatrix[16],GLfloat pMatrix[16],GLfloat vLightPos[3],GLfloat vBaseColor[4],GLint nTextureUnit);</span><br></pre></td></tr></table></figure><h3 id="六、OpenGL图元"><a href="#六、OpenGL图元" class="headerlink" title="六、OpenGL图元"></a>六、OpenGL图元</h3><ul><li>点</li><li>线</li><li>线带</li><li>线环</li><li>三角形</li><li>三角形金字塔</li><li>三角形带</li><li>三角形扇</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">//修改点的大小</span><br><span class="line">glPointSize(4.0f);</span><br><span class="line">//设置点的大小范围，点和点之间的距离</span><br><span class="line">GLfloat sizes[2] = &#123;2.0f,4.0f&#125;;</span><br><span class="line">GLfloat stepSize = 1.0f;</span><br><span class="line">//获取点的大小范围和步长glGetFloatv(GL_POINT_SIZE_RANGE,sizes);</span><br><span class="line">glGetFloatv(GL_POINT_GRAULRITY,&amp;stepSize);</span><br><span class="line">//3.通过使用程序点大小模式设置点大小</span><br><span class="line">glEnable(GL_PROGAM_POINT_SIZE);</span><br><span class="line">//GLSL程序</span><br><span class="line">gl_PointSize = 5.0f;</span><br></pre></td></tr></table></figure><h3 id="七、GLBatch容器-帮助类"><a href="#七、GLBatch容器-帮助类" class="headerlink" title="七、GLBatch容器(帮助类)"></a>七、GLBatch容器(帮助类)</h3><p><img src="http://p7l9kf5i4.bkt.clouddn.com/2018-04-23-15244573753588.jpg-style01" alt=""></p><p><img src="http://p7l9kf5i4.bkt.clouddn.com/2018-04-23-15244573813628.jpg-style01" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;在OpenGL 3.0之前，OpenGL 包含一个固定功能的管线，它可以在不使用着色器的情况下处理几何与像素数据。在3.1版本开始，固定管线从核心模式去掉。因此现在需要使用着色器来完成工作。&lt;br&gt;使 OpenGL 来说，我们会使 GLSL,(Op
      
    
    </summary>
    
      <category term="OpenGL" scheme="http://yoursite.com/categories/OpenGL/"/>
    
    
      <category term="OpenGL" scheme="http://yoursite.com/tags/OpenGL/"/>
    
  </entry>
  
  <entry>
    <title>OpenGL学习 在Mac上搭建OpenGL环境(一)</title>
    <link href="http://yoursite.com/2018/02/05/15244567239248/"/>
    <id>http://yoursite.com/2018/02/05/15244567239248/</id>
    <published>2018-02-05T15:12:43.000Z</published>
    <updated>2018-04-23T09:52:22.133Z</updated>
    
    <content type="html"><![CDATA[<p>一、准备资源</p><ol><li>CLTools</li><li>glew</li><li>libGLTools.a</li><li>百度云盘资源地址：链接: <a href="https://pan.baidu.com/s/1ebesf8" target="_blank" rel="noopener">https://pan.baidu.com/s/1ebesf8</a> 密码: g99g</li></ol><p>二、现在开始配置 openGL 环境</p><p>1、打开Xcode -&gt; macOS -&gt; Cocoa Application</p><p><img src="http://p7l9kf5i4.bkt.clouddn.com/2018-04-23-15244560096062.jpg-style01" alt=""></p><p>2、选中Build Phases, 选择 Link Binary With Libraries ,点击 +  搜索添加 OpenGl.framework 和 GLUT.framework 两个系统库.</p><p><img src="http://p7l9kf5i4.bkt.clouddn.com/2018-04-23-15244567872134.jpg-style01" alt=""></p><p>3、把下载好的 include 和 libGLTools.a 拖入到项目里面，选中 Copy item if needed 和 Create groups<br><img src="http://p7l9kf5i4.bkt.clouddn.com/2018-04-23-15244560540915.jpg-style01" alt=""></p><p><img src="http://p7l9kf5i4.bkt.clouddn.com/2018-04-23-15244560749630.jpg-style01" alt=""></p><p>4、然后点击 Build Settings, 选则All ，找到 Header Search Paths, 把你拖到项目里的 include 文件夹路径 拖到里面。<br>把libGLTools.a 文件拖到Framework 里面<br><img src="http://p7l9kf5i4.bkt.clouddn.com/2018-04-23-15244560944363.jpg-style01" alt=""></p><p>5、接着把 AppDelegate.h, AppDelegate.m,ViewController.h,ViewControllers.m 文件删除掉<br><img src="http://p7l9kf5i4.bkt.clouddn.com/2018-04-23-15244561074509.jpg-style01" alt=""><br>OpenGL006.jpeg</p><p>6、添加新的文件，选择 C++ File ,Name 设置为main，并且不要勾选下面的 also create a header file,点击Next ,生成main.cpp文件<br><img src="http://p7l9kf5i4.bkt.clouddn.com/2018-04-23-15244561195444.jpg-style01" alt=""><br><img src="http://p7l9kf5i4.bkt.clouddn.com/2018-04-23-15244561298591.jpg-style01" alt=""></p><p>7、然后把main.m 文件删除掉。<br><img src="http://p7l9kf5i4.bkt.clouddn.com/2018-04-23-15244561437251.jpg-style01" alt=""></p><p>8、把下面的代码复制到 main.cpp 里面，然后把项目跑起来 Run B<img src="http://p7l9kf5i4.bkt.clouddn.com/2018-04-23-15244561563956.jpg-style01" alt=""><br>OpenGL010.jpeg</p><p>三、注意事项与报错处理</p><p>如果报下面的错误<br>ld: library not found for -lGLTools<br>clang: error: linker command failed with exit code 1 (use -v to see invocation)<br><img src="http://p7l9kf5i4.bkt.clouddn.com/2018-04-23-15244561673939.jpg-style01" alt=""></p><p>选择General 下面 的林科大Frameworks and Libraries<br>选中 libGLTools.a 点击下面的 一 删除掉，然后点击 + , 选择 Add Other,然后找到你项目里面的 libGLTools.a，选中并点击 open，重新 Run Build 就好了。<br><img src="http://p7l9kf5i4.bkt.clouddn.com/2018-04-23-15244561986179.jpg-style01" alt=""><br><img src="http://p7l9kf5i4.bkt.clouddn.com/2018-04-23-15244562088552.jpg-style01" alt=""><br><img src="http://p7l9kf5i4.bkt.clouddn.com/2018-04-23-15244562198692.jpg-style01" alt=""></p><p>注意 ：新建的main.cpp 文件里面 必须要有 main 函数，不然直接build 会报错</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;一、准备资源&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;CLTools&lt;/li&gt;
&lt;li&gt;glew&lt;/li&gt;
&lt;li&gt;libGLTools.a&lt;/li&gt;
&lt;li&gt;百度云盘资源地址：链接: &lt;a href=&quot;https://pan.baidu.com/s/1ebesf8&quot; target=&quot;_
      
    
    </summary>
    
      <category term="OpenGL" scheme="http://yoursite.com/categories/OpenGL/"/>
    
    
      <category term="OpenGL" scheme="http://yoursite.com/tags/OpenGL/"/>
    
  </entry>
  
  <entry>
    <title>iOS 开发 CADisplayLink 定时器的了解与使用</title>
    <link href="http://yoursite.com/2017/09/19/iOS%E5%BC%80%E5%8F%91CADisplayLink-%E5%AE%9A%E6%97%B6%E5%99%A8%E7%9A%84%E4%BA%86%E8%A7%A3%E4%B8%8E%E4%BD%BF%E7%94%A8/"/>
    <id>http://yoursite.com/2017/09/19/iOS开发CADisplayLink-定时器的了解与使用/</id>
    <published>2017-09-19T13:28:05.000Z</published>
    <updated>2018-04-23T10:10:02.198Z</updated>
    
    <content type="html"><![CDATA[<h3 id="一、简介"><a href="#一、简介" class="headerlink" title="一、简介"></a>一、简介</h3><h4 id="1、所在框架"><a href="#1、所在框架" class="headerlink" title="1、所在框架"></a>1、所在框架</h4><p><code>CADisplayLink</code>和其它<code>CoreAnimation</code>类一样，都是在QuartzCore.framework里。</p><p><strong>1.1什么是<code>CADisplayLink</code>?</strong></p><p><strong><code>CADisplayLink</code>是一个能让我们以和屏幕刷新率相同的频率将内容画到屏幕上的定时器。我们在应用中创建一个新的 <code>CADisplayLink</code> 对象，把它添加到一个runloop中，并给它提供一个 target 和selector 在屏幕刷新的时候调用。</strong></p><p>一但 <code>CADisplayLink</code> 以特定的模式注册到runloop之后，每当屏幕需要刷新的时候，runloop就会调用<code>CADisplayLink</code>绑定的target上的selector，这时target可以读到 <code>CADisplayLink</code> 的每次调用的时间戳，用来准备下一帧显示需要的数据。例如一个视频应用使用时间戳来计算下一帧要显示的视频数据。在UI做动画的过程中，需要通过时间戳来计算UI对象在动画的下一帧要更新的大小等等。</p><p>在添加进runloop的时候我们应该选用高一些的优先级，来保证动画的平滑。可以设想一下，我们在动画的过程中，runloop被添加进来了一个高优先级的任务，那么，下一次的调用就会被暂停转而先去执行高优先级的任务，然后在接着执行<code>CADisplayLink</code>的调用，从而造成动画过程的卡顿，使动画不流畅。</p><p><code>duration</code>属性提供了每帧之间的时间，也就是屏幕每次刷新之间的的时间。我们可以使用这个时间来计算出下一帧要显示的UI的数值。但是 <code>duration</code>只是个大概的时间，如果CPU忙于其它计算，就没法保证以相同的频率执行屏幕的绘制操作，这样会跳过几次调用回调方法的机会。<br><code>frameInterval</code>属性是可读可写的NSInteger型值，标识间隔多少帧调用一次selector 方法，默认值是1，即每帧都调用一次。如果每帧都调用一次的话，对于iOS设备来说那刷新频率就是60HZ也就是每秒60次，如果将 frameInterval 设为2 那么就会两帧调用一次，也就是变成了每秒刷新30次。</p><p>我们通过pause属性开控制<code>CADisplayLink</code>的运行。当我们想结束一个<code>CADisplayLink</code>的时候，应该调用-(void)invalidate<br>从runloop中删除并删除之前绑定的 target跟selector<br>另外<code>CADisplayLink</code> 不能被继承。</p><h4 id="2、功能"><a href="#2、功能" class="headerlink" title="2、功能"></a>2、功能</h4><p><code>CADisplayLink</code>最主要的特征是能提供一个周期性的调用我们赋给它的selector的机制，从这点上看它很像定时器NSTimer。</p><h4 id="3、使用方式"><a href="#3、使用方式" class="headerlink" title="3、使用方式"></a>3、使用方式</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">- (void)startDisplayLink  </span><br><span class="line">&#123;  </span><br><span class="line">    self.displayLink = [`CADisplayLink`     displayLinkWithTarget:self selector:@selector(handleDisplayLink:)];  </span><br><span class="line">    [self.displayLink addToRunLoop:[NSRunLoop currentRunLoop] forMode:NSDefaultRunLoopMode];  </span><br><span class="line">&#125;  </span><br><span class="line"></span><br><span class="line">- (void)handleDisplayLink:(`CADisplayLink` *)displayLink  </span><br><span class="line">&#123;  </span><br><span class="line">      //do something  </span><br><span class="line">&#125;  </span><br><span class="line"></span><br><span class="line">- (void)stopDisplayLink  </span><br><span class="line">&#123;  </span><br><span class="line">    [self.displayLink invalidate];  </span><br><span class="line">    self.displayLink = nil;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当把<code>CADisplayLink</code>对象add到runloop中后，selector就能被周期性调用，类似于NSTimer被启动了；执行invalidate操作时，<code>CADisplayLink</code>对象就会从runloop中移除，selector调用也随即停止，类似于NSTimer的invalidate方法。</p><p><code>CADisplayLink</code> 与 NSTimer 有什么不同</p><p>iOS设备的屏幕刷新频率是固定的，<code>CADisplayLink</code>在正常情况下会在每次刷新结束都被调用，精确度相当高。<br>NSTimer的精确度就显得低了点，比如NSTimer的触发时间到的时候，runloop如果在阻塞状态，触发时间就会推迟到下一个runloop周期。并且 NSTimer新增了tolerance属性，让用户可以设置可以容忍的触发的时间的延迟范围。<br><code>CADisplayLink</code>使用场合相对专一，适合做UI的不停重绘，比如自定义动画引擎或者视频播放的渲染。NSTimer的使用范围要广泛的多，各种需要单次或者循环定时处理的任务都可以使用。在UI相关的动画或者显示内容使用 <code>CADisplayLink</code>比起用NSTimer的好处就是我们不需要在格外关心屏幕的刷新频率了，因为它本身就是跟屏幕刷新同步的。</p><h3 id="二、特性"><a href="#二、特性" class="headerlink" title="二、特性"></a>二、特性</h3><p>下面结合<code>NSTimer</code>来介绍<code>CADisplayLink</code>，与NSTimer不同的地方有：</p><h4 id="1、原理不同"><a href="#1、原理不同" class="headerlink" title="1、原理不同"></a>1、原理不同</h4><p><code>CADisplayLink</code>是一个能让我们以和屏幕刷新率同步的频率将特定的内容画到屏幕上的定时器类。<code>CADisplayLink</code>以特定模式注册到runloop后，每当屏幕显示内容刷新结束的时候，runloop就会向<code>CADisplayLink</code>指定的target发送一次指定的selector消息， <code>CADisplayLink</code>类对应的selector就会被调用一次。<br>NSTimer以指定的模式注册到runloop后，每当设定的周期时间到达后，runloop会向指定的target发送一次指定的selector消息。</p><h4 id="2、周期设置方式不同"><a href="#2、周期设置方式不同" class="headerlink" title="2、周期设置方式不同"></a>2、周期设置方式不同</h4><p>iOS设备的屏幕刷新频率(FPS)是60Hz，因此<code>CADisplayLink</code>的selector默认调用周期是每秒60次，这个周期可以通过frameInterval属性设置，<code>CADisplayLink</code>的selector每秒调用次数=60/frameInterval。比如当frameInterval设为2，每秒调用就变成30次。因此，<code>CADisplayLink</code>周期的设置方式略显不便。<br>NSTimer的selector调用周期可以在初始化时直接设定，相对就灵活的多。</p><h4 id="3、精确度不同"><a href="#3、精确度不同" class="headerlink" title="3、精确度不同"></a>3、精确度不同</h4><p>iOS设备的屏幕刷新频率是固定的，<code>CADisplayLink</code>在正常情况下会在每次刷新结束都被调用，精确度相当高。<br>NSTimer的精确度就显得低了点，比如<code>NSTimer</code>的触发时间到的时候，runloop如果在忙于别的调用，触发时间就会推迟到下一个runloop周期。更有甚者，在OS X v10.9以后为了尽量避免在<code>NSTimer</code>触发时间到了而去中断当前处理的任务，NSTimer新增了tolerance属性，让用户可以设置可以容忍的触发的时间范围。</p><h4 id="4、使用场合"><a href="#4、使用场合" class="headerlink" title="4、使用场合"></a>4、使用场合</h4><p>从原理上不难看出，<code>CADisplayLink</code>使用场合相对专一，适合做界面的不停重绘，比如视频播放的时候需要不停地获取下一帧用于界面渲染。<br>NSTimer的使用范围要广泛的多，各种需要单次或者循环定时处理的任务都可以使用。</p><h3 id="三、重要属性"><a href="#三、重要属性" class="headerlink" title="三、重要属性"></a>三、重要属性</h3><p>下面不完整的列出了<code>CADisplayLink</code>的几个重要属性：</p><h4 id="1、frameInterval"><a href="#1、frameInterval" class="headerlink" title="1、frameInterval"></a>1、frameInterval</h4><p>可读可写的<code>NSInteger</code>型值，标识间隔多少帧调用一次<code>selector</code>方法，默认值是1，即每帧都调用一次。官方文档中强调，当该值被设定小于1时，结果是不可预知的。</p><h4 id="2、duration"><a href="#2、duration" class="headerlink" title="2、duration"></a>2、duration</h4><p>只读的<code>CFTimeInterval</code>值，表示两次屏幕刷新之间的时间间隔。需要注意的是，该属性在<code>target</code>的<code>selector</code>被首次调用以后才会被赋值。<code>selector</code>的调用间隔时间计算方式是：时间=duration×frameInterval。<br>现存的iOS设备屏幕的FPS都是60Hz，这一点可以从<code>CADisplayLink</code>的<code>duration</code>属性看出来。duration的值都是0.166666…，即1/60。尽管如此，我们并没法确定苹果不会改变FPS，如果以后某一天将FPS提升到了120Hz了怎么办呢？这时，你设置了<code>frameInterval</code>属性值为2期望每秒刷新30次，却发现每秒刷新了60次，结果可想而知，出于安全考虑，还是先根据<code>duration</code>判断屏幕的FPS再去使用<code>CADisplayLink</code>。</p><h4 id="3、timestamp"><a href="#3、timestamp" class="headerlink" title="3、timestamp"></a>3、timestamp</h4><p>只读的<code>CFTimeInterval</code>值，表示屏幕显示的上一帧的时间戳，这个属性通常被target用来计算下一帧中应该显示的内容。</p><p>虽然名为时间戳，但这和常见的unix时间戳差异很大，事实上这是<code>CoreAnimation</code>使用的时间格式。每个CALayer都有一个本地时间（CALayer本地时间的具体作用会在后续文章中说明），可以获取当前CALayer的本地时间并打印：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">CFTimeInterval localLayerTime = [myLayer convertTime:CACurrentMediaTime() fromLayer:nil];  </span><br><span class="line">NSLog(@&quot;localLayerTime:%f&quot;,localLayerTime);</span><br></pre></td></tr></table></figure><h3 id="四、注意"><a href="#四、注意" class="headerlink" title="四、注意"></a>四、注意</h3><p>iOS并不能保证能以每秒60次的频率调用回调方法，这取决于：</p><h4 id="1、CPU的空闲程度"><a href="#1、CPU的空闲程度" class="headerlink" title="1、CPU的空闲程度"></a>1、CPU的空闲程度</h4><p>如果CPU忙于其它计算，就没法保证以60HZ执行屏幕的绘制动作，导致跳过若干次调用回调方法的机会，跳过次数取决CPU的忙碌程度。</p><h4 id="2、执行回调方法所用的时间"><a href="#2、执行回调方法所用的时间" class="headerlink" title="2、执行回调方法所用的时间"></a>2、执行回调方法所用的时间</h4><p>如果执行回调时间大于重绘每帧的间隔时间，就会导致跳过若干次回调调用机会，这取决于执行时间长短。</p><h4 id="3-通常来讲"><a href="#3-通常来讲" class="headerlink" title="3.通常来讲"></a>3.通常来讲</h4><p>iOS设备的刷新频率事60HZ也就是每秒60次。那么每一次刷新的时间就是1/60秒 大概16.7毫秒。当我们的<code>frameInterval</code>值为1的时候我们需要保证的是 <code>CADisplayLink</code>调用的｀target｀的函数计算时间不应该大于 16.7否则就会出现严重的丢帧现象。</p><h3 id="五、参考文档"><a href="#五、参考文档" class="headerlink" title="五、参考文档"></a>五、参考文档</h3><h5 id="1、官方文档"><a href="#1、官方文档" class="headerlink" title="1、官方文档"></a>1、官方文档</h5><h5 id="2、官方使用CADisplayLink播放视频的例子"><a href="#2、官方使用CADisplayLink播放视频的例子" class="headerlink" title="2、官方使用CADisplayLink播放视频的例子"></a>2、官方使用<code>CADisplayLink</code>播放视频的例子</h5>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;一、简介&quot;&gt;&lt;a href=&quot;#一、简介&quot; class=&quot;headerlink&quot; title=&quot;一、简介&quot;&gt;&lt;/a&gt;一、简介&lt;/h3&gt;&lt;h4 id=&quot;1、所在框架&quot;&gt;&lt;a href=&quot;#1、所在框架&quot; class=&quot;headerlink&quot; title=&quot;1、所在框
      
    
    </summary>
    
      <category term="iOS 开发" scheme="http://yoursite.com/categories/iOS-%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="iOS 开发" scheme="http://yoursite.com/tags/iOS-%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>FMDB 数据库简单基本操作</title>
    <link href="http://yoursite.com/2017/06/27/FMDB-%E6%95%B0%E6%8D%AE%E5%BA%93%E7%AE%80%E5%8D%95%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/"/>
    <id>http://yoursite.com/2017/06/27/FMDB-数据库简单基本操作/</id>
    <published>2017-06-27T14:52:43.000Z</published>
    <updated>2018-04-23T10:11:01.783Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">1.创建表: create table if not exists 表名 (字段名1, 字段名2…); 例如：创建 t_student 表 id（id自增长）</span><br><span class="line"></span><br><span class="line">create table if not exists t_student (id integer primary key autoincrement, name text not null, age integer)</span><br><span class="line">2.增加数据: insert into 表名 (字段名1, 字段名2, …) values(字段1的值, 字段2的值, …); 例如：在 t_student 表插入name，age字段</span><br><span class="line"></span><br><span class="line">insert into t_student (name,age) values (@”Jack”,@17);</span><br><span class="line">3.1根据条件删除数据： delete from 表名 where 条件; 例如：</span><br><span class="line">删除 t_student 表中 name 字段为 Jack 的数据</span><br><span class="line"></span><br><span class="line">delete from t_student where name = @”Jack”;</span><br><span class="line">3.2删除表中所有的数据： delete from 表名； 例如：</span><br><span class="line"></span><br><span class="line">delete from t_student;</span><br><span class="line">4.根据条件更改某个数据 update 表名 set 字段1 = ‘值1’, 字段2 = ‘值2’ where 字段1 = ‘字段1的当前值’ 例如：</span><br><span class="line"></span><br><span class="line">update t_student set name = ‘lily’, age = ‘16’ where name = ‘Jack’</span><br><span class="line">5.1根据条件查找 select from 表名 where 字段1 = ‘字段1的值’ 例如：</span><br><span class="line"></span><br><span class="line">select from t_student where age = ‘16’</span><br><span class="line">5.2查找所有数据 select from 表名 例如：</span><br><span class="line"></span><br><span class="line">select from t_student</span><br><span class="line">5.3排序查找： select from 表名 order by 字段 例如：</span><br><span class="line"></span><br><span class="line">select from t_student order by age asc （升序，默认）</span><br><span class="line">select * from t_student order by age desc （降序） 3.</span><br><span class="line">6.删除表： drop table 表名 例如：</span><br><span class="line"></span><br><span class="line">drop table t_student</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class
      
    
    </summary>
    
      <category term="FMDB" scheme="http://yoursite.com/categories/FMDB/"/>
    
    
      <category term="FMDB" scheme="http://yoursite.com/tags/FMDB/"/>
    
  </entry>
  
  <entry>
    <title>iOS开发权限设置</title>
    <link href="http://yoursite.com/2017/05/05/iOS%E5%BC%80%E5%8F%91%E6%9D%83%E9%99%90%E8%AE%BE%E7%BD%AE/"/>
    <id>http://yoursite.com/2017/05/05/iOS开发权限设置/</id>
    <published>2017-05-05T10:04:23.000Z</published>
    <updated>2018-04-23T10:05:34.512Z</updated>
    
    <content type="html"><![CDATA[<p>iOS 8.0之后调用系统的API需要配置相关的配置信息才能正常使用</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 相册 --&gt;</span><br><span class="line">&lt;key&gt;NSPhotoLibraryUsageDescription&lt;/key&gt;</span><br><span class="line">&lt;string&gt;App需要您的同意,才能访问相册&lt;/string&gt;</span><br><span class="line">&lt;!-- 相机 --&gt;</span><br><span class="line">&lt;key&gt;NSCameraUsageDescription&lt;/key&gt;</span><br><span class="line">&lt;string&gt;App需要您的同意,才能访问相机&lt;/string&gt;</span><br><span class="line">&lt;!-- 麦克风 --&gt;</span><br><span class="line">&lt;key&gt;NSMicrophoneUsageDescription&lt;/key&gt;</span><br><span class="line">&lt;string&gt;App需要您的同意,才能访问麦克风&lt;/string&gt;</span><br><span class="line">&lt;!-- 位置 --&gt;</span><br><span class="line">&lt;key&gt;NSLocationUsageDescription&lt;/key&gt;</span><br><span class="line">&lt;string&gt;App需要您的同意,才能访问位置&lt;/string&gt;</span><br><span class="line">&lt;!-- 在使用期间访问位置 --&gt;</span><br><span class="line">&lt;key&gt;NSLocationWhenInUseUsageDescription&lt;/key&gt;</span><br><span class="line">&lt;string&gt;App需要您的同意,才能在使用期间访问位置&lt;/string&gt;</span><br><span class="line">&lt;!-- 始终访问位置 --&gt;</span><br><span class="line">&lt;key&gt;NSLocationAlwaysUsageDescription&lt;/key&gt;</span><br><span class="line">&lt;string&gt;App需要您的同意,才能始终访问位置&lt;/string&gt;</span><br><span class="line">&lt;!-- 日历 --&gt;</span><br><span class="line">&lt;key&gt;NSCalendarsUsageDescription&lt;/key&gt;</span><br><span class="line">&lt;string&gt;App需要您的同意,才能访问日历&lt;/string&gt;</span><br><span class="line">&lt;!-- 提醒事项 --&gt;</span><br><span class="line">&lt;key&gt;NSRemindersUsageDescription&lt;/key&gt;</span><br><span class="line">&lt;string&gt;App需要您的同意,才能访问提醒事项&lt;/string&gt;</span><br><span class="line">&lt;!-- 运动与健身 --&gt;</span><br><span class="line">&lt;key&gt;NSMotionUsageDescription&lt;/key&gt;</span><br><span class="line">&lt;string&gt;App需要您的同意,才能访问运动与健身&lt;/string&gt;</span><br><span class="line">&lt;!-- 健康更新 --&gt;</span><br><span class="line">&lt;key&gt;NSHealthUpdateUsageDescription&lt;/key&gt;</span><br><span class="line">&lt;string&gt;App需要您的同意,才能访问健康更新 &lt;/string&gt;</span><br><span class="line">&lt;!-- 健康分享 --&gt;</span><br><span class="line">&lt;key&gt;NSHealthShareUsageDescription&lt;/key&gt;</span><br><span class="line">&lt;string&gt;App需要您的同意,才能访问健康分享&lt;/string&gt;</span><br><span class="line">&lt;!-- 蓝牙 --&gt;</span><br><span class="line">&lt;key&gt;NSBluetoothPeripheralUsageDescription&lt;/key&gt;</span><br><span class="line">&lt;string&gt;App需要您的同意,才能访问蓝牙&lt;/string&gt;</span><br><span class="line">&lt;!-- 媒体资料库 --&gt;</span><br><span class="line">&lt;key&gt;NSAppleMusicUsageDescription&lt;/key&gt;</span><br><span class="line">&lt;string&gt;App需要您的同意,才能访问媒体资料库&lt;/string&gt;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;iOS 8.0之后调用系统的API需要配置相关的配置信息才能正常使用&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;
      
    
    </summary>
    
      <category term="iOS 开发" scheme="http://yoursite.com/categories/iOS-%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="iOS 开发" scheme="http://yoursite.com/tags/iOS-%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>iOS 开发 UITableViewCell的重用机制</title>
    <link href="http://yoursite.com/2017/04/16/iOS%E5%BC%80%E5%8F%91UITableViewCell%E7%9A%84%E9%87%8D%E7%94%A8%E6%9C%BA%E5%88%B6/"/>
    <id>http://yoursite.com/2017/04/16/iOS开发UITableViewCell的重用机制/</id>
    <published>2017-04-16T07:18:21.000Z</published>
    <updated>2018-04-23T10:09:47.345Z</updated>
    
    <content type="html"><![CDATA[<p>首先,我们要明白我们为什么需要使用这种机制,其次,这种机制的原理是什么.<br>我们先举个例子来说明.一个UITableView中有许多需要显示的cell,但是我们不可能每个都会浏览到,那么如果我们把这些数据全部都加载进去,是不是造成了内存的负担呢.</p><p>我们所能显示的区域通常只有一个屏幕的大小,那么那些屏幕之外的信息是不需要一次性全都加载完的,只有当我们滑动屏幕需要浏览的时候,我们才需要它加载进来.因此,就有了我们要介绍的这部分内容,UITabelViewCell的重用机制.</p><p>重用机制实现了数据和显示的分离,并不为每个数据创建一个UITableViewCell,我们只创建屏幕可显示的最大的cell个数+1,然后去循环重复使用这些cell,既节省空间,又达到我们需要显示的效果.<br>这种机制下系统默认有一个可变数组NSMutableArray<em> visiableCells,用来保存当前显示的cell.一个可变字典NSMutableDictnery</em> reusableTableCells,用来保存可重复利用的cell.(之所以用字典是因为可重用的cell有不止一种样式,我们需要根据它的reuseIdentifier,也就是所谓的重用标示符来查找是否有可重用的该样式的cell).</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">// 设置单元格  indexPath :单元格当前所在位置 -- 哪个分区哪一行等</span><br><span class="line">- (UITableViewCell *)tableView:(UITableView *)tableView cellForRowAtIndexPath:(NSIndexPath *)indexPath //UITableViewDataSource</span><br><span class="line">&#123;</span><br><span class="line">    static NSString *identifier = @&quot;cell&quot; ;</span><br><span class="line">    //相当于从集合中找寻完全出屏幕的单元格.</span><br><span class="line">    // identifier : 因为一个表视图中可能存在多种样式的单元格,咱们把相同样式的单元格放到同一个集合里面,为这个集合加标示符,当我们需要用到某种样式的单元格的时候,根据不同的标示符,从不同的集合中找寻单元格.</span><br><span class="line">    UITableViewCell *cell = [tableView dequeueReusableCellWithIdentifier:identifier] ;</span><br><span class="line">    // 如果从集合中未找到单元格,也就是集合中还没有单元格,也就是还没有单元格出屏幕,那么我们就需要创建单元格</span><br><span class="line">    if (!cell)</span><br><span class="line">    &#123;</span><br><span class="line">        // 创建cell的时候需要标示符(Identifier)是因为,当该cell出屏幕的时候需要根据标示符放到对应的集合中.</span><br><span class="line">        cell = [[UITableViewCell alloc] initWithStyle:UITableViewCellStyleSubtitle reuseIdentifier:@&quot;cell&quot;] ;</span><br><span class="line">    return cell ;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">系统第一次执行</span><br><span class="line">- (UITableViewCell *)tableView:(UITableView *)tableView cellForRowAtIndexPath:(NSIndexPath *)indexPath</span><br><span class="line">这个方法的时候, reusableTableCells为空,</span><br><span class="line">[tableView dequeueReusableCellWithIdentifier:identifier]</span><br><span class="line">的返回值为nil,我们需要通过</span><br><span class="line">[[UITableViewCell alloc] initWithStyle:UITableViewCellStyleSubtitle reuseIdentifier: identifier]</span><br><span class="line">方式来创建.</span><br></pre></td></tr></table></figure><blockquote><p>当我们的数据过多,整个屏幕的cell显示不完全时,这个方法的执行情况是 :</p></blockquote><blockquote><p>(1) 先执行<br><code>[[UITableViewCell alloc] initWithStyle:UITableViewCellStyleSubtitle reuseIdentifier: identifier]</code><br>创建整个屏幕能显示的cell数+1的cell(当我们拖动UITableView的时候,第一个cell没有移出屏幕,最下面的cell就已经存在),并指定相同或者不同的标示符identifier.把创建出的屏幕能显示的cell全部都加入到visiableCells数组中(最后一个创建的先不加入数组)，reusableTableCells为空.</p></blockquote><blockquote><p>(2)当我们拖动屏幕时,顶端的cell移出屏幕并加入到reusableTableCells字典中,键为identifier ,并把之前已经创建的但是没有加入到visiableCells的cell加入到visiableCells数组中.</p></blockquote><blockquote><p>(3)当我们接着拖动的时候,因为reusableTableCells中已经有值，所以，当需要显示新的cell，cellForRowAtIndexPath再次被调用，执行[tableView dequeueReusableCellWithIdentifier: identifier]，返回一个标示符为identifier的cell。该cell移出reusableTableCells之后加入到visiableCells；顶端的cell移出visiableCells并加入到reusableTableCells.如果visiableCells数组中没有找到identifier类型的cell,则再次重新alloc一个.</p></blockquote><p>在iOS6之后系统加入了一种单元格注册的方法.<br><code>[self.tableView registerClass:[UITableViewCell class] forCellReuseIdentifier: identifier];</code></p><blockquote><p>这个方法的作用是,当我们从重用队列中取cell的时候,如果没有,系统会帮我们创建我们给定类型的cell,如果有,则直接重用. 这种方式cell的样式为系统默认样式.</p></blockquote><p>在设置cell的方法中只需要:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">- (UITableViewCell *)tableView:(UITableView *)tableView cellForRowAtIndexPath:(NSIndexPath *)indexPath</span><br><span class="line">&#123;</span><br><span class="line">    // 重用队列中取单元格 由于上面已经注册过单元格,系统会帮我们做判断,不用再次手动判断单元格是否存在</span><br><span class="line">    UITableViewCell *cell = [tableView dequeueReusableCellWithIdentifier: identifier forIndexPath:indexPath] ;</span><br><span class="line">    return cell ;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;首先,我们要明白我们为什么需要使用这种机制,其次,这种机制的原理是什么.&lt;br&gt;我们先举个例子来说明.一个UITableView中有许多需要显示的cell,但是我们不可能每个都会浏览到,那么如果我们把这些数据全部都加载进去,是不是造成了内存的负担呢.&lt;/p&gt;
&lt;p&gt;我们所能
      
    
    </summary>
    
      <category term="iOS 开发" scheme="http://yoursite.com/categories/iOS-%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="iOS 开发" scheme="http://yoursite.com/tags/iOS-%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>iOS 开发 APP的生命周期和UIViewController的生命周期</title>
    <link href="http://yoursite.com/2017/03/12/iOS%E5%BC%80%E5%8F%91%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/"/>
    <id>http://yoursite.com/2017/03/12/iOS开发生命周期/</id>
    <published>2017-03-12T12:45:43.000Z</published>
    <updated>2018-04-23T10:04:10.127Z</updated>
    
    <content type="html"><![CDATA[<h3 id="一-iOS程序的启动执行顺序"><a href="#一-iOS程序的启动执行顺序" class="headerlink" title="一. iOS程序的启动执行顺序"></a>一. iOS程序的启动执行顺序</h3><h4 id="1-具体执行流程"><a href="#1-具体执行流程" class="headerlink" title="1.具体执行流程"></a>1.具体执行流程</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">程序入口</span><br><span class="line">进入main函数，设置AppDelegate称为函数的代理</span><br><span class="line"></span><br><span class="line">程序完成加载</span><br><span class="line"></span><br><span class="line">[AppDelegate application:didFinishLaunchingWithOptions:]</span><br><span class="line"></span><br><span class="line">创建window窗口</span><br><span class="line"></span><br><span class="line">程序被激活</span><br><span class="line"></span><br><span class="line">[AppDelegate applicationDidBecomeActive:]</span><br><span class="line"></span><br><span class="line">当点击command+H时(针对模拟器,手机是当点击home键)</span><br><span class="line">程序取消激活状态</span><br><span class="line"></span><br><span class="line">[AppDelegate applicationWillResignActive:];</span><br><span class="line"></span><br><span class="line">程序进入后台</span><br><span class="line"></span><br><span class="line">[AppDelegate applicationDidEnterBackground:];</span><br><span class="line"></span><br><span class="line">点击进入工程</span><br><span class="line">程序进入前台</span><br><span class="line"></span><br><span class="line">[AppDelegate applicationWillEnterForeground:]</span><br><span class="line"></span><br><span class="line">程序被激活</span><br><span class="line"></span><br><span class="line">[AppDelegate applicationDidBecomeActive:];</span><br></pre></td></tr></table></figure><h4 id="2-分析"><a href="#2-分析" class="headerlink" title="2.分析"></a>2.分析</h4><blockquote><p>对于applicationWillResignActive(非活动)与applicationDidEnterBackground(后台)这两个的区别。<br>applicationWillResignActive(非活动):<br>比如当有电话进来或短信进来或锁屏等情况下，这时应用程序挂起进入非活动状态，也就是手机界面还是显示着你当前的应用程序的窗口，只不过被别的任务强制占用了，也可能是即将进入后台状态(因为要先进入非活动状态然后进入后台状态)</p></blockquote><blockquote><p>applicationDidEnterBackground(后台):<br>指当前窗口不是你的App,大多数程序进入这个后台会在这个状态上停留一会，时间到之后会进入挂起状态(Suspended)。如果你程序特殊处理后可以长期处于后台状态也可以运行。<br>Suspended (挂起): 程序在后台不能执行代码。系统会自动把程序变成这个状态而且不会发出通知。当挂起时，程序还是停留在内存中的，当系统内存低时，系统就把挂起的程序清除掉，为前台程序提供更多的内存。</p></blockquote><p>###二. UIViewController 的 生命周期</p><p>当一个视图控制器被创建，并在屏幕上显示的时候。 代码的执行顺序</p><p>1、 alloc 创建对象，分配空间</p><p>2、init (initWithNibName) 初始化对象，初始化数据</p><p>3、loadView 从nib载入视图 ，通常这一步不需要去干涉。除非你没有使用xib文件创建视图</p><p>4、viewDidLoad 载入完成，可以进行自定义数据以及动态创建其他控件</p><p>5、viewWillAppear 视图将出现在屏幕之前，马上这个视图就会被展现在屏幕上了</p><p>6、viewDidAppear 视图已在屏幕上渲染完成<br>当一个视图被移除屏幕并且销毁的时候的执行顺序，这个顺序差不多和上面的相反</p><p>1、viewWillDisappear 视图将被从屏幕上移除之前执行</p><p>2、viewDidDisappear 视图已经被从屏幕上移除，用户看不到这个视图了</p><p>3、dealloc 视图被销毁，此处需要对你在init和viewDidLoad中创建的对象进行释放</p><blockquote><p>关于viewDidUnload ：在发生内存警告的时候如果本视图不是当前屏幕上正在显示的视图的话， viewDidUnload将会被执行，本视图的所有子视图将被销毁，以释放内存,此时开发者需要手动对viewLoad、viewDidLoad中创建的对象释放内存。 因为当这个视图再次显示在屏幕上的时候，viewLoad、viewDidLoad 再次被调用，以便再次构造视图。</p></blockquote><p>当我们创建一个UIViewController类的对象时，通常系统会生成几个默认的方法，这些方法大多与视图的调用有关，但是在视图调用时，这些方法的调用顺序如何，需要整理下。<br>通常上述方法包括如下几种，这些方法都是UIViewController类的方法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">- (void)viewDidLoad；</span><br><span class="line"></span><br><span class="line">- (void)viewDidUnload；</span><br><span class="line"> </span><br><span class="line">- (void)viewWillAppear:(BOOL)animated；</span><br><span class="line"> </span><br><span class="line">- (void)viewDidAppear:(BOOL)animated；</span><br><span class="line"> </span><br><span class="line">- (void)viewWillDisappear:(BOOL)animated；</span><br><span class="line"> </span><br><span class="line">- (void)viewDidDisappear:(BOOL)animated；</span><br></pre></td></tr></table></figure><p>下面介绍下APP在运行时的调用顺序。</p><p>1）- (void)viewDidLoad；</p><p>一个APP在载入时会先通过调用loadView方法或者载入IB中创建的初始界面的方法，将视图载入到内存中。然后会调用viewDidLoad方法来进行进一步的设置。通常，我们对于各种初始数据的载入，初始设定等很多内容，都会在这个方法中实现，所以这个方法是一个很常用，很重要的方法。</p><p>但是要注意，这个方法只会在APP刚开始加载的时候调用一次，以后都不会再调用它了，所以只能用来做初始设置。</p><p>2) - (void)viewDidUnload;</p><p>在内存足够的情况下，软件的视图通常会一直保存在内存中，但是如果内存不够，一些没有正在显示的viewcontroller就会收到内存不够的警告，然后就会释放自己拥有的视图，以达到释放内存的目的。但是系统只会释放内存，并不会释放对象的所有权，所以通常我们需要在这里将不需要在内存中保留的对象释放所有权，也就是将其指针置为nil。</p><p>这个方法通常并不会在视图变换的时候被调用，而只会在系统退出或者收到内存警告的时候才会被调用。但是由于我们需要保证在收到内存警告的时候能够对其作出反应，所以这个方法通常我们都需要去实现。</p><p>另外，即使在设备上按了Home键之后，系统也不一定会调用这个方法，因为IOS4之后，系统允许将APP在后台挂起，并将其继续滞留在内存中，因此，viewcontroller并不会调用这个方法来清除内存。</p><p>3）- (void)viewWillAppear:(BOOL)animated;</p><p>系统在载入所有数据后，将会在屏幕上显示视图，这时会先调用这个方法。通常我们会利用这个方法，对即将显示的视图做进一步的设置。例如，我们可以利用这个方法来设置设备不同方向时该如何显示。</p><p>另外一方面，当APP有多个视图时，在视图间切换时，并不会再次载入viewDidLoad方法，所以如果在调入视图时，需要对数据做更新，就只能在这个方法内实现了。所以这个方法也非常常用。</p><p>4) - (void)viewDidAppear:(BOOL)animated；</p><p>有时候，由于一些特殊的原因，我们不能在viewWillApper方法里，对视图进行更新。那么可以重写这个方法，在这里对正在显示的视图进行进一步的设置。</p><p>5) - (void)viewWillDisappear:(BOOL)animated；</p><p>在视图变换时，当前视图在即将被移除、或者被覆盖时，会调用这个方法进行一些善后的处理和设置。</p><p>由于在IOS4之后，系统允许将APP在后台挂起，所以在按了Home键之后，系统并不会调用这个方法，因为就这个APP本身而言，APP显示的view，仍是挂起时候的view，所以并不会调用这个方法。</p><p>6) - (void)viewDidDisappear:(BOOL)animated；</p><p>我们可以重写这个方法，对已经消失，或者被覆盖，或者已经隐藏了的视图做一些其他操作。</p><p>上述方法的流程图可以简单用如下表示：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">运行APP —&gt; 载入视图 —&gt; 调用viewDidLoad方法 —&gt; 调用viewWillAppear方法 —&gt; 调用viewDidAppear方法 —&gt; 正常运行 —&gt;</span><br><span class="line"></span><br><span class="line">…………..</span><br><span class="line"></span><br><span class="line">—&gt;释放对象所有权 &lt;— 调用viewDidUnload &lt;— 收到内存警告 &lt;— 调用viewDidDisappear &lt;— 调用viewWillDisappear &lt;— APP需要调用另一个view</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;一-iOS程序的启动执行顺序&quot;&gt;&lt;a href=&quot;#一-iOS程序的启动执行顺序&quot; class=&quot;headerlink&quot; title=&quot;一. iOS程序的启动执行顺序&quot;&gt;&lt;/a&gt;一. iOS程序的启动执行顺序&lt;/h3&gt;&lt;h4 id=&quot;1-具体执行流程&quot;&gt;&lt;a hr
      
    
    </summary>
    
      <category term="iOS 开发" scheme="http://yoursite.com/categories/iOS-%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="iOS 开发" scheme="http://yoursite.com/tags/iOS-%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
</feed>
