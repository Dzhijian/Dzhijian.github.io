<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[2018-年终总结]]></title>
    <url>%2F2019%2F01%2F02%2F2018year_summary%2F</url>
    <content type="text"><![CDATA[时间总是在不轻易间就流走了，2018年已经结束，不论好坏，我一直在路上。 2018年的第一个决定就是报了专升本的学历继续教育。这个决定其实是在上大学的时候就想过了，大专生出来找工作，真的很吃亏。”学历是敲门砖”，这句话一点都没错。当初读大学时，很多人都说只要技术够硬，不怕没有好工作，或许是有这么一部分人，通过自己的努力在社会中找到了不错的工作，但是又能有多好呢，又有多少人能对自己的工作满意的。没有好的学历，在这个遍地大学生，高材生的城市，你有什么资本与人家竞争。 HR 在筛选简历的时候，你就已经输了八成了。好的公司每天收到的简历少的几百，多的上千，做IT互联网的公司真的是存在的这样的情况的。我不知道作为大专生，你的简历能有多优秀能被 HR 筛选上。也有人说，专升本在很多公司是不认可的，其实我也是这么觉得的，大多数公司都要求的是全日制本科以上的硬性要求，但是如果大家都是大专生，在同等条件下做对比的话，你有个本科证，或许这能成为你致胜的关键，没有哪一家公司不希望自己的员工不热爱学习的。我觉得不论有用没用，知识学了就是自己的，人生路漫长，很多问题要解决，没有足够的知识储备，怎么能够愉快的生存下去呢。4月份的考试考四科过了三科，10月份的考试，那段时间事情比较多，又要换工作，最后我没有去考。。。😔烦。。。新的课程已经开始上课了，这次不能再任性了，一定要全过。 2018年的第二个决定就是报了 iOS 开发进阶的专业培训工作一年了，对自己的知识储备有了一定的了解，感觉自己处在一个瓶颈上，公司又没有人指导，所以只能靠自己摸索前进，这个过程比较漫长，又想着能够快速的提升自己，想着多学点底层知识，所以只能报了一个8800的网上培训班，包括 OpenGL 、iOS 安全攻防、iOS 框架学习的课程。对于只有一年工作经验的我来说，学习这些课程还是蛮吃力的，涉及的东西比较底层，而且大都是未接触的知识。如果能够把这些知识掌握，我的技术就能能到比较大的提升。但是一年下来，各种事情的干预，特别是学历提升那块有冲突，最后我也没有完整的学完其中的一项。希望2019年能够把这些课程全部搞定。 2018年的第三个决定就是辞职第一家工作了一年的公司2017年 实习就来到深圳找工作，没有想着回广州找工作。毕竟是我人生的第一份工作，所以我的工作态度是非常好的。经常无任何补贴的加班，我对加班不反感，想着刚出社会能多学点知识就多点，对自己是有好处的。比自己优秀，比自己好的人都还在努力奋斗，我又有什么资本可以做一条咸鱼。实习结束后，我也在没有找其他的公司，还是在这家公司继续工作，因为是一家外包公司，工作量比较多，接触的技术也比较多，所以我的技术提升也蛮快的。为什么辞职呢，因为老板承诺了年底会有年终奖，而且我也问了好几次，他都回我有，我们都辛苦了一年，没有任何要求，最后他还是失信了。我想一家公司老板连一点诚信都没有，连公司员工的利益都能拿来忽悠，一点担当都没有，我们员工还能相信他什么，所以年后出来我果断的离职了。 第二份 iOS 开发工作金三银四，对于各行各业来说，三四月是最好找工作的和招人的。我准备可以一份三页的个人简历，主要是上家公司的项目经验多。期待薪资写了10k，一年工作经验写了10k，对于大专生是有飘了，但是我觉得自己值这个价。投了几家公司，比较好的公司没有回复，其中有一个原因就是我的学历不够，因为人家硬性要求要本科以上学历，再者就是工作年限不够，才一年的工作经验，是很难找到一份好的工作的。毕竟在深圳这个一线城市，互联网竞争是非常大的。没有足够的实力就等着被淘汰了。再面试了几家公司之后，我发现了自己的不足之处，就是笔试题不好。对一些基础的知识不能很好的表达出来，虽然懂，但是不知其所以然。技术问答也一般，很多东西会做，但是不知如何描述。知道不足后，我也快速的进行恶补，后面的面试就顺畅多了，但是给的薪资还是不能满足我，都只能开到8k。给我的理由都是一年经验还是太年轻了，经验不够，暂时给不了我要的标准。一周过后，手里拿了四五份8k 的 offer，感觉面试东奔西跑的，太累了， 最后我还是对这个社会妥协了，选择了一个创业公司，还是以外包为主的，在高新园，当然薪资只有8k。早上十点上班，晚上7点下班，不打卡，周末双休。主要是周末双休可以让我自己的时间多一些，可以上学历提升的课程和技术提升。 从龙胜到后瑞,从130飚到140.之前一直住龙胜，因为我哥也住那边，没有住一起，自己住，离上班的地方也不远，后来工作换在高新园之后就要准备搬了，刚好在后瑞那边的朋友也要换地方住，还有几个朋友也要一起，分别是阿潮、阿渡、阿平，还有我，所以呢，所以呢选择在了后瑞，一开始是四个人，都是好朋友，找了一个小区，比较旧，复式的没有电梯，67楼是连在一起的，地方够大，而且小区内有篮球场是我最钟意的，哈哈哈😆，贼爽，只不过没有电梯，要爬6楼。搬到这边之后只能说酒喝的更多了，每周都喝，一箱两箱的，有朋友来的时候还三四箱，真的除了酒就不能喝其他的吗！！！不能吧。。。一个月时间就十几箱酒😆。一开始是我们四人住，一层有三个房间，都安排给他们三人了，我自己住七楼，刚开始几天我都睡不着，还睡出冷汗。。。可能还不习惯吧。下班回来阿平会做好饭菜等我们一起吃，我下班7点回来就8点了，他们比较下班比较早，真的非常Nice，几个月时间我的体重从130飙到了140。后来增潮他哥哥锐哥出来深圳了，准备培训前端，然后一个朋友阿辉今年大学毕业在广州那边的百度上班，不满意后下来深圳，在我们的建议下，让他跟锐哥一起去培训前端，这样就住了6人。除了啊潮他哥，剩下的我们都是高中的同班同学真的好有缘。我每天下班回来吃完饭喝会茶就会抱起电脑学习，可能我自己的忧患意识比较重，一天不学习就感觉浑身不舒服了，没办法，我只是个渣渣，不努力怎么生存下去。经常学习到半夜两点，上班这么久感触很多，比我优秀的，比我好的人，还在不断的努力提升自己，我有什么条件可以做一条咸鱼。 可能他们也受了我的影响，阿渡也重新学起了代码，阿潮也在自学 Python，准备辞职转行了，好好地国企就这样准备辞了，阿辉和锐哥有问题回来问我，学习气氛相当可以，希望他们能够坚持下去，这一行的路不是那么好走。后来阿平上了广州，来了阿峰，硬件工程师，也是高中同学，现在是外派到华为那边上班，这人的思想有点不同，想躺着赚钱的，每天下班回来就说累，吐槽华为那边怎样怎样，在为人处事上也有欠缺，经常批评教育他。 我是个假的 iOS 开发工程师？我是个假的 iOS 开发工程师！为什么这么说呢？在这家公司基本没有加班过，唯一的一次加班是等着跟一位在英国的华人后台对需求，因为时差问题，所以要等到八点才开始，哈哈哈哈。其实也不是公司没有业务做，一开始工作还是蛮赶的，只是我能够按时的完成，所以不需要加班，7点一到我就下班了，其他的前端开发经常加班。在这家公司我先是迭代了一个商城的项目，后面又独立完成了一个医药的项目，期间也完成了其他项目的需求修改，工作量是满满的。7月中旬开始基本没有 App 的项目了，只是做一些修修改改的工作。这段时候感觉好空虚，感觉每天都在划水，一点都不充实，老板找我谈了一下，问我有没有兴趣做前端页面，我说有啊，前端我是一定要学的，只是现阶段我的侧重点还在 App 上，还是以 iOS 开发为主。毕竟这一行我投入的时间精力太多了。不过公司既然能给我时间学习，我当然会抓住这个机会。老板给我两周的时间学习前端 Vue 框架，两周后让我跟着几个前端工程师做项目。大学的时候我学过web前端的知识，上手前端还是蛮快的，学习了两周后，老板就让我跟着他们前端做项目了，一开始我只是帮他们打打杂，写写页面，不得不说，前端的代码就是比移动端的爽，我们移动端需要一大堆代码才是实现的功能，全端几行就够了。这段事假在公司我就学前端知识，回家我就学 iOS 知识，感觉充实了一些。不过在前端打杂了一个月之后，我重新考虑了自己的职业定位，还是要以 iOS 为主，8月底我跟老板提出了离职申请，我说我已经在拖累公司了，编辑好一段长文发给了老板，老板下午回来就找我谈话了，聊了很久，他是非常想留住我，不肯我走，让我在公司待着，有我在，App 这边他放心。我跟他说的了我离职的原因，主要是太闲了，根本不像一个软件开发工程师，做前端页面也不难，打杂不是我要的。可能很多人都会觉得我傻，工作轻松，闲不是很好嘛，但是我不想做咸鱼啊，我的职业路还远，不能对自己不负责。老板让我再考虑一下跟他说，我直接说，我明天再跟你提一次离职，哈哈哈哈。又聊了好多，最后老板还是没同意，他说让我独自负责维护迭代一个前端的项目，再做两个月，等10月份国庆过后，让我再考虑去留。这么好的老板我也不能再说什么了，不过已经准备好国庆后再跟他提离职申请了。讲真，这家公司的人都挺好的，老板也很 Nice，给我学习时间，有时候我都觉得不好意识。就这样，我自己负责了一个前端项目，是用 Vue框架的，我感觉这js框架非常可以。在前端同事的指导下，自己给这个项目迭代了几个版本，转眼国庆到了，我再次提出了申请，老板又再一次感动到了我，这次他没有强留，他说，有面试你就去面试，没面试你就回来上班。我想辞掉再去找的，没想到老板对我这么好。要不是我有自己的规划，或许我会在这家公司待蛮久的，而不是这五六个月时间。因为太闲了，我选择离职，或许这是我2018年做的最傻的决定，也可能是我最机智的决定。哈哈哈哈。 重新开始找工作。金九银十，我已经错过了九月，十月份我必须抓住。我自己也没想到，自己会这么快再次换工作。哈哈哈哈。这次还是三页的简历，对之前的做了修改，期待薪资我写了12-13k。对于面试我做了很久的准备了，从笔试到技术问答，到对面试官的内心猜测，我都做了准备。不过呢。。。。还是出现了问题，面试是很能体现自己能力的时候，特别是技术上，这次我也发现了自己的不足，在一家公司技术面试过程中，各方面都还好，问题出在音视频处理上，之前我大都是用三方框架，音视频的底层了解不够，他们要的是会处理底层的，因为他们的 App 有几千万的用户量，需要的技术比较牛逼的，我只是个渣渣，没办法，最后这家我钟意的公司 GG 了。面试了六七家公司，最后也就这家公司没有给 offer， 其他的都给了offer，薪资从10.5k到12k 的。 从笔试，到技术问答，到 HR 面，都还可以。不过问题还是有，总结一下： 在谈薪资的时候，为了压薪资还聊了很多算法与数据结构，不得不承认，这一块，我是渣渣； 才毕业一年，经验不够，薪资要的太高； 音视频底层知识不够，需要强化学习，OpenGL，FFmpeg，技术需要掌握； 算法与数据结构需要多补补； 大公司的学历要求高，没有面试机会； 面试多了也烦了，转眼就要过年了，对比各家公司之后，我选了一家香港的外资企业，在深大地铁站旁边，深圳这边主要负责研发，他们主要就一个产品要维护迭代，薪资12k。早上9点到下午5点30分，大小周，小周周六上半天班。 成功入坑了，大坑。因为这家公司的 App 已经是上线到2.0的版本了，所以不是从0到1的过程，代码质量不敢恭维，真的渣到不能再渣了，oc 与 swift 混编的，之前是两个iOS开发，没有一点规范可言，各做各的，没有任何交流 布局都用 frame 算，Masonry 不会用； 网络请求都是新建一个AFHTTPSessionManager对象来管理； 页面都是请求完毕，拿到数据再添加控件，再显示数据； 命名用 v1,v2,v3, 字典转模型，全用 for循环遍历添加，MJExtension、YYModel不会用； 基本没有注释； MVC 都分不清，Controller 里面一大推不知名的代码。 数据本地持久化瞎写， 该封装的不封装，不该封装的瞎写。。。。 讲真这代码真的是我看过最烂的代码，我实习写的代码都比这好很多。深圳的水真的太深了，这样的开发者也有，我不知道他要是去其他公司写这样的代码会怎样。。。。就这样我成功入大坑了。在完成日常任务之余还要重构，是不是我这次选错了。。。😔，不过除了代码这块，公司其他的都还好，上班有说有笑的，经常在聊一些八卦，而且我又没怎么加班，除了发版本，基本6点前就走人了。。。。我的天啊，我真的是一名假的 iOS 开发工程师。。。。 一年来 GitHub 总结 年初我放了一个 ZJKitTool 的OC框架工具到自己的 GitHub 上，只在两个平台推了一次，后面我自己有在慢慢的维护，功能不多，主要是一些常用的封装。后来在9月份准备换工作的时候，我差不多花了一个月时间，用 Swift 写了一个斗鱼直播的案例，主要是页面，没有写到直播里面，斗鱼的接口加密不好处理，需要大量时间，所以后面我就暂时停了，也只在两个平台推了一次，两个项目没有多做推广，任凭他们去积攒 star数量， 一年时间Star总数为247，Fork 为41个，果然是渣渣。现在我又准备用 Swift 写一个音视频处理的案例ZJShortVideo，仿抖音的功能，准备在年后推出去。希望能够有好的收获。看着今年总的 commit 数量为480，大多数都是半夜熬出来的，想想时间真的过得好快，幸好头发都还在。。。付出不一定有收获，但坚持下去，一定会有意外的惊喜。 2018都是在工作和学习还有生活吗？？？我的2018基本都在工作和学习，生活毫无色彩。。。生活上感觉自己的伪装越来越重了,不够Real，不再幽默，Stress 越来越大，生活把我磨的没有一点菱角。或许我应该更有担当了，不能把一些东西无所谓下去了。除了匆匆忙忙的会两趟老家，没有离开过深圳，没有回广州见见同学，没出去怎么玩过，感觉身边的朋友越来越少，生活变得没有趣味，真的是一名屌丝程序猿👨‍💻‍，活该是单身狗。。。loser。。希望2019年自己能有时间好好休息，有足够多的时间回家看看老妈，能够愉快的出去玩一下，生活多点色彩，少一点工作，向优秀的人多学习，尽早脱单，头发依然飘逸。 总结 一年下来，渣渣的我依旧渣渣，哈哈哈😆！ GirlFriend 有吗？ false House 有吗？ false Car 有吗？ false Deposit 有吗？ false 感谢2018年让我遇到的人和事。 2019 好好努力，争取把 false 改成 true 💪, 我一直在路上。]]></content>
      <categories>
        <category>个人记录</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[iOS开发-Socket通信原理]]></title>
    <url>%2F2018%2F09%2F10%2FiOSSocketStudy%2F</url>
    <content type="text"><![CDATA[网络协议1.网络协议有：TCP/IP、Scoket、HTTP等等。 OSI七层网络模型由上到下分别是 应用层 表示层 会话层 传输层 网络层 数据链路层 物理层 http协议对应于应用层 tcp协议对应于传输层 ip协议对应于网络层 TCP/IP是传输层协议，主要解决数据如何在网络中传输；而HTTP是应用层协议，主要解决如何包装数据。三者本质上没有可比性。 何况HTTP协议是基于TCP连接的。网络层的”ip地址”可以唯一标识网络中的主机，而传输层的“协议+端口”可以唯一标识主机中的应用程序（进程）。这样利用三元组（ip地址，协议，端口）就可以标识网络的进程 TCP/IP（Transmission Control Protocol/Internet Protocol）即传输控制协议/网间协议，是一个工业标准的协议集，它是为广域网（WANs）设计的。TCP/IP协议存在于OS中，网络服务通过OS提供，在OS中增加支持TCP/IP的系统调用——Berkeley套接字，如Socket，Connect，Send，Recv等UDP（User Data Protocol，用户数据报协议）是与TCP相对应的协议。它是属于TCP/IP协议族中的一种。如图： TCP/IP协议族包括运输层、网络层、链路层，而socket所在位置如图，Socket是应用层与TCP/IP协议族通信的中间软件抽象层。 Http和Socket连接的区别TCP连接TCP协议可以对上层网络提供接口，使上层网络数据的传输建立在“无差别”的网络之上。 建立起一个TCP连接需要经过“三次握手”： 第一次握手：客户端发送syn包(syn=j)到服务器，并进入SYN_SEND状态，等待服务器确认； 第二次握手：服务器收到syn包，必须确认客户的SYN（ack=j+1），同时自己也发送一个SYN包（syn=k），即SYN+ACK包，此时服务器进入SYN_RECV状态； 第三次握手：客户端收到服务器的SYN＋ACK包，向服务器发送确认包ACK(ack=k+1)，此包发送完毕，客户端和服务器进入ESTABLISHED状态，完成三次握手。 一个完整的三次握手也就是： 请求—应答—再次确认。 握手过程中传送的包里不包含数据，三次握手完毕后，客户端与服务器才正式开始传送数据。理想状态下，TCP连接一旦建立，在通信双方中的任何一方主动关闭连接之前，TCP连接都将被一直保持下去。断开连接时服务器和客户端均可以主动发起断开TCP连接的请求，断开过程需要经过“四次握手” HTTP连接HTTP协议即超文本传送协议(HypertextTransferProtocol )是Web联网的基础，也是手机联网常用的协议之一，HTTP协议是建立在TCP协议之上的一种应用。 HTTP连接最显著的特点是客户端发送的每次请求都需要服务器回送响应，在请求结束后，会主动释放连接。从建立连接到关闭连接的过程称为“一次连接”。 1）在HTTP 1.0中，客户端的每次请求都要求建立一次单独的连接，在处理完本次请求后，就自动释放连接。 2）在HTTP 1.1中则可以在一次连接中处理多个请求，并且多个请求可以重叠进行，不需要等待一个请求结束后再发送下一个请求。 由于HTTP在每次请求结束后都会主动释放连接，因此HTTP连接是一种“短连接”，要保持客户端程序的在线状态，需要不断地向服务器发起连接请求。通常的 做法是即时不需要获得任何数据，客户端也保持每隔一段固定的时间向服务器发送一次“保持连接”的请求，服务器在收到该请求后对客户端进行回复，表明知道客户端“在线”。若服务器长时间无法收到客户端的请求，则认为客户端“下线”，若客户端长时间无法收到服务器的回复，则认为网络已经断开。 Socket原理socket概念Socket:又称”套接字”,应用程序通过”套接字”向网络发送请求或应答,它是一个针对TCP和UDP编程的接口，借助它建立TCP/UDP连接。socket连接就是所谓的长连接,理论上客户端和服务器端一旦建立起连接将不会主动断掉.它是网络通信过程中端点的抽象表示，包含进行网络通信必须的五种信息：连接使用的协议，本地主机的IP地址，本地进程的协议端口，远地主机的IP地址，远地进程的协议端口。 应用层通过传输层进行数据通信时，TCP会遇到同时为多个应用程序进程提供并发服务的问题。多个TCP连接或多个应用程序进程可能需要通过同一个TCP协议端口传输数据。为了区别不同的应用程序进程和连接，许多计算机操作系统为应用程序与TCP／IP协议交互提供了套接字(Socket)接口。应用层可以和传输层通过Socket接口，区分来自不同应用程序进程或网络连接的通信，实现数据传输的并发服务。 服务器端先初始化Socket，然后与端口绑定(bind)，对端口进行监听(listen)，调用accept阻塞，等待客户端连接。在这时如果有个客户端初始化一个Socket，然后连接服务器(connect)，如果连接成功，这时客户端与服务器端的连接就建立了。客户端发送数据请求，服务器端接收请求并处理请求，然后把回应数据发送给客户端，客户端读取数据，最后关闭连接，一次交互结束。 建立socket连接建立Socket连接至少需要一对套接字，其中一个运行于客户端，称为ClientSocket，另一个运行于服务器端，称为ServerSocket。 套接字之间的连接过程分为三个步骤：服务器监听，客户端请求，连接确认。 服务器监听：服务器端套接字并不定位具体的客户端套接字，而是处于等待连接的状态，实时监控网络状态，等待客户端的连接请求。 客户端请求：指客户端的套接字提出连接请求，要连接的目标是服务器端的套接字。为此，客户端的套接字必须首先描述它要连接的服务器的套接字，指出服务器端套接字的地址和端口号，然后就向服务器端套接字提出连接请求。 连接确认：当服务器端套接字监听到或者说接收到客户端套接字的连接请求时，就响应客户端套接字的请求，建立一个新的线程，把服务器端套接字的描述发给客户端，一旦客户端确认了此描述，双方就正式建立连接。而服务器端套接字继续处于监听状态，继续接收其他客户端套接字的连接请求。 SOCKET连接与TCP连接创建Socket连接时，可以指定使用的传输层协议，Socket可以支持不同的传输层协议（TCP或UDP），当使用TCP协议进行连接时，该Socket连接就是一个TCP连接。 Socket连接与HTTP连接由于通常情况下Socket连接就是TCP连接，因此Socket连接一旦建立，通信双方即可开始相互发送数据内容，直到双方连接断开。但在实际网络应用中，客户端到服务器之间的通信往往需要穿越多个中间节点，例如路由器、网关、防火墙等，大部分防火墙默认会关闭长时间处于非活跃状态的连接而导致Socket 连接断连，因此需要通过轮询告诉网络，该连接处于活跃状态。 而HTTP连接使用的是“请求—响应”的方式，不仅在请求时需要先建立连接，而且需要客户端向服务器发出请求后，服务器端才能回复数据。很多情况下，需要服务器端主动向客户端推送数据，保持客户端与服务器数据的实时与同步。此时若双方建立的是Socket连接，服务器就可以直接将数据传送给客户端；若双方建立的是HTTP连接，则服务器需要等到客户端发送一次请求后才能将数据传回给客户端，因此，客户端定时向服务器端发送连接请求，不仅可以保持在线，同时也是在“询问”服务器是否有新的数据，如果有就将数据传给客户端。 HTTP协议—Socket连接–TCP连接关系: HTTP协议提供了封装或者显示数据的具体形式; Socket连接提供了网络通信的能力; TCP连接提供如何在网络中传输; socket是纯C语言的,跨平台; HTTP协议是基于socket的,底层使用的就是socket; 创建Socket连接时，可以指定使用的传输层协议(TCP或UDP),当使用TCP协议进行连接时，该Socket连接就是一个TCP连接。 TCP和UDP区别 基于连接和无连接 对系统资源要求(TCP较多,UDP较少) UDP程序结构较简单 TCP是流模式,UDP是数据报模式 可靠性:TCP保证数据正确性,UDP可能丢包,不保证数据准确性]]></content>
      <categories>
        <category>iOS 开发</category>
      </categories>
      <tags>
        <tag>Socket</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[iOS-Swif Moya(一) 网络抽象层学习]]></title>
    <url>%2F2018%2F08%2F10%2FiOS-Swift-Moya%E4%B8%80%2F</url>
    <content type="text"><![CDATA[什么是Moya？Moya是基于 Alamofire 的更高网络请求抽象层。我们可以看做是网络管理层，用来封装 URL、请求头、请求体、请求参数等网络请求信息。客户端代码直接操作Moya管理请求，而不与Alamofire进行直接接触，形成更高层次的网络请求层，易于维护更新。 Moya Github地址: https://github.com/`Moya`/`Moya` Moya的一些特色功能: 对正确的API端点访问进行编译时检查. 让您使用关联的枚举值定义不同端点的清晰用法. 把test stub作为一等公民，所以单元测试超级简单. 提供了 ReactiveSwift 和 RxSwift 扩展 Moya图解 安装配置CocoaPods 在您的Podfile文件中使用Moya: 123456789pod &apos;Moya&apos;, &apos;~&gt; 11.0&apos;# or pod &apos;Moya/RxSwift&apos;, &apos;~&gt; 11.0&apos;# orpod &apos;Moya/ReactiveSwift&apos;, &apos;~&gt; 11.0&apos; 然后运行 pod install. 在任何您想使用Moya的文件中，请导入框架，通过 import Moya 示例代码 首先创建一个 Moya 网络请求管理器 ZJHomeAPI.swift, 导入 Moya框架 然后定义一个 MoyaProvider 对象 HomeProvider，即请求发起对象,如果要首页发起网络请求就使用这个 HomeProvider。 接着声明一个 enum 枚举来对请求进行明确分类，这里我们定义两个枚举值分别表示获取斗鱼直播的推荐分类列表、分类列表 最后让这个 enum 实现 TargetType 协议，在这里面定义我们各个请求的 url、参数、header 等信息。 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182838485//// ZJHomeAPI.swift// DouYuLive//// Created by 邓志坚 on 2018/8/5.// Copyright © 2018年 邓志坚. All rights reserved.//import UIKitimport Moyalet HomeProvider = MoyaProvider&lt;HomeAPI&gt;()public enum HomeAPI &#123; case recommendCategoryList //推荐分类列表 case liveCateList //分类列表 &#125;// 实现 TargetType 协议extension HomeAPI : TargetType &#123; //服务器基地址 public var baseURL: URL &#123; switch self &#123; case .recommendCategoryList: return URL(string: "https://apiv2.douyucdn.cn")! case .liveCateList: return URL(string: "https://apiv2.douyucdn.cn")! &#125; &#125; //请求的具体URL public var path: String &#123; switch self &#123; case .recommendCategoryList: return "/live/cate/getLiveRecommendCate2" case .liveCateList: return "/live/cate/getLiveCate1List" &#125; &#125; //请求类型 public var method: Moya.Method &#123; switch self &#123; case .recommendCategoryList: return .get case .liveCateList: return .get &#125; &#125; //请求任务事件（这里附带上参数） public var task: Task &#123; switch self &#123; case .recommendCategoryList: var params: [String: Any] = [:] params["client_sys"] = "ios" return .requestParameters(parameters: params, encoding: URLEncoding.default) case .liveCateList: var params: [String: Any] = [:] params["client_sys"] = "ios" return .requestParameters(parameters: params, encoding: URLEncoding.default) &#125; &#125; //是否执行Alamofire验证 public var validate: Bool &#123; return false &#125; //这个就是做单元测试模拟的数据，只会在单元测试文件中有作用 public var sampleData: Data &#123; return "&#123;&#125;".data(using: String.Encoding.utf8)! &#125; //配置请求头 public var headers: [String : String]? &#123; return nil &#125; &#125; 在 ViewController 中导入 import SwiftyJSON,如果没有这个框架 则使用 CocoaPods 导入 SwiftyJSON 框架 pod &#39;SwiftyJSON&#39; 12345678910111213141516//推荐分类列表数据var cateList:Array&lt;JSON&gt; = []// 获取推荐分类数据private func loadCateListData() &#123; HomeProvider.request(HomeAPI.recommendCategoryList) &#123; (response) in if case let .success(result) = response &#123; //使用 SwiftJSON解析数据 let data = try? result.mapJSON() let json = JSON(data!) self.cateList = json["data"]["cate2_list"].arrayValue self.collectionView.reloadData() print(json) &#125; &#125;&#125;]]></content>
      <categories>
        <category>Swift</category>
      </categories>
      <tags>
        <tag>Moya</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[CSS样式学习笔记(一)]]></title>
    <url>%2F2018%2F07%2F23%2FCSS-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E4%B8%80%2F</url>
    <content type="text"><![CDATA[1. z-index定义和用法z-index 属性设置元素的堆叠顺序。拥有更高堆叠顺序的元素总是会处于堆叠顺序较低的元素的前面。 注释：元素可拥有负的 z-index 属性值。注释：Z-index 仅能在定位元素上奏效（例如 position:absolute;） 说明该属性设置一个定位元素沿 z 轴的位置，z 轴定义为垂直延伸到显示区的轴。如果为正数，则离用户更近，为负数则表示离用户更远。 2.box-shadowbox-shadow是向盒子添加阴影。支持添加一个或者多个 1、阴影模糊半径与阴影扩展半径的区别 阴影模糊半径：此参数可选，其值只能是为正值，如果其值为0时，表示阴影不具有模糊效果，其值越大阴影的边缘就越模糊； 阴影扩展半径：此参数可选，其值可以是正负值，如果值为正，则整个阴影都延展扩大，反之值为负值时，则缩小； 2、X轴偏移量和Y轴偏移量值可以设置为负数 1box-shadow: X轴偏移量 Y轴偏移量 [阴影模糊半径] [阴影扩展半径] [阴影颜色] [投影方式]; 示例代码： 123.box_shadow&#123; box-shadow:4px 2px 6px #333333; &#125; 注意：inset 可以写在参数的第一个或最后一个，其它位置是无效的。 3.border-imageborder-image 给边框添加背景图片 4.渐变色彩CSS3 Gradient 分为线性渐变(linear)和径向渐变(radial).由于不同的渲染引擎实现渐变的语法不同，这里我们只针对线性渐变的 W3C 标准语法来分析其用法，其余大家可以查阅相关资料。W3C 语法已经得到了 IE10+、Firefox19.0+、Chrome26.0+ 和 Opera12.1+等浏览器的支持。 线性渐变: 参数： 第一个参数:指定渐变方向，可以用“角度”的关键词或“英文”来表示：第一个参数省略时，默认为“180deg”，等同于“to bottom”。 第二个和第三个参数，表示颜色的起始点和结束点，可以有多个颜色值。 示例代码 1background-image:linear-gradient(to left, red, orange,yellow,green,blue,indigo,violet); 效果图： 5.文字与字体text-overflow用来设置是否使用一个省略标记（…）标示对象内文本的溢出。语法： 但是text-overflow只是用来说明文字溢出时用什么方式显示，要实现溢出时产生省略号的效果，还须定义强制文本在一行内显示（white-space:nowrap）及溢出内容为隐藏（overflow:hidden），只有这样才能实现溢出文本显示省略号的效果，代码如下： 123text-overflow:ellipsis; overflow:hidden; white-space:nowrap; 同时，word-wrap也可以用来设置文本行为，当前行超过指定容器的边界时是否断开转行。 语法：normal为浏览器默认值，break-word设置在长单词或 URL地址内部进行换行，此属性不常用，用浏览器默认值即可。 嵌入字体@font-face@font-face能够加载服务器端的字体文件，让浏览器端可以显示用户电脑里没有安装的字体 语法： 1234@font-face &#123; font-family : 字体名称; src : 字体文件在服务器上的相对或绝对路径;&#125; 这样设置之后，就可以像使用普通字体一样在（font-*）中设置字体样式。 比如： 12345p &#123; font-size :12px; font-family : &quot;My Font&quot;; /*必须项，设置@font-face中font-family同样的值*/&#125; text-shadow可以用来设置文本的阴影效果。语法： 1text-shadow: X-Offset Y-Offset blur color; X-Offset：表示阴影的水平偏移距离，其值为正值时阴影向右偏移，反之向左偏移； Y-Offset：是指阴影的垂直偏移距离，如果其值是正值时，阴影向下偏移，反之向上偏移； Blur：是指阴影的模糊程度，其值不能是负值，如果值越大，阴影越模糊，反之阴影越清晰，如果不需要阴影模糊可以将Blur值设置为0； Color：是指阴影的颜色，其可以使用rgba色。 比如，我们可以用下面代码实现设置阴影效果。 1text-shadow: 0 1px 1px #fff 6.背景background-origin background-origin 设置元素背景图片的原始起始位置。 语法： 1background-origin ： border-box | padding-box | content-box; 参数分别表示背景图片是从边框，还是内边距（默认值），或者是内容区域开始显示。 效果如下： 注意：如果背景不是no-repeat，这个属性无效，它会从边框开始显示。 background-size 设置背景图片的大小，以长度值或百分比显示，还可以通过cover和contain来对图片进行伸缩。 语法： 1background-size: auto | &lt;长度值&gt; | &lt;百分比&gt; | cover | contain 取值说明： 1、auto：默认值，不改变背景图片的原始高度和宽度； 2、&lt;长度值&gt;：成对出现如200px 50px，将背景图片宽高依次设置为前面两个值，当设置一个值时，将其作为图片宽度值来等比缩放； 3、&lt;百分比&gt;：0％~100％之间的任何值，将背景图片宽高依次设置为所在元素宽高乘以前面百分比得出的数值，当设置一个值时同上； 4、cover：顾名思义为覆盖，即将背景图片等比缩放以填满整个容器； 5、contain：容纳，即将背景图片等比缩放至某一边紧贴容器边缘为止。 提示：大家可以在右边的编辑窗口输入自己的代码尝试不同取值的效果。 multiple backgrounds 多重背景 多重背景，也就是CSS2里background的属性外加origin、clip和size组成的新background的多次叠加，缩写时为用逗号隔开的每组值；用分解写法时，如果有多个背景图片，而其他属性只有一个（例如background-repeat只有一个），表明所有背景图片应用该属性值。 语法缩写如下： 123background ： [background-color] | [background-image] | [background-position][/background-size] | [background-repeat] | [background-attachment] | [background-clip] | [background-origin],... 可以把上面的缩写拆解成以下形式： 1background-image:url1,url2,...,urlN; 1234567background-repeat : repeat1,repeat2,...,repeatN;backround-position : position1,position2,...,positionN;background-size : size1,size2,...,sizeN;background-attachment : attachment1,attachment2,...,attachmentN;background-clip : clip1,clip2,...,clipN;background-origin : origin1,origin2,...,originN;background-color : color; 注意： 用逗号隔开每组 background 的缩写值；如果有 size 值，需要紧跟 position 并且用 “/“ 隔开；如果有多个背景图片，而其他属性只有一个（例如 background-repeat 只有一个），表明所有背景图片应用该属性值。background-color 只能设置一个。]]></content>
      <categories>
        <category>CSS样式</category>
      </categories>
      <tags>
        <tag>CSS样式</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[iOS开发 蓝牙通信基础知识(一)]]></title>
    <url>%2F2018%2F07%2F03%2FiOS%E5%BC%80%E5%8F%91-%E8%93%9D%E7%89%99%E9%80%9A%E4%BF%A1%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%2F</url>
    <content type="text"><![CDATA[一、 蓝牙常见名称与类别 MFI ： make for ipad ,iphone, itouch 专们为苹果设备制作的设备，只有少数的硬件厂商才有苹果的MFI认证 BLE ： buletouch low energy，蓝牙4.0设备因为低耗电，所以也叫做BLE peripheral,central ：外设和中心,发起连接的时central，被连接的设备为perilheralservice and characteristic ： 服务和特征 每个设备会提供服务和特征，类似于服务端的api，但是机构不同。每个外设会有很多服务，每个服务中包含很多字段，这些字段的权限一般分为 读read，写write，通知notiy几种，就是我们连接设备后具体需要操作的内容。Description 每个characteristic可以对应一个或多个Description用户描述characteristic的信息或属性MFI 开发使用ExternalAccessory 框架4.0 BLE 开发使用CoreBluetooth 框架 蓝牙和版本的使用限制 蓝牙2.0 ：需要越狱设备才能使用，否则只有IOS设备和苹果认证的MFI设备才可以被IOS设备检索到蓝牙4.0 ：IOS6以上系统，苹果开放了BLE通道，没有MFI认证的蓝牙设备可以连接。（4s之后的设备）MFI认证设备（Make For ipod/ipad/iphone）无限制 二、CoreBluetooth框架介绍CoreBluetooth框架的核心其实是两个东西，peripheral和central, 可以理解成外设和中心。对应他们分别有一组相关的API和类 CoreBluetooth框架有两种模式：一种是中心模式，以App 作为中心，连接其他的外部设备。 另一种是外设模式，使用手机作为其他中心设备的场景。 每个设备都会有一些服务，每个服务里面都会有一些特征，特征就是具体键值对，提供数据的地方。每个特征属性分为这么几种：读，写，通知这么几种方式。 12345678910111213//objcetive c特征的定义枚举 typedef NS_OPTIONS(NSUInteger, CBCharacteristicProperties) &#123; CBCharacteristicPropertyBroadcast = 0x01, CBCharacteristicPropertyRead = 0x02, CBCharacteristicPropertyWriteWithoutResponse = 0x04, CBCharacteristicPropertyWrite = 0x08, CBCharacteristicPropertyNotify = 0x10, CBCharacteristicPropertyIndicate = 0x20, CBCharacteristicPropertyAuthenticatedSignedWrites = 0x40, CBCharacteristicPropertyExtendedProperties = 0x80, CBCharacteristicPropertyNotifyEncryptionRequired NS_ENUM_AVAILABLE(NA, 6_0) = 0x100, CBCharacteristicPropertyIndicateEncryptionRequired NS_ENUM_AVAILABLE(NA, 6_0) = 0x200 &#125;; 外设、服务、特征间的关系 三、蓝牙开发流程1.蓝牙中心模式流程 建立中心角色 扫描外设（discover） 连接外设(connect) 扫描外设中的服务和特征(discover) 4.1 获取外设的services 4.2 获取外设的Characteristics,获取Characteristics的值，获取Characteristics的Descriptor和Descriptor的值 与外设做数据交互(explore and interact) 订阅Characteristic的通知 断开连接(disconnect)** 蓝牙外设模式流程 启动一个Peripheral管理对象 本地Peripheral设置服务,特性,描述，权限等等 Peripheral发送广告 设置处理订阅、取消订阅、读characteristic、写characteristic的委托方法 蓝牙设备状态 待机状态（standby）：设备没有传输和发送数据，并且没有连接到任何设 广播状态（Advertiser）：周期性广播状态 扫描状态（Scanner）：主动寻找正在广播的设备 发起链接状态（Initiator）：主动向扫描设备发起连接。 主设备（Master）：作为主设备连接到其他设备。 从设备（Slave）：作为从设备连接到其他设备。 蓝牙设备的五种工作状态 准备（standby） 广播（advertising） 监听扫描（Scanning 发起连接（Initiating） 已连接（Connected） 四、蓝牙开发注意点 关于Mac地址的获取自iOS7之后，苹果不支持获取Mac地址，只能用UUID来标识设备，要注意的是同一个设备在不同手机上显示的UUID不相同，但有的设备可以通过 “180A”这个服务来发现特征，再来读取 “2A23”这个特征值，可以获得Mac地址。如果你的蓝牙设备不支持这样获取,你可以跟硬件工程师沟通，来获得Mac地址，添加一个获取地址命令或者增加一个含地址的特征值都可以很容易的获取。上面获取地址的前提都是需要先建立连接，如果一定要在扫描的时候获得Mac地址，让硬件工程师把数据写入广播包里，看是否可行。 数据传输大小问题，最适宜的传输大小应该小于20字节，大于这个20个字节，数据丢失比较大，如果数据大于这个20字节可以分段发送 数据转换的问题发送的蓝牙数据是一个数据包前三位是固定的所以前三位先不管，但是我们后面的数据是需要去获取的，需要获取系统的当前时间和 chensum（前三位+时间 = chensum） 下载一个LightBlue 协助开发一个设备有很多服务，服务中又有很多特性，特性中又分读的，写的等，使用LightBlue，可以很快的找到你需要的特性。 一般的蓝牙都要支持重连和后台运行，如果扫描设备的时候,用这个方法- (void)scanForPeripheralsWithServices:options:没有指定特定的服务，而是用nil代替，设备在后台断开的时候是不会重连的。 蓝牙是可以同时连接多个外部设备。 关于readValueForCharacteristic和 setNotifyValue:forCharacteristic: 的区别， readValueForCharacteristic适合用来读取数据不怎么更新的特征值， 如果获取的数据是经常更新的，那就 一定要用setNotifyValue:forCharacteristic:来订阅这个特征。 当我们写入命令时writeValue:forCharacteristic:type:,这个type类用CBCharacteristicWriteWithoutResponse，这个特征值可读，还可以通知。 代理方法- (void)centralManagerDidUpdateState:(CBCentralManager *)central;一定要调用，否则会报错，这个方法只要设置中心设备的代理之后，就一定会走，我们最开始的扫描外设应放在这个方法里； IOS对连接参数要求另外附上苹果对connection interval的要求, 其实还有其他的连接参数要求, 比如slave latency, supervision timeout, 如果不满足这些, IOS设备会拒绝. ● Interval Max (Slave Latency + 1) ≤ 2 seconds● Interval Min ≥ 20 ms● Interval Min + 20 ms ≤ Interval Max Slave Latency ≤ 4 //这个是这样么？？？● connSupervisionTimeout ≤ 6 seconds● Interval Max (Slave Latency + 1) * 3 &lt; connSupervisionTimeout 五、名词解释 GAAT : Generic Attribute Profile , GATT配置文件是一个通用规范，用于在BLE链路上发送和接收被称为“属性”的数据块。目前所有的BLE应用都基于GATT。 蓝牙SIG规定了许多低功耗设备的配置文件。配置文件是设备如何在特定的应用程序中工作的规格说明。注意一个设备可以实现多个配置文件。例如，一个设备可能包括心率监测仪和电量检测。 Characteristic 一个characteristic包括一个单一变量和0-n个用来描述characteristic变量的descriptor，characteristic可以被认为是一个类型，类 似于类。 Descriptor Descriptor用来描述characteristic变量的属性。例如，一个descriptor可以规定一个可读的描述，或者一个characteristic变量可接受的范围，或者一个characteristic变量特定的测量单位。 Service service是characteristic的集合。例如，你可能有一个叫“Heart Rate Monitor(心率监测仪)”的service，它包括了很多characteristics，如“heart rate measurement(心率测量)”等。你可以在bluetooth.org 找到一个目前支持的基于GATT的配置文件和服务列表。]]></content>
      <categories>
        <category>iOS开发</category>
      </categories>
      <tags>
        <tag>蓝牙</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[iOS开发 NSPredicate-谓词的学习与使用]]></title>
    <url>%2F2018%2F07%2F03%2FiOS%E5%BC%80%E5%8F%91-NSPredicate-%E8%B0%93%E8%AF%8D%E7%9A%84%E5%AD%A6%E4%B9%A0%E4%B8%8E%E4%BD%BF%E7%94%A8%2F</url>
    <content type="text"><![CDATA[NSPredicateCocoa 中提供了一个NSPredicate的类,该类主要用于指定过滤器的条件, 每一个对象通过谓词进行筛选,判断条件是否匹配。一种逻辑条件的定义，用于约束对获取或内存过滤的搜索。 概述 谓词表示逻辑条件，可用于筛选对象集合。虽然直接从ns比较谓词、NSCompoundPredicate和NSExpression的实例创建谓词很常见，但是您经常从格式字符串创建谓词，该格式字符串由NSPredicate上的类方法解析。谓词格式字符串的例子包括:简单的比较，例如grade = “7”或firstName如”Shaffiq”大小写不敏感查找，如名称包含[cd] “itroen”逻辑操作，例如(firstName like“Mark”)或(lastName like“Adderley”)时间范围限制，例如日期介于{ $YESTERDAY， $TOMORROW}。关系条件，如group.name，如“work*”聚合操作，如@sum.items。价格&lt; 1000有关完整的语法引用，请参阅谓词编程指南。您还可以使用evaluate(with: substitute variables:)方法创建包含变量的谓词，以便在运行时.v替换具体值之前预定义谓词 方法1.+ (NSPredicate *)predicateWithFormat:(NSString *)predicateFormat, ...;创建并返回一个新的谓词，该谓词通过创建一个具有给定格式的新字符串并解析结果而形成。有关格式字符串的格式和变量替换的限制的详细信息，请参阅谓词格式字符串语法。 2.+ (NSPredicate *)predicateWithFormat:(NSString *)predicateFormat argumentArray:(nullable NSArray *)arguments;通过将给定数组中的值替换为格式字符串并解析结果来初始化谓词。有关格式字符串的格式和变量替换的限制的详细信息，请参阅谓词格式字符串语法。 3.+ (NSPredicate *)predicateWithFormat:(NSString *)predicateFormat arguments:(va_list)argList;通过将参数列表中的值替换为格式字符串并解析结果来初始化谓词。有关格式字符串的格式和变量替换的限制的详细信息，请参阅谓词格式字符串语法。将argList中的值替换为谓词格式并解析结果的新谓词。 4.+ (NSPredicate *)predicateWithValue:(BOOL)value;创建并返回一个谓词，该谓词总是计算为给定的布尔值 5.+ (NSPredicate*)predicateWithBlock:(BOOL (^)(id _Nullable evaluatedObject, NSDictionary&lt;NSString *, id&gt; * _Nullable bindings))block API_AVAILABLE(macos(10.6), ios(4.0), watchos(2.0), tvos(9.0));初始化使用指定块对象和绑定字典计算的谓词。在macOS 10.6和以后版本中，核心数据支持内存和原子存储中的基于块的谓词，但不支持基于sql的存储。 使用使用条件字符表 检索出某个范围的元素12345678NSArray *array = @[@123,@66,@89,@45,@101,@18,@666,@75];NSPredicate *predicte = [NSPredicate predicateWithFormat:@"SELF BETWEEN &#123;60,100&#125;"];NSArray *tmp = [array filteredArrayUsingPredicate:predicte];NSLog(@"%@",tmp); 123452018-07-03 12:20:11.469946+0800 NewDemo[20729:4562901] ( 66, 89, 75)]]></content>
      <categories>
        <category>iOS开发</category>
      </categories>
      <tags>
        <tag>NSPredicate</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[CocoaPods 创建公有库,配置podspec文件]]></title>
    <url>%2F2018%2F06%2F19%2FCocoaPods-%E5%88%9B%E5%BB%BA%E5%85%AC%E6%9C%89%E5%BA%93-%E9%85%8D%E7%BD%AEpodspec%E6%96%87%E4%BB%B6%2F</url>
    <content type="text"><![CDATA[目录 如何创建podspec文件 如何编写podspec文件 如何实现目录分层 如何校验podspec文件 更新维护 1.如何创建podspec文件创建podspec文件只需要一行命令，在你自己的三方库的根目录下输入下面的命令： 1pod spec create XXXKit 然后在项目目录下将会生成一个podspec文件 2.如何编写podspec文件我们先来打开ZJKitTool.podspec文件看看里面的内容。基本都是针对ZJKitTool的描述和介绍 一些常用的信息介绍： name：框架名version：当前版本（注意，是当前版本，假如你后续更新了新版本，需要修改此处）summary：简要描述，在pod search ZCPKit的时候会显示该信息。description：详细描述homepage：页面链接license：开源协议author：作者source：源码git地址platform：支持最低ios版本source_files：源文件（可以包含.h和.m）public_header_files：头文件(.h文件)resources：资源文件（配置的文件都会被放到mainBundle中）resource_bundles：资源文件（配置的文件会放到你自己指定的bundle中）frameworks：依赖的系统框架vendored_frameworks：依赖的非系统框架libraries：依赖的系统库vendored_libraries：依赖的非系统的静态库dependency：依赖的三方库 上面列举的信息大部分来自pod默认生成的podspec文件中的给的，其中需要重点注意标识黑体的这几个信息。 你在三方库中看到的那些文件都是通过这些配置来确定的。当pod install引入三方库时，只会引入你在podspec中配置的那些文件。 下面我会举例说明该如何写podsepc中的每项配置。 如图所示的目录结构，每个配置项的写法如下： source_files：配置三方库的源文件（.h或.m文件） 写法：source_files = ‘ZJKitTool/ZJHelperKit.h’ // 直接指定文件名或：source_files = ‘ZJKitTool/.{h,m}’ // ZJKitTool文件夹下的所有匹配文件source_files = ‘ZJKitTool/**/.{h,m}’ // ZJKitTool所有路径下的所有匹配文件public_header_files：配置公有的头文件（.h文件） vendored_frameworks：配置需要引用的非系统框架（*/的写法后面不再赘述） 写法：vendored_frameworks = ‘Frameworks/MyFramework.framework’frameworks：配置依赖的系统框架 写法：frameworks = ‘AVFoundation’, ‘CoreGraphics’, ‘Security’, ‘SystemConfiguration’vendored_libraries：配置需要引用的非系统静态库（要注意，这里的.a静态库名字必须要带lib前缀，如果引用的静态库名字没lib前缀会导致编译报错，只需要重命名加上即可） 写法：vendored_libraries = ‘Frameworks/libZCPKit.a’libraries：配置依赖的系统库（要注意，这里的写法需要忽略lib前缀） 写法：libraries = ‘c++’, ‘sqlite3’, ‘stdc++.6.0.9’, ‘z’resources：配置资源文件（.bundle，.png，.txt等资源文件，这些资源文件会被放到mainBundle中，要注意避免发生命名重复的问题） 写法：resources = ‘Resources/MyRes.bundle’resource_bundles：配置指定bundle的资源文件（可以解决resources导致的命名冲突问题） 写法：resource_bundles = { ‘ZJKitToolBundle’ =&gt; [‘Resources/MyRes.bundle’],}dependency：依赖的三方库，pod库或者可以是自身的subspec 写法：dependency ‘AFNetworking’, ‘~&gt;3.1.0’ // pod三方库dependency ‘Util’ // 自身的subspec或dependency ‘AFNetworking’附上官网链接，可以去看一看：specs-and-specs-repo关于资源文件更详细的写法，可以看这篇文章：给 Pod 添加资源文件 3.如何实现目录分层使用subspec来实现目录分层。目录分层的好处： 目录分层，结构清晰；使用pod引入一个三方库时，可以只引入一个subspec而不用将整个三方库引入。 如果想有多层的目录结构还可以继续嵌套下去。 有几个需要注意的地方： 12345678910111213141.层级不能出现循环依赖。* 比如类 UIAlertView+ZJHelperKitUIKit.h 中引用#import &quot;NSArray+ZJHelperKit.h&quot;，同时 NSArray+ZJHelperKit.h中引用 #import &quot;UIAlertView+ZJHelperKitUIKit.h&quot;。这样当写podspec时就需要在Object层级中写dependency &apos;ZCCategory/UIKit&apos;，在UIKit层级中写dependency &apos;ZCCategory/Object&apos;。如此便存在UIKit与Object层级之间的循环依赖。出现循环依赖时，三方库是无法成功提交到repo上的，会报依赖错误。解决办法是，层级间要尽量解耦。2.分层的层级不要太多，层级不要太深。为了避免出现上述的循环依赖错误。3.source_files使用的是真实的物理路径，而dependency依赖其他层级时使用的是层级路径，不是真实的物理路径例如：NSArray+ZJHelperKit.h 文件的真实路径是：ZJKitTool/ZJCategory/Object，而Object层级是属于ZJCategory层级下的一个子subspec，所以当写UIKit层级依赖Object层级时要写：dependency &apos;ZJCategory/Object&apos;而不是dependency &apos;ZJKitTool/ZJCategory/Object&apos; 4.如何校验podspec文件在podspec写好之后我们需要验证一下编写的内容是否有误。可以在命令行的三方库当前路径下使用下面的命令： lib lint （从本地验证你的pod能否通过验证）12345pod spec lint （从本地和远程验证你的pod能否通过验证）pod lib lint --verbose （加--verbose可以显示详细的检测过程，出错时会显示详细的错误信息）pod lib lint --allow-warnings (允许警告，用来解决由于代码中存在警告导致不能通过校验的问题)pod lib lint --help （查看所有可选参数，可选参数可以加多个） 我们目前只是在本地写的三方库，所以只需要使用pod lib lint验证即可（这个过程会较为费时，需要稍微等待）。 需要注意的：在检测的时候会很经常会出现各种乱七八糟的错误，在文件多的情况下不太容易一次通过，并且即使你的代码在Xcode中编译通过了，但是也还是会出现很多错误。所以你需要尽量去注意下面的几个问题： 1.当代码中存在警告时要记得使用–allow-warnings参数。 2.如果引入的文件或分好的层级需要依赖系统库或三方库，要记得使用上面介绍的libararies，frameworks等属性。 3.如果你的三方库是在一个xcode项目中编写调试，那么尽量不要用pch。 因为很多类之间的小依赖会被pch给遮掩过去，这会导致在校验时出现大量错误。4.如果想要分层，那么尽量解耦使模块能够单独存在。 原因是当分层较多层级较深时，很可能产生循环依赖的问题。 更新维护当你的代码更新维护后，就需要重写发布，流程是： 更新ZJKitTool.podspec中的版本号打上标签推送远程pod trunk push ZJKitTool.podspec 推送到pods仓库 如果有引用到库framwork或C语言库的话必须使用 –use-libraries –allow-warnings 允许警告 检测本地与远程是否通过 pod spec lint –allow-warnings pod spec lint ZJKitTool.podspec –use-libraries –allow-warnings 检测本地与是否通过pod lib lint –allow-warnings pod lib lint ZJKitTool.podspec –use-libraries –allow-warnings 上传到 cocoapodspod trunk push ZJKitTool.podspec –use-libraries –allow-warnings 必须保证github上有上传框架代码和示例代码，同时保证统一和上传tag版本–use-libraries (有引用框架时，需加入 –use-libraries) 最后回到项目的根目录 pod update 更新最新版本]]></content>
      <categories>
        <category>CocoaPods</category>
      </categories>
      <tags>
        <tag>CocoaPods</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[iOS开发 UIBezierPath学习]]></title>
    <url>%2F2018%2F06%2F16%2FiOS%E5%BC%80%E5%8F%91-UIBezierPath%E5%AD%A6%E4%B9%A0%2F</url>
    <content type="text"><![CDATA[一、属性1234567891011121314151617181920212223242526272829303132333435363738394041// 将UIBezierPath类转换成CGPath，类似于UIColor的CGColor@property(nonatomic) CGPathRef CGPath; // empty：只读类型，路径上是否有有效的元素@property(readonly,getter=isEmpty) BOOL empty;// bounds：和view的bounds是不一样的，它获取path的X坐标、Y坐标、宽度，但是高度为0@property(nonatomic,readonly) CGRect bounds;// currentPoint：当前path的位置，可以理解为path的终点@property(nonatomic,readonly) CGPoint currentPoint;// lineWidth：path线的宽度@property(nonatomic) CGFloat lineWidth;// lineCapStylepath端点样式，有3种样式@property(nonatomic) CGLineCap lineCapStyle;/* Line cap styles. */typedef CF_ENUM(int32_t, CGLineCap) &#123; kCGLineCapButt, // 无端点 kCGLineCapRound, // 圆形端点 kCGLineCapSquare // 方形端点（样式上和kCGLineCapButt是一样的，但是比kCGLineCapButt长一点）&#125;;// 拐角样式@property(nonatomic) CGLineJoin lineJoinStyle;/* Line join styles. */typedef CF_ENUM(int32_t, CGLineJoin) &#123; kCGLineJoinMiter, // 尖角 kCGLineJoinRound, // 圆角 kCGLineJoinBevel // 缺角&#125;;// miterLimit:最大斜接长度（只有在使用kCGLineJoinMiter是才有效）， 边角的角度越小，斜接长度就会越大@property(nonatomic) CGFloat miterLimit; // Used when lineJoinStyle is kCGLineJoinMiter// flatness:弯曲路径的渲染精度，默认为0.6，越小精度越高，相应的更加消耗性能。@property(nonatomic) CGFloat flatness;//usesEvenOddFillRule：单双数圈规则是否用于绘制路径，默认是NO。@property(nonatomic) BOOL usesEvenOddFillRule; // Default is NO. When YES, the even-odd fill rule is used for drawing, clipping, and hit testing. 二、UIBezierPath创建方法1、实例化UIBezierPath对象 + (instancetype)bezierPath;12345- (void)drawRect:(CGRect)rect &#123; UIBezierPath *path = [UIBezierPath bezierPath]; &#125; 2、 在Rect里面画一个矩形+ (instancetype)bezierPathWithRect:(CGRect)rect; 12345678- (void)drawRect:(CGRect)rect &#123; UIBezierPath *path1 = [UIBezierPath bezierPathWithRect:CGRectMake(100, 80, 80, 80)]; [[UIColor orangeColor] set]; path1.lineWidth = 3; [path1 stroke]; &#125; 3.在rect里的画一个内切曲线:+ (instancetype)bezierPathWithOvalInRect:(CGRect)rect; 12345678- (void)drawRect:(CGRect)rect &#123; UIBezierPath *path2 = [UIBezierPath bezierPathWithOvalInRect:CGRectMake(100, 100, 180, 100)]; [[UIColor orangeColor] set]; path2.lineWidth = 3; [path2 stroke]; &#125; 3.根据一个Rect 画一个圆角矩形曲线 (Radius:圆角半径) 当Rect为正方形时且Radius等于边长一半时画的是一个圆+ (instancetype)bezierPathWithRoundedRect:(CGRect)rect cornerRadius:(CGFloat)cornerRadius; 12345678910111213- (void)drawRect:(CGRect)rect &#123; rect = CGRectMake(130,100, 150,90); UIBezierPath *path3 = [UIBezierPath bezierPathWithRoundedRect:rect cornerRadius:8]; [[UIColor blueColor] set]; [path3 fill]; path3.lineWidth = 3; [[UIColor redColor] set]; [path3 stroke]; &#125; 4.根据Rect针对四角中的某个或多个角设置圆角1234567891011121314151617181920/** * 参数： * rect-&gt;矩形的Frame * corners-&gt;指定的圆角 * cornerRadii-&gt;圆角的大小 */+ (instancetype)bezierPathWithRoundedRect:(CGRect)rect byRoundingCorners:(UIRectCorner)corners cornerRadii:(CGSize)cornerRadii;// 使用- (void)drawRect:(CGRect)rect &#123; rect = CGRectMake(130,100, 150,90); UIBezierPath *path4 = [UIBezierPath bezierPathWithRoundedRect:rect byRoundingCorners: UIRectCornerTopLeft|UIRectCornerBottomRight cornerRadii:CGSizeMake(10,50)]; [[UIColor purpleColor] set]; [path4 fill]; [[UIColor yellowColor] set]; [path4 stroke]; &#125; 5.以某个中心点画弧线123456789101112131415161718192021/** * 参数： * center-&gt;圆点 * radius-&gt;半径 * startAngle-&gt;起始位置 * endAngle-&gt;结束位置 * clockwise-&gt;是否顺时针方向 */+ (instancetype)bezierPathWithArcCenter:(CGPoint)center radius:(CGFloat)radius startAngle:(CGFloat)startAngle endAngle:(CGFloat)endAngle clockwise:(BOOL)clockwise;// 使用- (void)drawRect:(CGRect)rect &#123; UIBezierPath *path5 = [UIBezierPath bezierPathWithArcCenter:CGPointMake(180, 180) radius:100 startAngle:0 endAngle:90 clockwise:YES]; [[UIColor purpleColor] set]; [path5 fill]; path5.lineWidth = 3; [[UIColor orangeColor] set]; [path5 stroke]; &#125; 6.根据CGPath创建并返回一个新的UIBezierPath对象1+ (instancetype)bezierPathWithCGPath:(CGPathRef)CGPath 7.建并返回一个新的BezierPath, 这个 BezierPath 的方向是原 BezierPath 的反方向123456/** * 通过该方法反转一条路径, 并不会修改该路径的样子. 它仅仅是修改了绘制的方向 * @return: 返回一个新的 UIBezierPath 对象, 形状和原来路径的形状一样, * 但是绘制的方向相反. */- (UIBezierPath *) bezierPathByReversingPath; 三、构造路径1.将 UIBezierPath 对象的 currentPoint 移动到指定的点123456789/** * 如果当前有正在绘制的子路径, 该方法则会隐式的结束当前路径, * 并将 currentPoint 设置为指定点. 当上一条子路径被终止, 该方法 * 实际上并不会去闭合上一条子路径. 所以上一条自路径的起始点 和 * 结束点并没有被链接. * 对于大多数构造路径相关的方法而言, 在你绘制直线或曲线之前, 需要先调用这个方法. * @param point: 当前坐标系统中的某一点 */- (void)moveToPoint:(CGPoint)point; 2.在当前子路径中追加一条直线123456789/** * 该方法将会从 currentPoint 到 指定点 链接一条直线. * Note: 在追加完这条直线后, 该方法将会更新 currentPoint 为 指定点 * 调用该方法之前, 你必须先设置 currentPoint. 如果当前绘制路径 * 为空, 并且未设置 currentPoint, 那么调用该方法将不会产生任何 * 效果. * @param point: 绘制直线的终点坐标, 当前坐标系统中的某一点 */- (void)addLineToPoint:(CGPoint)point; 3.在当前子路径中追加一条圆弧1234567891011121314/** * 该方法将会从 currentPoint 添加一条指定的圆弧. * 该方法的介绍和构造方法中的一样. 请前往上文查看 * @param center: 圆心 * @param radius: 半径 * @param startAngle: 起始角度 * @param endAngle: 结束角度 * @param clockwise: 是否顺时针绘制 */- (void)addArcWithCenter:(CGPoint)center radius:(CGFloat)radius startAngle:(CGFloat)startAngle endAngle:(CGFloat)endAngle clockwise:(BOOL)clockwise NS_AVAILABLE_IOS(4_0); 4.在当前 子路经中追加一条 三次贝塞尔曲线1234567891011121314/** * 该方法将会从 currentPoint 到 指定的 endPoint 追加一条三次贝塞尔曲线. * 三次贝塞尔曲线的弯曲由两个控制点来控制. 如下图所示 * Note: 调用该方法前, 你必须先设置 currentPoint, 如果路径为空, * 并且尚未设置 currentPoint, 调用该方法则不会产生任何效果. * 当添加完贝塞尔曲线后, 该方法将会自动更新 currentPoint 为 * 指定的结束点 * @param endPoint: 终点 * @param controlPoint1: 控制点1 * @param controlPoint2: 控制点2 */- (void)addCurveToPoint:(CGPoint)endPoint controlPoint1:(CGPoint)controlPoint1 controlPoint2:(CGPoint)controlPoint2; 5.当前 子路经中追加一条 二次贝塞尔曲线12345678910111213/** * 该方法将会从 currentPoint 到 指定的 endPoint 追加一条二次贝塞尔曲线. * currentPoint、endPoint、controlPoint 三者的关系最终定义了二次贝塞尔曲线的形状. * 二次贝塞尔曲线的弯曲由一个控制点来控制. 如下图所示 * Note: 调用该方法前, 你必须先设置 currentPoint, 如果路径为空, * 并且尚未设置 currentPoint, 调用该方法则不会产生任何效果. * 当添加完贝塞尔曲线后, 该方法将会自动更新 currentPoint 为 * 指定的结束点 * @param endPoint: 终点 * @param controlPoint: 控制点 */- (void)addQuadCurveToPoint:(CGPoint)endPoint controlPoint:(CGPoint)controlPoint; 6.关闭当前子路经123456/** * 该方法将会从 currentPoint 到子路经的起点 绘制一条直线, * 以此来关闭当前的自路径. 紧接着该方法将会更新 currentPoint * 为 刚添加的这条直线的终点, 也就是当前子路经的起点. */- (void)closePath; 7.删除 UIBezierPath 对象中的所有点, 效果也就等同于删除了所有子路经1234567- (void)removeAllPoints;将指定 UIBezierPath 中的内容添加到当前 UIBezierPath 对象中/** * 该方法将会在当前 UIBezierPath 对象的路径中追加 * 指定的 UIBezierPath 对象中的内容. */- (void)appendPath:(UIBezierPath *)bezierPath; 8.UIBezierPath 中的 CGPath 对象12345678/** * 获取这个属性, 你将会获得一个不可变的 CGPathRef 对象, * 他可以传入 CoreGraphics 提供的函数中 * 你可以是用 CoreGraphics 框架提供的方法创建一个路径, * 并给这个属性赋值, 当时设置了一个新的路径后, * 这个将会对你给出的路径对象进行 Copy 操作 */@property(nonatomic) CGPathRef CGPath; 9.绘图路径中的当前点12345/** * 该属性的值, 将会是下一条绘制的直线或曲线的起始点. * 如果当前路径为空, 那么该属性的值将会是 CGPointZero */@property(nonatomic, readonly) CGPoint currentPoint; 五、绘制路径 1.填充路径1234567/** * 该方法当前的填充颜色 和 绘图属性对路径的封闭区域进行填充. * 如果当前路径是一条开放路径, 该方法将会隐式的将路径进行关闭后进行填充 * 该方法在进行填充操作之前, 会自动保存当前绘图的状态, 所以我们不需要 * 自己手动的去保存绘图状态了. */- (void)fill; 2.使用混合模式进行填充123456789101112131415161718/** * 该方法当前的填充颜色 和 绘图属性 (外加指定的混合模式 和 透明度) * 对路径的封闭区域进行填充. 如果当前路径是一条开放路径, 该方法将 * 会隐式的将路径进行关闭后进行填充 * 该方法在进行填充操作之前, 会自动保存当前绘图的状态, 所以我们不需要 * 自己手动的去保存绘图状态了. * * @param blendMode: 混合模式决定了如何和已经存在的被渲染过的内容进行合成 * @param alpha: 填充路径时的透明度 */- (void)fillWithBlendMode:(CGBlendMode)blendMode alpha:(CGFloat)alpha; ``` #### 3.绘制路径``` Objc- (void)stroke; 4.使用混合模式进行填充123456/** * @param blendMode: 混合模式决定了如何和已经存在的被渲染过的内容进行合成 * @param alpha: 填充路径时的透明度 */- (void)strokeWithBlendMode:(CGBlendMode)blendMode alpha:(CGFloat)alpha; 5.剪切路径123456789101112131415/** * 该方法将会修改当前绘图上下文的可视区域. * 当调用这个方法之后, 会导致接下来所有的渲染 * 操作, 只会在剪切下来的区域内进行, 区域外的 * 内容将不会被渲染. * 如果你希望执行接下来的绘图时, 删除剪切区域, * 那么你必须在调用该方法前, 先使用 CGContextSaveGState 方法 * 保存当前的绘图状态, 当你不再需要这个剪切区域 * 的时候, 你只需要使用 CGContextRestoreGState 方法 * 来恢复之前保存的绘图状态就可以了. * @param blendMode: 混合模式决定了如何和 * 已经存在的被渲染过的内容进行合成 * @param alpha: 填充路径时的透明度 */- (void)addClip; 六、Hit Detection1.是否包含某个点123456789101112/** * 该方法返回一个布尔值, 当曲线的覆盖区域包含 * 指定的点(内部点)， 则返回 YES, 否则返回 NO. * Note: 如果当前的路径是一个开放的路径, 那么 * 就算指定点在路径覆盖范围内, 该方法仍然会 * 返回 NO, 所以如果你想判断一个点是否在一个 * 开放路径的范围内时, 你需要先Copy一份路径, * 并调用 -(void)closePath; 将路径封闭, 然后 * 再调用此方法来判断指定点是否是内部点. * @param point: 指定点. */- (BOOL) containsPoint:(CGPoint)point; 2.路径是否为空123456/** * 检测当前路径是否绘制过直线或曲线. * Note: 记住, 就算你仅仅调用了 moveToPoint 方法 * 那么当前路径也被看做不为空. */@property (readonly, getter=isEmpty) BOOL empty; 3.路径覆盖的矩形区域123456/** * 该属性描述的是一个能够完全包含路径中所有点 * 的一个最小的矩形区域. 该区域包含二次贝塞尔 * 曲线和三次贝塞尔曲线的控制点. */@property (nonatomic, readonly) CGRect bounds; 4.Apply Transform12345/** * 该方法将会直接对路径中的所有点进行指定的放射 * 变换操作. */- (void)applyTransform:(CGAffineTransform)transform;]]></content>
      <categories>
        <category>iOS 开发</category>
      </categories>
      <tags>
        <tag>UIBezierPath</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[iOS开发NSString详解]]></title>
    <url>%2F2018%2F06%2F13%2FiOS%E5%BC%80%E5%8F%91NSString%E8%AF%A6%E8%A7%A3%2F</url>
    <content type="text"><![CDATA[一、前言NSString 是Foundation框架下的一个处理字符串的类，也是我们平常开发过程中使用的比较多的类。 二、详解1. 属性@property (readonly) NSUInteger length; length 文本长度，只读。 2.字符串的获取1234567891011121314151617/* 为了避免像表情符号这样的字符序列被破坏，你可以这么做: [str substringFromIndex:[str rangeOfComposedCharacterSequenceAtIndex:index].location] [str substringToIndex:NSMaxRange([str rangeOfComposedCharacterSequenceAtIndex:index])] [str substringWithRange:[str rangeOfComposedCharacterSequencesForRange:range]*///截取指定位置之后的字符串- (NSString *)substringFromIndex:(NSUInteger)from;//从0下标开始截取到指定位置的字符串 - (NSString *)substringToIndex:(NSUInteger)to;//截取指定范围的字符串 - (NSString *)substringWithRange:(NSRange)range; //截取字符串指定范围的字符 - (void)getCharacters:(unichar *)buffer range:(NSRange)range; 3.字符串的比较3.1用NSComparisonResult作为比较返回结果的方法：12345678910111213141516/* 在compare:方法中，range参数指定要在比较中使用的接收者的子例程，而不是整个。范围不应用于搜索字符串。例如，[@“AB”compare:@“ABC”选项:0 range:NSMakeRange(0,1)]将“A”与“ABC”进行比较，而不是“A”与“A”，并返回nsordered升序。指定超出接收方界限的范围是错误的，可能会引发异常。*/- (NSComparisonResult)compare:(NSString *)string;- (NSComparisonResult)compare:(NSString *)string options:(NSStringCompareOptions)mask;- (NSComparisonResult)compare:(NSString *)string options:(NSStringCompareOptions)mask range:(NSRange)rangeOfReceiverToCompare;- (NSComparisonResult)compare:(NSString *)string options:(NSStringCompareOptions)mask range:(NSRange)rangeOfReceiverToCompare locale:(nullable id)locale; // locale arg used to be a dictionary pre-Leopard. We now accept NSLocale. Assumes the current locale if non-nil and non-NSLocale. nil continues to mean canonical compare, which doesn't depend on user's locale choice.- (NSComparisonResult)caseInsensitiveCompare:(NSString *)string;- (NSComparisonResult)localizedCompare:(NSString *)string;- (NSComparisonResult)localizedCaseInsensitiveCompare:(NSString *)string;/* localizedStandardCompare:，在10.6中添加，当文件名或其他字符串出现在列表和表中时，应该使用它，在那里类似查找器的排序是合适的。这个方法的确切行为可以在以后的版本中进行调整，并且在不同的本地化下会有所不同，因此客户机不应该依赖于字符串的精确排序顺序。*/- (NSComparisonResult)localizedStandardCompare:(NSString *)string API_AVAILABLE(macos(10.6), ios(4.0), watchos(2.0), tvos(9.0)); 返回的结果NScomparisonResult: 12345typedef NS_ENUM(NSInteger, NSComparisonResult) &#123;NSOrderedAscending = -1L, // 递增NSOrderedSame, // 相等NSOrderedDescending // 递减&#125;; 参数类型 NSStringCompareOptions： NSCaseInsensitiveSearch 不区分大小写比较NSLiteralSearch 区分大小写比较NSBackwardsSearch 从字符串末尾开始搜索NSAnchoredSearch 搜索限制范围的字符串NSNumericSearch 按照字符串里的数字为依据，算出顺序NSDiacriticInsensitiveSearch 忽略 “-“ 符号的比较NSWidthInsensitiveSearch 忽略字符串的长度，比较出结果NSForcedOrderingSearch 忽略不区分大小写比较的选项NSRegularExpressionSearch 只能应用于 rangeOfString:…, stringByReplacingOccurrencesOfString:…和 replaceOccurrencesOfString:…方法 比较原理: 如果没有调用option的方法，比较是从两个字符串的第一个字母开始一一对比，相同则比较下一个，不同则返回结果为升序或者降序，两个比较字符串建议长度一致，不一致也可以比较，比如： @”agc” compare @” ab” //返回降序， @”abc” compare @”gd” //比较第一个字母之后就返回升序 参数range； 是决定前一个比较对象所需比较的范围。 3.2使用isEqualToString比较是否相等-(BOOL)isEqualToString:(NSString *)aString; 4.字符串检索1234567891011121314151617181920212223242526272829303132333435363738//////////搜索基本////////// //1.是否包含前缀(以str开头) - (BOOL)hasPrefix:(NSString *)str; //2.是否包含后缀(以str结尾) - (BOOL)hasSuffix:(NSString *)str; //3.获取公共前缀 - (NSString *)commonPrefixWithString:(NSString *)str options:(NSStringCompareOptions)mask; //4.是否包含字符串 - (BOOL)containsString:(NSString *)str; //5.本地化是否包含字符串(不区分大小写) - (BOOL)localizedCaseInsensitiveContainsString:(NSString *)str; //6.本地化是否包含字符串(标准) - (BOOL)localizedStandardContainsString:(NSString *)str; //7.本地化搜索字符串范围(标准) - (NSRange)localizedStandardRangeOfString:(NSString *)str; //////////搜索字符串////////// //8.搜索(指定字符串) - (NSRange)rangeOfString:(NSString *)searchString; //9.搜索(指定字符串,条件) - (NSRange)rangeOfString:(NSString *)searchString options:(NSStringCompareOptions)mask; //10.搜索(指定字符串,条件,范围) - (NSRange)rangeOfString:(NSString *)searchString options:(NSStringCompareOptions)mask range:(NSRange)searchRange; //11.搜索(指定字符串,条件,范围,本地化) - (NSRange)rangeOfString:(NSString *)searchString options:(NSStringCompareOptions)mask range:(NSRange)searchRange locale:(nullable NSLocale *)locale; //////////搜索字符集合////////// //12.搜索(指定字符集合) - (NSRange)rangeOfCharacterFromSet:(NSCharacterSet *)searchSet; //13.搜索(指定字符集合,条件) - (NSRange)rangeOfCharacterFromSet:(NSCharacterSet *)searchSet options:(NSStringCompareOptions)mask; //14.搜索(指定字符集合,条件,范围) - (NSRange)rangeOfCharacterFromSet:(NSCharacterSet *)searchSet options:(NSStringCompareOptions)mask range:(NSRange)searchRange; //15.用字符串的字符编码指定索引查找位置 - (NSRange)rangeOfComposedCharacterSequenceAtIndex:(NSUInteger)index; //16.用字符串的字符编码指定区域段查找位置 - (NSRange)rangeOfComposedCharacterSequencesForRange:(NSRange)range; 5.字符串拼接123456789// 后面直接拼接字符串- (NSString *)stringByAppendingString:(NSString *)aString; // 后面可以直接拼接字符串，也可拼接字符串参数- (NSString *)stringByAppendingFormat:(NSString *)format, ... NS_FORMAT_FUNCTION(1,2); // 添加路径- (NSString *)stringByAppendingPathComponent:(NSString *)str; 注意：stringByAppendingString 与 stringByAppendingFormat的与别 6.字符串可以转化为基本数据12345678910/* 面的便利方法都跳过了初始空格字符(whitespaceSet)，忽略了尾随字符。他们不是识别地区。NSScanner或NSNumberFormatter可以用于更强大和本地感知的数字解析。*/@property (readonly) double doubleValue;@property (readonly) float floatValue;@property (readonly) int intValue;@property (readonly) NSInteger integerValue API_AVAILABLE(macos(10.5), ios(2.0), watchos(2.0), tvos(9.0));@property (readonly) long long longLongValue API_AVAILABLE(macos(10.5), ios(2.0), watchos(2.0), tvos(9.0));// 跳过初始的空格字符(白色的)，或者是可选的-/+符号，后跟0。当遇到“Y”、“Y”、“T”、“T”或数字1-9时返回YES。它忽略任何尾字符。@property (readonly) BOOL boolValue API_AVAILABLE(macos(10.5), ios(2.0), watchos(2.0), tvos(9.0)); 注意：这里需要提示一下，如果字符串内全是数字，则会全部转化（如果有小数点，转为float和double类型会全转，其他形式只取整数，），如果全是非数字，或者没有以数字开头，怎转化值为0，比如：@”dgtgwge566” //0 如果开头以数字开头，开始会提取到开头几个数字的，后面的提取不了，如：@”456dkhgeo90” //456 7.字符大小写转化123456789101112131415NSString *string = @&quot;string&quot;; NSLog(@&quot;大写: %@&quot;, string.uppercaseString); NSLog(@&quot;小写: %@&quot;, string.lowercaseString); NSLog(@&quot;首字母大写: %@&quot;, string.capitalizedString); //输出: 大写: STRING //输出: 小写: string //输出: 首字母大写: String //本地化(大写) - (NSString *)uppercaseStringWithLocale:(nullable NSLocale *)locale; //本地化(小写) - (NSString *)lowercaseStringWithLocale:(nullable NSLocale *)locale; //本地化(首字母大写) - (NSString *)capitalizedStringWithLocale:(nullable NSLocale *)locale; 8.字符串分行分段1234567891011121314151617181920212223242526272829//分行 //1.指定范围,分行取字符串 - (void)getLineStart:(nullable NSUInteger *)startPtr end:(nullable NSUInteger *)lineEndPtr contentsEnd:(nullable NSUInteger *)contentsEndPtr forRange:(NSRange)range; //2.获取指定范围该行的范围 - (NSRange)lineRangeForRange:(NSRange)range; //分段//3.指定范围,分段取字符串 - (void)getParagraphStart:(nullable NSUInteger *)startPtr end:(nullable NSUInteger *)parEndPtr contentsEnd:(nullable NSUInteger *)contentsEndPtr forRange:(NSRange)range; //4.获取指定范围该段落的范围 - (NSRange)paragraphRangeForRange:(NSRange)range; //字符串分行,分段/ NSString *string = @"123 456\nABC,DEF\nabc.def"; //获取该行的范围(指定范围) NSRange range1 = [string lineRangeForRange:NSMakeRange(0, 10)]; NSLog(@"%ld 行长度: %ld", range1.location, range1.length); //输出: 0 行长度: 16 //获取该段落范围(指定范围) NSRange range2 = [string paragraphRangeForRange:NSMakeRange(0, 3)]; NSLog(@"%ld 段落长度: %ld", range2.location, range2.length); //输出: 0 段落长度: 8 9.字符串列举条件NSStringEnumerationOptions NSStringEnumerationByLines 按行NSStringEnumerationByParagraphs 按段落NSStringEnumerationByComposedCharacterSequences 按字符顺序NSStringEnumerationByWords 按单词,字NSStringEnumerationBySentences 按句子NSStringEnumerationReverse 反向遍历NSStringEnumerationSubstringNotRequired 不需要子字符串NSStringEnumerationLocalized 本地化 10.字符串编码与转换12345678910111213141516171819202122232425//1.选择编码,是否允许有损编码【重要】 - (nullable NSData *)dataUsingEncoding:(NSStringEncoding)encoding allowLossyConversion:(BOOL)lossy; //2.选择编码 - (nullable NSData *)dataUsingEncoding:(NSStringEncoding)encoding; //3.判断是否可以无损编码 - (BOOL)canBeConvertedToEncoding:(NSStringEncoding)encoding; //4.C字符编码转换 - (nullable __strong const charchar *)cStringUsingEncoding:(NSStringEncoding)encoding; //5.判读C字符转化是否可以成功 - (BOOL)getCString:(charchar *)buffer maxLength:(NSUInteger)maxBufferCount encoding:(NSStringEncoding)encoding; //6.指定缓存区转换 - (BOOL)getBytes:(nullable voidvoid *)buffer maxLength:(NSUInteger)maxBufferCount usedLength:(nullable NSUInteger *)usedBufferCount encoding:(NSStringEncoding)encoding options:(NSStringEncodingConversionOptions)options range:(NSRange)range remainingRange:(nullable NSRangePointer)leftover; //7.对字符串进行编码时所需的最大字节数 - (NSUInteger)maximumLengthOfBytesUsingEncoding:(NSStringEncoding)enc; //8.对字符串进行编码时所需的字节数 - (NSUInteger)lengthOfBytesUsingEncoding:(NSStringEncoding)enc; //9.可用字符串编码 + (const NSStringEncoding *)availableStringEncodings; //10.本地化编码名称 + (NSString *)localizedNameOfStringEncoding:(NSStringEncoding)encoding; //11.默认C字符串编码 + (NSStringEncoding)defaultCStringEncoding; 11.字符串分割NSCharacterSet集合 controlCharacterSet 控制符whitespaceCharacterSet 空格符whitespaceAndNewlineCharacterSet 空格换行符decimalDigitCharacterSet 小数letterCharacterSet 文字lowercaseLetterCharacterSet 小写字母uppercaseLetterCharacterSet 大写字母nonBaseCharacterSet 非基础alphanumericCharacterSet 数字字母decomposableCharacterSet 可分解illegalCharacterSet 非法punctuationCharacterSet 标点capitalizedLetterCharacterSet 大写symbolCharacterSet 符号newlineCharacterSet 换行符 123456789101112//字符串分割NSString *string = @"A_B_c_D_E_F"; //分割(指定字符串) NSArray *resultArr1 = [string componentsSeparatedByString:@"_"]; NSLog(@"%@", resultArr1); //输出: (A, B, c, D, E, F) //分割(指定字符集合) NSArray *resultArr2 = [string componentsSeparatedByCharactersInSet:[NSCharacterSet lowercaseLetterCharacterSet]]; NSLog(@"%@", resultArr2); //输出: ("A_B_" , "_D_E_F") 12.字符串操作（修剪，替换，折叠，填充）12345678910111213141516171819202122232425262728293031323334353637NSString *string = @"3EWRs a;af"; //////////修剪////////// NSString *result1 = [string stringByTrimmingCharactersInSet:[NSCharacterSet lowercaseLetterCharacterSet]]; NSLog(@"%@", result1); //输出: 3EWRs a; //////////填充////////// NSString *result2 = [string stringByPaddingToLength:20 withString:@"填充" startingAtIndex:1]; NSLog(@"%@", result2); //输出: 3EWRs a;af充填充填充填充填充填 //////////折叠////////// NSString *result3 = [string stringByFoldingWithOptions:NSNumericSearch locale:[NSLocale systemLocale]]; NSLog(@"%@", result3); //输出: 3EWRs a;af //////////替换////////// //替换(指定字符串) NSString *result4 = [string stringByReplacingOccurrencesOfString:@" " withString:@"替换"]; NSLog(@"%@", result4); //输出: 3EWRs替换a;af //替换(指定字符串,条件,范围) NSString *result5 = [string stringByReplacingOccurrencesOfString:@"a" withString:@"替换" options:NSRegularExpressionSearch range:NSMakeRange(0, string.length - 2)]; NSLog(@"%@", result5); //输出: 3EWRs 替换;af //替换(指定范围) NSString *result6 = [string stringByReplacingCharactersInRange:NSMakeRange(0, string.length) withString:@"替换"]; NSLog(@"%@", result6); //输出: 替换 13.字符串写入123456//字符串写入 //写入到指定路径,编码的文件中 [string writeToFile:@"/Users/Desktop/LuisX.txt" atomically:YES encoding:NSUTF8StringEncoding error:nil]; //写入到指定URL,编码的文件中 [string writeToURL:[NSURL URLWithString:@"file://LuisX.text"] atomically:YES encoding:NSUTF8StringEncoding error:nil]; 14.NSMutableString的介绍NSMutableString是NSString的字类，可以动态的扩展字符串。 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849//1.初始化容量为Capacity大小的字符串 (需要手动释放内存) NSMutableString *mutableStr1 = [[NSMutableString alloc] initWithCapacity:20]; //2.初始化容量为Capacity大小的字符串 (不需要手动释放内存) NSMutableString *mutableStr2 = [NSMutableString stringWithCapacity:20]; NSMutableString *str = [NSMutableString stringWithString:@"string"]; //////////插入////////// [str insertString:@"123" atIndex:2]; NSLog(@"%@", str); //输出: st123ring //////////删除////////// [str deleteCharactersInRange:NSMakeRange(2, 2)]; NSLog(@"%@", str); //输出: st3ring //////////拼接////////// [str appendString:@"456"]; NSLog(@"%@", str); //输出: st3ring456 //////////格式化拼接////////// [str appendFormat:@"7 89"]; NSLog(@"%@", str); //输出: st3ring4567 89 //////////设置新字符串////////// [str setString:@"string"]; NSLog(@"%@", str); //输出: string //////////字符串替换////////// //1.指定范围替换 [str1 replaceCharactersInRange:NSMakeRange(2, 2) withString:@"123"]; NSLog(@"%@", str1); //输出: st123ng //2.指定字符串,条件,范围替换 [str1 replaceOccurrencesOfString:@"123" withString:@"--" options:NSRegularExpressionSearch range:NSMakeRange(0, str1.length)]; NSLog(@"%@", str1); //输出: st--ng]]></content>
      <categories>
        <category>iOS 开发</category>
        <category>基础知识</category>
        <category>NSString</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[iOS开发本地推送UILocalNotification]]></title>
    <url>%2F2018%2F06%2F11%2FiOS%E5%BC%80%E5%8F%91%E6%9C%AC%E5%9C%B0%E6%8E%A8%E9%80%81UILocalNotification%2F</url>
    <content type="text"><![CDATA[一、简介UILocalNotification 是通过设置时间来触发本地推送通知的通知方式,不需要连网就能实现推送功能。本地通知触发后，会显示在通知中心中，并根据配置，显示横幅和播放声音，和App的icon上显示通知的条数。 UILocalNotification 适用于闹钟、提醒、备忘录等功能。缺点是UILocalNotification可以设置的最大提醒条数为64条。超过64条的通知将系统会自动忽略。 二、使用 创建UILocalNotification实例 设置相关的属性，如：时间、时间间隔、是否重复、推送方式、推送铃声、推送标题、推送简介、推送的参数等等。 注册添加本地通知 Appdelegate.m 接收注册通知 触发通知的业务跳转处理 取消通知 三、属性介绍属性介绍 123456789101112131415161718192021222324252627282930313233@property(nullable, nonatomic,copy) NSDate *fireDate;设置通知的提醒时间@property(nullable, nonatomic,copy) NSTimeZone *timeZone;设置时间的时区@property(nonatomic) NSCalendarUnit repeatInterval; 设置重复间隔的单位，（天、周、月、年，0表示不重复） @property(nullable, nonatomic,copy) NSCalendar *repeatCalendar;重复激发通知所使用的日历单位需要参考的日历，如果不设置的话，系统默认的日历将被作为参考日历。// NSString *const NSGregorianCalendar; 公历// NSString * const NSChineseCalendar; 农历@property(nullable, nonatomic,copy) CLRegion *region;设置触发通知的地理区域@property(nonatomic,assign) BOOL regionTriggersOnce;是否穿越通知地理区域时再次触发通知@property(nullable, nonatomic,copy) NSString *alertBody; 通知提示中显示的消息，内容。@property(nonatomic) BOOL hasAction; 控制该通知是否显示或隐藏警报动作。@property(nullable, nonatomic,copy) NSString *alertAction; 设置通知动作按钮的标题。@property(nullable, nonatomic,copy) NSString *alertLaunchImage;设置通知动作按钮的图像。@property(nullable, nonatomic,copy) NSString *alertTitle; 设置通知原因的简短描述。@property(nullable, nonatomic,copy) NSString *soundName;通知提示音，可以自定义@property(nonatomic) NSInteger applicationIconBadgeNumber;应用程序icon上的提醒个数@property(nullable, nonatomic,copy) NSDictionary *userInfo; 设置应用自定义信息@property (nullable, nonatomic, copy) NSString *category ;设置通知的分类标示 NSCalendarUnit repeatInterval 循环枚举 123456789101112131415161718typedef NS_OPTIONS(NSUInteger, NSCalendarUnit) &#123; NSCalendarUnitEra = kCFCalendarUnitEra,//一个年代、一个世纪循环一次。 NSCalendarUnitYear = kCFCalendarUnitYear,//每年循环一次 NSCalendarUnitMonth = kCFCalendarUnitMonth,//每月循环一次 NSCalendarUnitDay = kCFCalendarUnitDay,//每天循环一次 NSCalendarUnitHour = kCFCalendarUnitHour,//每小时循环一次 NSCalendarUnitMinute = kCFCalendarUnitMinute,//每分钟循环一次 NSCalendarUnitSecond = kCFCalendarUnitSecond,//每秒循环一次 NSCalendarUnitWeekday = kCFCalendarUnitWeekday,//平常日、工作日循环，但是周末也会。(*而不是每周循环，具体和NSCalendarUnitDay有什么区别，暂时没有测试出来，如果哪位知道请告知，感谢) NSCalendarUnitWeekdayOrdinal = kCFCalendarUnitWeekdayOrdinal, NSCalendarUnitQuarter NS_ENUM_AVAILABLE(10_6, 4_0) = kCFCalendarUnitQuarter,//一个季度循环一次 NSCalendarUnitWeekOfMonth NS_ENUM_AVAILABLE(10_7, 5_0) = kCFCalendarUnitWeekOfMonth,//每个月的第几周 NSCalendarUnitWeekOfYear NS_ENUM_AVAILABLE(10_7, 5_0) = kCFCalendarUnitWeekOfYear,//每年的第几周 NSCalendarUnitYearForWeekOfYear NS_ENUM_AVAILABLE(10_7, 5_0) = kCFCalendarUnitYearForWeekOfYear, NSCalendarUnitNanosecond NS_ENUM_AVAILABLE(10_7, 5_0) = (1 &lt;&lt; 15), NSCalendarUnitCalendar NS_ENUM_AVAILABLE(10_7, 4_0) = (1 &lt;&lt; 20), NSCalendarUnitTimeZone NS_ENUM_AVAILABLE(10_7, 4_0) = (1 &lt;&lt; 21),&#125; 四、代码实现1.在 Appdelegate 的application:(UIApplication *)application didFinishLaunchingWithOptions:(NSDictionary *)launchOptions 方法里面添加注册接收方法123if ([UIApplication instancesRespondToSelector:@selector(registerUserNotificationSettings:)])&#123; [[UIApplication sharedApplication] registerUserNotificationSettings:[UIUserNotificationSettings settingsForTypes:UIUserNotificationTypeAlert|UIUserNotificationTypeBadge|UIUserNotificationTypeSound categories:nil]]; &#125; 2.在需要添加通知的页面添加注册通知，或者封装一层调用，可以根据通知需要传入需要的参数，控制通知的注册添加或取消删除123456789101112131415161718192021222324252627282930313233343536373839#pragma mark - 注册本地通知方法// 注册本地通知-(void)registerLocalNotification:(NSString *)timeStr title:(NSString *)title desc:(NSString *)desc soundName:(NSString *)soundName remindType:(NSString *)remindType tagStr:(NSString *)tagStr remindId:(NSString *)remindId&#123; UILocalNotification * notification = [[UILocalNotification alloc] init]; NSDateFormatter * curndf = [[NSDateFormatter alloc] init]; [curndf setDateFormat:@"yyyy-MM-dd"]; NSString * curDate = [curndf stringFromDate:[NSDate date]]; // 时间加上秒 NSString * finalTimeStr = [NSString stringWithFormat:@"%@ %@:00",curDate,timeStr]; NSDateFormatter * finalTimeFormatter = [[NSDateFormatter alloc] init]; [finalTimeFormatter setDateFormat:@"yyyy-MM-dd HH:mm:ss"]; NSDate * finalDate = [finalTimeFormatter dateFromString:finalTimeStr]; // 设置什么时间点(具体的时间)触发本地通知. notification.fireDate = finalDate; // 设置时区,default手机时区 notification.timeZone = [NSTimeZone defaultTimeZone]; // 设置重复间隔, 按天跑 notification.repeatInterval = kCFCalendarUnitDay; // 弹出的通知标题 notification.alertTitle = title; // 弹出的通知内容 notification.alertBody = desc; // Badge个数 notification.applicationIconBadgeNumber = notification.applicationIconBadgeNumber+1; // 通知被触发时播放声音 notification.soundName = UILocalNotificationDefaultSoundName; // 通知触发时播放的声音 notification.soundName = [NSString stringWithFormat:@"%@.mp3",soundName]; // 通知的参数 NSDictionary * userDict = @&#123;@"nTimeStr":timeStr,@"remindType":remindType,@"tag":tagStr,@"remindId":remindId&#125;; notification.userInfo = userDict; // 添加推送到UIApplication [[UIApplication sharedApplication] scheduleLocalNotification:notification]; &#125; 3.取消通知3.1 取消全部的通知12// 取消全部的通知[[UIApplication sharedApplication] cancelAllLocalNotifications]; 3.2 取消对应 ID 的通知123456789101112131415161718192021222324252627282930// IOS最多允许最近本地通知数量是64个，超过限制的本地通知将被忽略。#pragma mark -- 删除通知-(void)cancelLocalNotificationWithKey:(NSString *)key remindType:(NSString *)remindType&#123; // 获取所有本地通知数组 NSArray *localNotifications = [UIApplication sharedApplication].scheduledLocalNotifications; NSLog(@"\n本地通知总数%@ \n 一共: %ld 个",localNotifications ,[localNotifications count]); // 循环遍历所有的通知 for (UILocalNotification *notification in localNotifications) &#123; // 取出每个通知的通知数据 NSDictionary *userInfo = notification.userInfo; if (userInfo) &#123; // 根据设置通知参数时指定的key来获取通知参数 NSString *info = userInfo[@"nTimeStr"]; NSString *type = userInfo[@"remindType"]; // 如果找到需要取消的通知，则取消 if (info != nil) &#123; if ([info isEqualToString:key] &amp;&amp; [type isEqualToString:remindType]) &#123; [[UIApplication sharedApplication] cancelLocalNotification:notification]; NSLog(@"type:%@,key:%@,本地通知取消成功!!!",type,key); break; &#125; &#125; &#125; &#125;&#125; 4.接收通知4.1 前台接收通知，调用系统application:(UIApplication *)application didReceiveLocalNotification:(UILocalNotification *)notification方法 ，在这个方法里面做业务处理1234567891011121314151617181920212223242526272829// 程序没有被杀死时,接收到本地通知时调用--点击通知时会执行这个方法,如果程序被杀死时,这个方法不再走,在application: didFinishLaunchingWithOptions:方法中获取- (void)application:(UIApplication *)application didReceiveLocalNotification:(UILocalNotification *)notification&#123; NSLog(@"notification.userInfo = %@",notification.userInfo); // 获取通知详情 NSDictionary *dict = notification.userInfo; if (dict) &#123; // 根据通知的类型参数做出对应的跳转 if ([dict[@"remindType"] isEqualToString:CPTakeMediciTableName]) &#123; CPMedicineRemindDetailViewController *medicine = [[CPMedicineRemindDetailViewController alloc]init]; medicine.remindId = dict[@"remindId"]; medicine.timeStr = dict[@"nTimeStr"]; medicine.type = CPMedicinePushNow; [[self currentViewController].navigationController pushViewController:medicine animated:YES]; &#125;else if([dict[@"remindType"] isEqualToString:CPMeasureTableName])&#123; CPMeasureRemindDetailViewController *measure = [[CPMeasureRemindDetailViewController alloc]init]; measure.tagStr = dict[@"tag"]; measure.timeStr = dict[@"nTimeStr"]; measure.type = CPMeasurePushNow; [[self currentViewController] presentViewController:measure animated:YES completion:nil]; &#125; &#125;&#125; 4.2 应用在后台被杀死了调用pplication:(UIApplication *)application didFinishLaunchingWithOptions:(NSDictionary *)launchOptions方法，在这个方法里面做业务处理在pplication:(UIApplication *)application didFinishLaunchingWithOptions:(NSDictionary *)launchOptions方法中添加下面的代码 12345678910111213141516171819202122232425if (launchOptions != nil) &#123; UILocalNotification *localNotification = launchOptions[UIApplicationLaunchOptionsLocalNotificationKey]; if (localNotification != nil) &#123; // 程序完全退出状态下，点击推送通知后的业务处理 // 根据通知的参数做不同的跳转 NSDictionary *dict = localNotification.userInfo; if (dict) &#123; if ([dict[@"remindType"] isEqualToString:CPTakeMediciTableName]) &#123; CPMedicineRemindDetailViewController *medicine = [[CPMedicineRemindDetailViewController alloc]init]; medicine.remindId = dict[@"remindId"]; medicine.timeStr = dict[@"nTimeStr"]; CPNavigationController *nav = [[CPNavigationController alloc]initWithRootViewController:medicine]; [AppDelegate sharedInstance].window.rootViewController = nav; &#125;else if([dict[@"remindType"] isEqualToString:CPMeasureTableName])&#123; CPMeasureRemindDetailViewController *measure = [[CPMeasureRemindDetailViewController alloc]init]; measure.tagStr = dict[@"tag"]; measure.timeStr = dict[@"nTimeStr"]; [AppDelegate sharedInstance].window.rootViewController = measure; &#125; &#125; &#125; &#125; 五、其他设置实现发送基于位置的通知方法（iOS8+）： 1、无需编码，如果设备用户打开了定位，系统会给用户当前的位置来决定是否要给用户发送通知； 2、需要获取用户定位权限CLLocation； 3、精准度一般般。]]></content>
      <categories>
        <category>iOS 开发</category>
      </categories>
      <tags>
        <tag>本地推送</tag>
        <tag>UILocalNotification</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[001- 初识汇编]]></title>
    <url>%2F2018%2F04%2F20%2F001-%E5%88%9D%E8%AF%86%E6%B1%87%E7%BC%96%2F</url>
    <content type="text"><![CDATA[我们在学习逆向开发之前,我们要了解一个基本的逆向原理.首先我们是逆向iOS系统上面的APP.那么我们知道,一个APP安装在手机上面的可执行文件本质上是二进制文件.因为iPhone手机本质上执行的指令是二进制.是由手机上的CPU执行的.所以逆向开发是建立在分析二进制上面.所以今天我们接下来的课程从非常基础的东西开始讲解. 汇编语言的发展机器语言 由0和1组成的机器指令. 加：0100 0000 减：0100 1000 乘：1111 0111 1110 0000 除：1111 0111 1111 0000 汇编语言(assembly language) 使用助记符代替机器语言如: 加：INC EAX 通过编译器 0100 0000 减：DEC EAX 通过编译器 0100 1000 乘：MUL EAX 通过编译器 1111 0111 1110 0000 除：DIV EAX 通过编译器 1111 0111 1111 0000 ###高级语言（High-level programming language) C\C++\Java\OC\Swift,更加接近人类的自然语言比如C语言: 加：A+B 通过编译器 0100 0000 减：A-B 通过编译器 0100 1000 乘：A*B 通过编译器 1111 0111 1110 0000 除：A/B 通过编译器 1111 0111 1111 0000 我们的代码在终端设备上是这样的过程: 汇编语言与机器语言一一对应，每一条机器指令都有与之对应的汇编指令 汇编语言可以通过编译得到机器语言，机器语言可以通过反汇编得到汇编语言 高级语言可以通过编译得到汇编语言 \ 机器语言，但汇编语言\机器语言几乎不可能还原成高级语言 汇编语言的特点 可以直接访问、控制各种硬件设备，比如存储器、CPU等，能最大限度地发挥硬件的功能 能够不受编译器的限制，对生成的二进制代码进行完全的控制 目标代码简短，占用内存少，执行速度快 汇编指令是机器指令的助记符,同机器指令一一对应。每一种CPU都有自己的机器指令集\汇编指令集，所以汇编语言不具备可移植性 知识点过多，开发者需要对CPU等硬件结构有所了解，不易于编写、调试、维护 不区分大小写，比如mov和MOV是一样的 汇编的用途(哥么我学了能干啥?) 编写驱动程序、操作系统（比如Linux内核的某些关键部分） 对性能要求极高的程序或者代码片段，可与高级语言混合使用（内联汇编） 软件安全 病毒分析与防治 逆向\加壳\脱壳\破解\外挂\免杀\加密解密\漏洞\黑客 理解整个计算机系统的最佳起点和最有效途径 为编写高效代码打下基础 弄清代码的本质 函数的本质究竟是什么? ++a + ++a + ++a 底层如何执行的? 编译器到底帮我们干了什么? DEBUG模式和RELEASE模式有什么关键的地方被我们忽略 …… 最后来句装13的话 越底层越单纯!真正的程序员都需要了解的一门非常重要的语言,汇编! 汇编语言的种类 目前讨论比较多的汇编语言有 8086汇编（8086处理器是16bit的CPU） Win32汇编 Win64汇编 ARM汇编（嵌入式、Mac、iOS） …… 我们iPhone里面用到的是ARM汇编,但是不同的设备也有差异.因CPU的架构不同. 架构 设备 armv6 iPhone, iPhone2, iPhone3G, 第一代、第二代 iPod Touch armv7 iPhone3GS, iPhone4, iPhone4S,iPad, iPad2, iPad3(The New iPad), iPad mini, iPod Touch 3G, iPod Touch4 armv7s iPhone5, iPhone5C, iPad4(iPad with Retina Display) arm64 iPhone5S 以后 iPhoneX , iPad Air, iPad mini2以后 几个必要的常识 要想学好汇编,首先需要了解CPU等硬件结构 APP/程序的执行过程 硬件相关最为重要是CPU/内存 在汇编中,大部分指令都是和CPU与内存相关的 总线 每一个CPU芯片都有许多管脚，这些管脚和总线相连，CPU通过总线跟外部器件进行交互 总线：一根根导线的集合 总线的分类 地址总线 数据总线 控制总线 举个例子 地址总线 它的宽度决定了CPU的寻址能力 8086的地址总线宽度是_20_，所以寻址能力是_1M_（ 2^20 ） 数据总线 它的宽度决定了CPU的单次数据传送量，也就是数据传送速度 8086的数据总线宽度是_16_，所以单次最大传递2个字节的数据 控制总线 它的宽度决定了CPU对其他器件的控制能力、能有多少种控制 做个小练习 一个CPU 的寻址能力为8KB,那么它的地址总线的宽度为____ 8080,8088,80286,80386 的地址总线宽度分别为16根,20根,24根,32根.那么他们的寻址能力分别为多少____KB, ____MB,____MB,____GB? 8080,8088,8086,80286,80386 的数据总线宽度分别为8根,8根,16根,16根,32根.那么它们一次可以传输的数据为:____B,____B,____B,____B,____B, 从内存中读取1024字节的数据,8086至少要读____次,80386至少要读取____次. 解答: 8KB = 1024 * 8 = 2^10 + 2^3 ,所以地址总线的宽度为13 地址总线为16,所以 寻址能力为 2^16 = 2^10 * 2^6 = 64KB 地址总线为20,所以 寻址能力为 2^20 = 2^10 2^10 = 1024 1024 = 1MB; 地址总线为24,所以 寻址能力为 2^24 = 2^20 2^4 = 1MB 16 = 16MB; 地址总线为32,所以 寻址能力为 2^30 = 2^30 2^2 = 1GB 4 = 4GB; 答案 内存 内存地址空间的大小受CPU地址总线宽度的限制。8086的地址总线宽度为20，可以定位2^20个不同的内存单元（内存地址范围0x00000~0xFFFFF），所以8086的内存空间大小为1MB 0x00000~0x9FFFF：主存储器。可读可写 0xA0000~0xBFFFF：向显存中写入数据，这些数据会被显卡输出到显示器。可读可写 0xC0000~0xFFFFF：存储各种硬件\系统信息。只读 ##进制学习进制的障碍 很多人学不好进制，原因是总以十进制为依托去考虑其他进制，需要运算的时候也总是先转换成十进制，这种学习方法是错误的.我们为什么一定要转换十进制呢？仅仅是因为我们对十进制最熟悉，所以才转换.每一种进制都是完美的,想学好进制首先要忘掉十进制，也要忘掉进制间的转换！ ###进制的定义 八进制由8个符号组成:0 1 2 3 4 5 6 7 逢八进一 十进制由10个符号组成:0 1 2 3 4 5 6 7 8 9逢十进一 N进制就是由N个符号组成:逢N进一 #####做个练习 1 + 1 在____情况下等于 3 ? 12345678910111213............. 十进制由10个符号组成: 0 1 3 2 8 A B E S 7 逢十进一 如果这样定义十进制: 1 + 1 = 3!就对了! 这样的目的何在?传统我们定义的十进制和自定义的十进制不一样.那么这10个符号如果我们不告诉别人这个符号表,别人是没办法拿到我们的具体数据的!用于加密! 十进制由十个符号组成,逢十进一,符号是可以自定义的!! ###进制的运算 #####做个练习 八进制运算 2 + 3 = , 2 * 3 = ,4 + 5 = ,4 * 5 = . 277 + 333 = , 276 * 54 = , 237 - 54 = , 234 / 4 = . #####八进制加法表123456789101112 0 1 2 3 4 5 6 7 10 11 12 13 14 15 16 1720 21 22 23 24 25 26 27...1+1 = 2 1+2 = 3 2+2 = 4 1+3 = 4 2+3 = 5 3+3 = 61+4 = 5 2+4 = 6 3+4 = 7 4+4 = 10 1+5 = 6 2+5 = 7 3+5 = 10 4+5 = 11 5+5 = 121+6 = 7 2+6 = 10 3+6 = 11 4+6 = 12 5+6 = 13 6+6 = 141+7 = 10 2+7 = 11 3+7 = 12 4+7 = 13 5+7 = 14 6+7 = 15 7+7 = 16 #####八进制乘法表123456780 1 2 3 4 5 6 7 10 11 12 13 14 15 16 17 20 21 22 23 24 25 26 27...1*1 = 1 1*2 = 2 2*2 = 4 1*3 = 3 2*3 = 6 3*3 = 11 1*4 = 4 2*4 = 10 3*4 = 14 4*4 = 201*5 = 5 2*5 = 12 3*5 = 17 4*5 = 24 5*5 = 311*6 = 6 2*6 = 14 3*6 = 22 4*6 = 30 5*6 = 36 6*6 = 441*7 = 7 2*7 = 16 3*7 = 25 4*7 = 34 5*7 = 43 6*7 = 52 7*7 = 61 #####实战四则运算123 277 236 276 234+ 333 - 54 * 54 / 4-------- -------- -------- -------- ###二进制的简写形式12345 二进制: 1 0 1 1 1 0 1 1 1 1 0 0三个二进制一组: 101 110 111 100 八进制: 5 6 7 4四个二进制一组: 1011 1011 1100 十六进制: b b c 二进制：从0 写到 11110000 0001 0010 0011 0100 0101 0110 0111 1000 1001 1010 1011 1100 1101 1110 1111这种二进制使用起来太麻烦，改成更简单一点的符号：0 1 2 3 4 5 6 7 8 9 A B C D E F 这就是十六进制了 ###数据的宽度数学上的数字，是没有大小限制的，可以无限的大。但在计算机中，由于受硬件的制约，数据都是有长度限制的（我们称为数据宽度），超过最多宽度的数据会被丢弃。 1234567891011121314#import &lt;UIKit/UIKit.h&gt;#import "AppDelegate.h"int test()&#123; int cTemp = 0x1FFFFFFFF; return cTemp;&#125;int main(int argc, char * argv[]) &#123; printf("%x\n",test()); @autoreleasepool &#123; return UIApplicationMain(argc, argv, nil, NSStringFromClass([AppDelegate class])); &#125;&#125; ###计算机中常见的数据宽度 位(Bit): 1个位就是1个二进制位.0或者1 字节(Byte): 1个字节由8个Bit组成(8位).内存中的最小单元Byte. 字(Word): 1个字由2个字节组成(16位),这2个字节分别称为高字节和低字节. 双字(Doubleword): 1个双字由两个字组成(32位) 那么计算机存储数据它会分为有符号数和无符号数.那么关于这个看图就理解了! 12无符号数,直接换算!有符号数: 正数: 0 1 2 3 4 5 6 7 负数: F E D B C A 9 8 -1 -2 -3 -4 -5 -6 -7 -8 ###自定义进制符号 #####练习 现在有10进制数 10个符号分别是：2，9，1，7，6，5，4， 8，3 , A 逢10进1 那么： 123 + 234 = ____ 123456789101112十进制: 0 1 2 3 4 5 6 7 8 9自定义: 2 9 1 7 6 5 4 8 3 A 92 99 91 97 96 95 94 98 93 9A 12 19 11 17 16 15 14 18 13 1A 72 79 71 77 76 75 74 78 73 7A 62 69 61 67 66 65 64 68 63 6A 52 59 51 57 56 55 54 58 53 5A 42 49 41 47 46 45 44 48 43 4A 82 89 81 87 86 85 84 88 83 8A 32 39 31 37 36 35 34 38 33 3A 922 那么刚才通过10进制运算可以转化10进制然后查表!但是如果是其他进制.我们就不能转换,要直接学会查表 现在有9进制数 9个符号分别是：2，9，1，7，6，5，4， 8，3 逢9进1 那么： 123 + 234 = ____ 123456789101112十进制: 0 1 2 3 4 5 6 7 8 自定义: 2 9 1 7 6 5 4 8 3 92 99 91 97 96 95 94 98 93 12 19 11 17 16 15 14 18 13 72 79 71 77 76 75 74 78 73 62 69 61 67 66 65 64 68 63 52 59 51 57 56 55 54 58 53 42 49 41 47 46 45 44 48 43 82 89 81 87 86 85 84 88 83 32 39 31 37 36 35 34 38 33 922 寄存器内部部件之间由总线连接 对程序员来说，CPU中最主要部件是寄存器，可以通过改变寄存器的内容来实现对CPU的控制 不同的CPU，寄存器的个数、结构是不相同的 通用寄存器 ARM64拥有有31个64位的通用寄存器 x0 到 x30,这些寄存器通常用来存放一般性的数据，称为通用寄存器（有时也有特定用途） 那么w0 到 w28 这些是32位的. 因为64位CPU可以兼容32位.所以可以只使用64位寄存器的低32位. 比如 w0 就是 x0的低32位! 通常，CPU会先将内存中的数据存储到通用寄存器中，然后再对通用寄存器中的数据进行运算 假设内存中有块红色内存空间的值是3，现在想把它的值加1，并将结果存储到蓝色内存空间 CPU首先会将红色内存空间的值放到X0寄存器中：mov X0,红色内存空间 然后让X0寄存器与1相加：add X0,1 最后将值赋值给内存空间：mov 蓝色内存空间,X0 ###pc寄存器(program counter) 为指令指针寄存器，它指示了CPU当前要读取指令的地址 在内存或者磁盘上，指令和数据没有任何区别，都是二进制信息 CPU在工作的时候把有的信息看做指令，有的信息看做数据，为同样的信息赋予了不同的意义 比如 1110 0000 0000 0011 0000 1000 1010 1010 可以当做数据 0xE003008AA 也可以当做指令 mov x0, x8 CPU根据什么将内存中的信息看做指令？ CPU将pc指向的内存单元的内容看做指令 如果内存中的某段内容曾被CPU执行过，那么它所在的内存单元必然被pc指向过 bl指令 CPU从何处执行指令是由pc中的内容决定的，我们可以通过改变pc的内容来控制CPU执行目标指令 ARM64提供了一个mov指令（传送指令），可以用来修改大部分寄存器的值，比如 mov x0,#10、mov x1,#20 但是，mov指令不能用于设置pc的值，ARM64没有提供这样的功能 ARM64提供了另外的指令来修改PC的值，这些指令统称为转移指令，最简单的是bl指令 bl指令 – 练习现在有两段代码!假设程序先执行A,请写出指令执行顺序.最终寄存器x0的值是多少? 123456789101112_A: mov x0,#0xa0 mov x1,#0x00 add x1, x0, #0x14 mov x0,x1 bl _B mov x0,#0x0 ret_B: add x0, x0, #0x10 ret]]></content>
      <categories>
        <category>汇编</category>
        <category>安全攻防</category>
      </categories>
      <tags>
        <tag>安全攻防</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[OpenGL学习 纹理下(五)]]></title>
    <url>%2F2018%2F02%2F15%2FOpenGL%20%E7%BA%B9%E7%90%86%E4%B8%8B%EF%BC%88%E4%BA%94%EF%BC%89%2F</url>
    <content type="text"><![CDATA[欢迎来到我的博客,请输入密码继续阅读. Incorrect Password! No content to display! ]]></content>
      <categories>
        <category>OpenGL</category>
      </categories>
      <tags>
        <tag>OpenGL</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[OpenGL学习 纹理上(五)]]></title>
    <url>%2F2018%2F02%2F11%2F15244707402194%2F</url>
    <content type="text"><![CDATA[欢迎来到我的博客,请输入密码继续阅读. Incorrect Password! No content to display! ]]></content>
      <categories>
        <category>OpenGL</category>
      </categories>
      <tags>
        <tag>OpenGL</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[OpenGL学习 基本变化 (四)]]></title>
    <url>%2F2018%2F02%2F09%2F15244691153165%2F</url>
    <content type="text"><![CDATA[一、抗锯齿混合的两大功能:颜⾊色组合、抗锯⻮齿 混合处理-抗锯齿 123456//开启混合处理理 glEnable(GL_BLEND);//指定混合因⼦子 GLBlendFunc(GL_SRC_ALPHA,GL_ONE_MINUS_SRC_ALPHA);//指定混合⽅方程式 glBlendEquation(GL_FUNC_ADD);glEnable(GL_POINT_SMOOTH); //对点进⾏行行抗锯⻮齿处理理glEnable(GL_LINE_SMOOTH);//对线进⾏行行抗锯⻮齿处理理 glEnable(GL_POLYGON_SMOOTH);//对多边形进⾏行行抗锯⻮齿处理理 二、多重采样1234//1.可以调⽤用 glutInitDisplayMode 添加采样缓存区 glutInitDisplayMode(GLUT_MULTISAMPLE);//2.可以使⽤用glEnable| glDisable组合使⽤用GLUT_MULTISAMPLE 打开| 关闭 多重采样。glEnable(GLUT_MULTISAMPLE);glDisable(GLUT_MULTISAMPLE); 三、多重采样、抗锯⻮齿混合综合使⽤用1234567glDisable(GLUT_MULTISAMPLE);glEnable(GL_POINT_SMOOTH);//Draw some smooth pointglDisable(GL_POINT_SMOOTH);glDisable(GL_LINE_SMOOTH);glEnable(GLUT_MULTISAMPLE);//Draw some smooth polygon 四、多重采样 拓拓展多重采样缓存区在默认情况下使⽤用⽚片段RGB值，并不不包含颜 ⾊色的alpha成分，我们可以通过调⽤用glEnable来修改这个 ⾏行行为: GL_SAMPLE_ALPHA_TO_COVERAGE 使⽤用alpha值 GL_SAMPLE_ALPHA_TO_ON 使⽤用alpha值并设为1，并 使⽤用它。 GL_SAMPLE_COVERAGE 使⽤用glSampleCoverage 所设置的值。 当启⽤用 GL_SAMPLE_COVERAGE 时，可以使⽤用 glSampleCoverage函数允许指定⼀一个特定的值，它是与⽚片 段覆盖值进⾏行行按位与操作的结果。 五、向量 如何定义三维、四维向量量或三维向量量数组、四维向量量数组?M3DVector3f :表示⼀一个三维的向量量(x,y,z)M3DVector4f :表示⼀一个四维的向量量(x,y,z,w)(R,G,B,A) 六、点乘 七、使用矩阵堆栈123456789101112131415//类型GLMatrixStack::GLMatrixStack(int iStackDepth = 64);//在堆栈顶部载⼊入⼀一个单元矩阵void GLMatrixStack::LoadIdentity(void);//在堆栈顶部载⼊入任何矩阵 //参数:4*4矩阵void GLMatrixStack::LoadMatrix(const M3DMatrix44f m);//矩阵乘以矩阵堆栈顶部矩阵，相乘结果存储到堆栈的顶部void GLMatrixStack::MultMatrix(const M3DMatrix44f);//获取矩阵堆栈顶部的值 GetMatrix 函数 //为了了适应GLShaderMananger的使⽤用，或者获取顶部矩阵的副本const M3DMatrix44f &amp; GLMatrixStack::GetMatrix(void);void GLMatrixStack::GetMatrix(M3DMatrix44f mMatrix); 八、压栈、出栈1234567//将当前矩阵压⼊入堆栈void GLMatrixStack::PushMatrix(void);//将M3DMatrix44f 矩阵对象压⼊入当前矩阵堆栈void PushMatrix(const M3DMatrix44f mMatrix);//将GLFame 对象压⼊入矩阵对象void PushMatrix(GLFame &amp;frame);//出栈(出栈指的是移除顶部的矩阵对象) void GLMatrixStack::PopMatrix(void); 九、仿射变换 GLMastrixStack 内建了旋转\平移\缩放12345//Rotate 函数angle参数是传递的度数，⽽而不不是弧度void MatrixStack::Rotate(GLfloat angle,GLfloat x,GLfloaty,GLfloat z);void MatrixStack::Translate(GLfloat x,GLfloat y,GLfloat z);void MatrixStack::Scale(GLfloat x,GLfloat y,GLfloat z); 十、使用照相机 和 角色帧 进行移动12345class GLFrame &#123;protected:M3DVector3f vOrigin; // Where am I? M3DVector3f vForward; // Where am I going? M3DVector3f vUp; // Which way is up?&#125; 十一、GLFrame12345678//将堆栈的顶部压⼊入任何矩阵void GLMatrixStack::LoadMatrix(GLFrame &amp;frame);//矩阵乘以矩阵堆栈顶部的矩阵。相乘结果存储在堆栈的顶部 void GLMatrixStack::MultMatrix(GLFrame &amp;frame);//将当前的矩阵压栈void GLMatrixStack::PushMatrix(GLFrame &amp;frame); 十二、照相机管理 12//GLFrame函数，这个函数⽤用来检索条件适合的照相矩阵void GetCameraMatrix(M3DMatrix44f m,bool bRotationOnly = flase);]]></content>
      <categories>
        <category>OpenGL</category>
      </categories>
      <tags>
        <tag>OpenGL</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[OpenGL学习 深度测试(三)]]></title>
    <url>%2F2018%2F02%2F08%2F15244657893765%2F</url>
    <content type="text"><![CDATA[一、渲染过程是中可能产生的问题 解决办法：1：油画法2：正面、背面剔除。3：深度测试。 1.1、油画法 油画法：比较消耗性能，重复绘制了重叠部分，对于多个图形叠加在一起的，难以分辨哪个是最上层的，导致渲染混乱 1.2、正面背面剔除可以调用下面两个方法开启或关闭表面剔除 12glEnable(GL_CULL_FACE); //开启glDisable(GL_CULL_FACE); // 关闭 该函数的原型如下void glFrontFace(GLenum mode); mode 参数的可选的值有 GL_CW 和 GL_CCW （默认值是GL_CCW） GL_CW 表示顶点的排列顺序是顺时针的面 是正面。GL_CCW 表示顶点的排列顺序是逆时针的面是正面 （默认值） void glCullFace() GL_FRONT // 正面剔除GL_BACK // 背面剔除GL_FRONT_ANF_BACK 正面和反面都要剔除 二、什么叫深度？所谓的深度，就在坐标系中，像素Z坐标距离观察者的距离观察者，可以在任何位置，OpenGL会有专门有一块缓存区来存放Z值，深度缓冲区！每个像素上的Z值。 三、深度缓冲去区的作用一般情况下，我们绘制图形时，后面绘制的会覆盖前面的图形。一般绘制的顺序先后面再前面。产生一个性能问题，就是遮盖部分，先绘制的会被覆盖，这没有任何意义的绘制。深度测试就是用来解决这个问题的它是如何处理的？有了深度缓冲区之后，绘制的时候会检查Z,靠近观察者的覆盖。而不是靠绘制顺序来决定。 四、如何使用深度缓冲区测试？为什么要测试？一旦开启之后就会先测试深度值再绘制 glEnable (GLDEPTHTEST); 默认情况下Z值小的情况下会被覆盖如果是观察者，在Z轴的正方向，Z值大的靠近观察者如果是观察者，在Z轴的负方向，Z值小的靠近观察者 五、多边形模型 使用glPolygonMode(Glenum face,Glenum mode) 函数来指定填充方式Face参数:GL_FRONT、GL_BACK、GL_FRONT_AND_BACKMode参数:GL_FILL(默认实心填充) 、GL_LINE、GL_POINT 六、多边形偏移深度测试实现深度的过程中，可能产生的2种问题:1、z-fighting(z冲突)2、图形重叠(无法体现深度) 七、如何解决深度值相同，造成的冲突问题第一种方法：在第二次绘制时，稍微偏移一点点解决这个问题。注意：必须非常小心确保Z值的间隙 第二种方法：采样glPolygonOffset 函数。使得可以调节片段的深度值。使得深度之偏移而不产生悬浮 glPolygonOffset 函数void glPolygonOffset(Glfloat factor,Glfloat units); 应用到片段上总偏移计算方程式:Depth Offset = (DZ factor) + (r units);DZ:深度值(Z值)r:使得深度缓冲区产生变化的最小值负值，将使得z值距离我们更近，而正值，将使得z值距离我们更远，对于上节课的案例，我们设置factor和units设置为-1，0 八、裁剪在OpenGL 提高渲染的一种方式，只刷新屏幕上发生变化的部分。OpenGL 允许我们将要进行渲染的窗口只去指定一个裁剪框。 1234567//1 开启裁剪测试glEnable(GL_SCISSOR_TEST);//2.关闭裁剪测试glDisable(GL_SCISSOR_TEST);//3.指定裁剪窗口//x,y:指定裁剪框左下角位置;width,height:指定裁剪尺寸void glScissor(Glint x,Glint y,GLSize width,GLSize height); 九、混合我们把OpenGL 渲染时会把颜色值存在颜色缓存区中，每个片段的深度值也是放在深度缓冲区。当深度缓冲区被关闭时，新的颜色将简单的覆盖原来颜色缓存区存在的颜色值，当深度缓冲区再次打开时，新的颜色片段只是当它们比原来的值更接近邻近的裁剪平面才会替换原来的颜色片段。glEnable(GL_BlEND); 9.1 组合颜色目标颜色:已经存储在颜色缓存区的颜色值源颜色:作为当前渲染命令结果进入颜色缓存区的颜色值当混合功能被启动时，源颜色和目标颜色的组合方式是混合方程式控制的。在默认情况下，混合方程式如下所示: 123456Cf = (Cs * S) + (Cd * D)Cf :最终计算参数的颜色Cs : 源颜色Cd :目标颜色S:源混合因子D:目标混合因子 9.2 设置混合因子1234设置混合因子，需要用到glBlendFun函数glBlendFunc(GLenum S,GLenum D);S:源混合因子D:目标混合因子 9.3 混合因子枚举列表 表中R、G、B、A 分别代表红、绿、蓝、alpha。表中下标S、D，分别代表源、目标表中C 代表常量颜色(默认黑色) 9.4总结最终颜色是以原先的红色(目标颜色)与 后来的蓝色(源颜色)进行组合。源颜色的alpha值越高，添加的蓝色颜色成分越高，目标颜色所保留的成分就会越少。混合函数经常用于实现在其他一些不透明的物体前面绘制一个透明物体的效果 十、改变组合方程式默认混合方程式:Cf = (CsS)+(CdD)实际上远不止这一种混合方程式，我们可以从5个不同的方程式中进行选择 10.1 改变混合方程式的函数 glBlendEquation()选择混合方程式的函数:glbBlendEquation(GLenum mode); 10.2 glBlendFuncSeparate 函数1234567除了能使用glBlendFunc 来设置混合因子，还可以有更灵活的选择。strRGB: 源颜色的混合因子dstRGB: 目标颜色的混合因子strAlpha: 源颜色的Alpha因子dstAlpah: 目标颜色的Alpha因子void glBlendFuncSeparate(GLenum strRGB,GLenum dstRGB,GLenum strAlpha,GLenumdstAlpha); 10.3 glBlendFuncSeparate 注意 glBlendFunc 指定 源和目标 RGBA值的混合函数;但是glBlendFuncSeparate函数则允许为RGB 和 Alpha 成分单独指定混合函数。在混合因子表中，GL_CONSTANT_COLOR,GL_ONE_MINUS_CONSTANT_COLOR,GL_CONSTANT_ALPHA,GL_ONE_MINUS_CONSTANT值允许混合方程式中引入一个常量混合颜色。 10.4 常量混合颜色常量混合颜色，默认初始化为黑色(0.0f,0.0f,0.0f,0.0f)，但是还是可以修改这个常量混合颜色。void glBlendColor(GLclampf red ,GLclampf green ,GLclampf blue ,GLclampf alpha );]]></content>
      <categories>
        <category>OpenGL</category>
      </categories>
      <tags>
        <tag>OpenGL</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[OpenGL学习 基础渲染(二)]]></title>
    <url>%2F2018%2F02%2F07%2F15244572175577%2F</url>
    <content type="text"><![CDATA[在OpenGL 3.0之前，OpenGL 包含一个固定功能的管线，它可以在不使用着色器的情况下处理几何与像素数据。在3.1版本开始，固定管线从核心模式去掉。因此现在需要使用着色器来完成工作。使 OpenGL 来说，我们会使 GLSL,(OpenGL Shading Langruage，它是在OpenGL 2.0版本发布的)。 语法与“C、C++”类似。 一、基础图形管线OpenGL 中图元只不过是顶点的集合以预定义的方式结合在一起。管线分为:2个部分，上半部分是客户机端，下半部分是服务器端。 客户端是存储在CPU存储 中的，并且在应用程序中执行 ，或者在主系统内存的驱动程序中执行。驱动程序会将渲染命令和数组组合起来，发送给服务执执 !(在一台典型的个人计算机上，服务器就是实际上就是图形加速卡上的硬件和内存)服务器和 客户机在功能上也是异步的。 它们是各自独力的软件块或硬件块。我们是希望它们2个端都尽量在 不停的工作。客户端不断的把数据块和命令块组合在一起输送到缓冲区，然后缓冲区就会发送到服务器执 。 如果服务器停止工作等待客户机，或者客户机停止作来等待服务器做好接受更多的命令和准备，我们把这种情况成为管线停滞 二、着色器渲染过程，必备的两个着色器“顶点着色器”和“片元着色器”。上图的Vertex Shader(顶点着色器) 和 Fragment Shader(片元着色器)着色器是使用GLSL编写的程序，看起来与C语言非常类似。 着色器必须从源代码中编译和链接在一起。最终准备就绪的着色器程序顶点着色器 –&gt;处理从客户机输入的数据、应用变换、进行其他的类型的数学运算来计算关照效果、位移、颜 值等等。(**为了渲染共有3个顶点的三角形，顶点着色器将执 3次，也就是为 了每个顶点执一次)在目前的硬件上有多个执行单元同时运行 ，就意味着所有的3个顶点可以同时进行处理 ! 图上(primitive Assembly 说明的是:3个顶点已经组合在一起， 三角形已经逐个片段的进行光栅化。每个片段通过执片元元着器，进行 填充。 元着器会输出我们将屏幕上看到的最终颜色值。 三、3种向OpenGL着色器传递渲染数据的方法 属性 Uniform 纹理3.1 属性 属性：就是对一个顶点都要作改变的数据元素。实际上，顶点位置本身就是一个属性。属性可以是浮点类型、整型、布尔类型。 属性总是以四维向 的形式进行内部存储的，即使我们不会使用所有的4个分量。一个顶点位置可能存储(x,y,z)，将占有4个分量中的3个。实际上如果是在平面情况下:只要在xy平面上就能绘制，那么Z分量就会自动设置为0;属性还可以是:纹理坐标、颜色值、关照计算表面法线在顶点程序(shader渲染)可以代表你想要的任何意义。因为都是你设定的。属性会从本地客户机内存中复制存储在图形硬件中的一个缓冲区上。这些属性只提供给顶点着 使 ，对于 元着 有太 意义。声明:这些属性对每个顶点都要做改变，但并不意味着它们的值不能重复。通常情况下，它们都是 不一样样的，但有可能整个数组都是同一值的情况。 3.2 Uniform属性是 种对整个批次属性都取统一值的单一值，它是不变的。 通过设置uniform变量就紧接着发送一个图元批次命令。Uniform变量实际上可以无限次限制地使用，设置一个应用于整个表面的单个颜色值，还可以设置一个时间值。在每次渲染某种类型的顶点动画时修改它。注意:这 的uniform 变量每个批次改变一次，而不是每个顶点改变一次。uniform变量最常见的应该是在顶点渲染中设置变换矩阵与属性相同点:可以是浮点值、整数、布尔值与属性不同点:顶点着色器和片元着色器都可以用 uniform变量 。uniform 变量还可以是标量类型、 矢量类型、uniform矩阵。 3.3 纹理传递给着器的第三种数据类型:纹理数据 在顶点着色器、 片段着色器中都可以对纹理数据进行采样和筛选。典型的应用场景: 片段着色器对一个纹理值进行采样，然后在一个三角形表面应用渲染纹理数据。纹理数据， 不仅仅表现在图形，很多图形文件格式都是以无符号字节(每个颜色通道8位)形式对颜分量进行存储的。 3.4 输出输出数据：简单的从一个阶段传递到下一个阶段。客户端的代码接触不到这些内部变量。我们的OpenGL开发暂时接触不到！ 四、创建坐标系4.1 正投影 这就是一个正投影的 例子，在所在3个轴(X,Y,Z)中，它们的范围都是从-100到+100。这个视景体将包括所有的 几何图形。如果你指定 了视景体外的几何图形，就会被裁减掉!(它将沿着视景体的边界进行剪切)在正投影中，所有在这个空间范围内的所有东西都将被呈现在屏幕上。 存在照相机或视点坐标系的概念。 4.2透视投影setPerspective(float ffov,float fAspect,float fNear,float fFar) 透视投影会进行透视除法对距离观察者很远的对象进行缩短和收缩。在投影到屏幕之后，视景体背面与视景体正面的宽度测量标准不同。上图所示:平截头体(frustum)的 何体，它的观察方向是从金字塔的尖端到宽阔端。观察者的视点与金字塔的尖端拉开一定距离。 123456789GLFrustum类通过setPerspective 法为我们构建一个平截头体。参数:fFov:垂直方向上的视场角度fAspect:窗口的宽度与高度的纵横 fNear:近裁剪面距离fFar:远裁剪面距离纵横 = 宽(w)/ (h)CLFrustum::SetPerspective(float fFov,float fAspect,float fNear,float fFar); 五、使用存储着色器5.1、使用背景5.2存储着色器的使用 单位着色器 平面着色器 上色着色器 默认光源着色器 点光源着色器 纹理替换矩阵 纹理调整着色器 纹理光源着色器 5.3 GLShaderManager 的初始化12345678// 定义着色器GLShaderMananger shaderManager;// 初始化着色器shaderManager.IntalizeStockShaders()//使用shaderManager userStockManager(参数列表) 5.4 GLShaderManager 属性 存储着色器为每一个变量都使用一致的内部变量命名规则和相同的属性槽，以上就是存储着色器的属性列表。 5.5 GLShanderManager 的 uniform值一般情况，要对几何图形进行渲染，我们需要给对象递交属性矩阵， 先要绑定我们想要使用的着色器程序上，并提供程序的uniform值。但是GLShanderManager 类可以暂时为我们完成工作。useStockShader 函数会选择一个存储着色器并提供这个着色器的uniform值。 单位着色器 12345//单位着色器:只是简单地使用默认笛卡尔坐标系(坐标范围(-1.0，1.0))。所有的片段都应用同一种颜色 ，几何图形为心和未渲染的。//需要设置存储着色器一个属性: GLT_ATTRIBUTE_VERTEX(顶点分量)//参数2:vColor[4],你需要的颜色GLShaderManager::UserStockShader(GLT_ATTRIBUTE_VERTEX,GLfloat vColor[4]); 平面着色器 123456//参数1:平面着色器 //参数2:允许变化的4*4矩阵//参数3:颜色//它将统一着色器进行了拓展。允许为几何图形变换指定一个 4 * 4 变换矩阵。经常被称为“模型视图投影矩阵”GLShaderManager::UserStockShader(GLT_SHADER_FLAT,GLfloat mvp[16],GLfloat vColor[4]); 上色着器 1234//在几何图形中应用的变换矩阵。//需要设置存储着色器的 GLT_ATTRIBUTE_VERTEX(顶点分量 ) 和GLT_ATTRIBUTE_COLOR(颜色分量 ) 2个属性。颜色值将被平滑地插入顶点之间(平滑着色 )GLShaderManager::UserStockShader(GLT_SHADER_SHADED,GLfloat mvp[16]); 默认光源着色器 1234567//参数1:默认光源着色器 //参数2:模型视图矩阵//参数3:投影矩阵//参数4:颜 值//这种着色器，是对象产 阴影和关照的效果。需要设置存储着色器的 GLT_ATTRIBUTE_VERTEX(顶点分量) 和GLT_ATTRIBUTE_NORMAL(表面法线)GLShaderManager::UserStockShader(GLT_SHADER_DEFAULT_LIGHT,GLfloat mvMatrix[16],GLfloatpMatrix[16],GLfloat vColor[4]); 点光源着色器 12345678//参数1:点光源着色器//参数2:模型视图矩阵//参数3:投影矩阵//参数4:视点坐标光源位置//参数5:颜色值//点光源着色器和默认光源着色器很相似，区别在于:光源位置是特定的。同样需要设置存储着色器的 GLT_ATTRIBUTE_VERTEX(顶点分量) 和GLT_ATTRIBUTE_NORMAL(表面法线)GLShaderManager::UserStockShader(GLT_SHADER_DEFAULT_LIGHT_DIEF,GLfloatmvMatrix[16],GLfloat pMatrix[16],GLfloat vLightPos[3],GLfloat vColor[4]); 纹理替换矩阵着色器 1234//着色器通过给定的模型视图投影矩阵，使用绑定到 nTextureUnit (纹 单元) 指定纹理单元的纹理对几何图形进行变化。 段颜 :是直接从纹理样本中直接获取的。//需要设置存储着色器的 GLT_ATTRIBUTE_VERTEX(顶点分量) 和 GLT_ATTRIBUTE_NORMAL(表面法线)GLShaderManager::UserStockShader(GLT_SHADER_TEXTURE_REPLACE,GLfloat mvMatrix[16],GLintnTextureUnit); 纹理调整着色器 123//将一个基本色乘以一个取自纹理单元 nTextureUnit 的纹 。需要设置存储着色器的 GLT_ATTRIBUTE_VERTEX(顶点分量) 和 GLT_ATTRIBUTE_TEXTURE0(纹理坐标)GLShaderManager::UserStockShader(GLT_SHADER_TEXTURE_MODULATE,GLfloatmvMatrix[16],GLfloat vColor[4],GLint nTextureUnit); 纹理光源着色器 123456789//参数1:纹理光源着色器 //参数2:投影矩阵//参数3:视觉空间中的光源位置//参数4: 何图形的基本色//参数5:将要使用的纹理单元//将一个纹理通过漫反射照明计算机进行调整(相乘)。光线在视觉空间中的位置是给定的。//需要设置存储着色器的 GLT_ATTRIBUTE_VERTEX(顶点分量) 和 GLT_ATTRIBUTE_TEXTURE0(纹理坐标)、GLT_ATTRIBUTE_NORMAL(表面法线)GLShaderManager::UserStockShader(GLT_SHADER_TEXTURE_POINT_LIGHT_DIEF,GLfloatmvMatrix[16],GLfloat pMatrix[16],GLfloat vLightPos[3],GLfloat vBaseColor[4],GLint nTextureUnit); 六、OpenGL图元 点 线 线带 线环 三角形 三角形金字塔 三角形带 三角形扇 1234567891011//修改点的大小glPointSize(4.0f);//设置点的大小范围，点和点之间的距离GLfloat sizes[2] = &#123;2.0f,4.0f&#125;;GLfloat stepSize = 1.0f;//获取点的大小范围和步长glGetFloatv(GL_POINT_SIZE_RANGE,sizes);glGetFloatv(GL_POINT_GRAULRITY,&amp;stepSize);//3.通过使用程序点大小模式设置点大小glEnable(GL_PROGAM_POINT_SIZE);//GLSL程序gl_PointSize = 5.0f; 七、GLBatch容器(帮助类)]]></content>
      <categories>
        <category>OpenGL</category>
      </categories>
      <tags>
        <tag>OpenGL</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[OpenGL学习 在Mac上搭建OpenGL环境(一)]]></title>
    <url>%2F2018%2F02%2F05%2F15244567239248%2F</url>
    <content type="text"><![CDATA[一、准备资源 CLTools glew libGLTools.a 百度云盘资源地址：链接: https://pan.baidu.com/s/1ebesf8 密码: g99g 二、现在开始配置 openGL 环境 1、打开Xcode -&gt; macOS -&gt; Cocoa Application 2、选中Build Phases, 选择 Link Binary With Libraries ,点击 + 搜索添加 OpenGl.framework 和 GLUT.framework 两个系统库. 3、把下载好的 include 和 libGLTools.a 拖入到项目里面，选中 Copy item if needed 和 Create groups 4、然后点击 Build Settings, 选则All ，找到 Header Search Paths, 把你拖到项目里的 include 文件夹路径 拖到里面。把libGLTools.a 文件拖到Framework 里面 5、接着把 AppDelegate.h, AppDelegate.m,ViewController.h,ViewControllers.m 文件删除掉OpenGL006.jpeg 6、添加新的文件，选择 C++ File ,Name 设置为main，并且不要勾选下面的 also create a header file,点击Next ,生成main.cpp文件 7、然后把main.m 文件删除掉。 8、把下面的代码复制到 main.cpp 里面，然后把项目跑起来 Run BOpenGL010.jpeg 三、注意事项与报错处理 如果报下面的错误ld: library not found for -lGLToolsclang: error: linker command failed with exit code 1 (use -v to see invocation) 选择General 下面 的林科大Frameworks and Libraries选中 libGLTools.a 点击下面的 一 删除掉，然后点击 + , 选择 Add Other,然后找到你项目里面的 libGLTools.a，选中并点击 open，重新 Run Build 就好了。 注意 ：新建的main.cpp 文件里面 必须要有 main 函数，不然直接build 会报错]]></content>
      <categories>
        <category>OpenGL</category>
      </categories>
      <tags>
        <tag>OpenGL</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[iOS 开发 CADisplayLink 定时器的了解与使用]]></title>
    <url>%2F2017%2F09%2F19%2FiOS%E5%BC%80%E5%8F%91CADisplayLink-%E5%AE%9A%E6%97%B6%E5%99%A8%E7%9A%84%E4%BA%86%E8%A7%A3%E4%B8%8E%E4%BD%BF%E7%94%A8%2F</url>
    <content type="text"><![CDATA[一、简介1、所在框架CADisplayLink和其它CoreAnimation类一样，都是在QuartzCore.framework里。 1.1什么是CADisplayLink? CADisplayLink是一个能让我们以和屏幕刷新率相同的频率将内容画到屏幕上的定时器。我们在应用中创建一个新的 CADisplayLink 对象，把它添加到一个runloop中，并给它提供一个 target 和selector 在屏幕刷新的时候调用。 一但 CADisplayLink 以特定的模式注册到runloop之后，每当屏幕需要刷新的时候，runloop就会调用CADisplayLink绑定的target上的selector，这时target可以读到 CADisplayLink 的每次调用的时间戳，用来准备下一帧显示需要的数据。例如一个视频应用使用时间戳来计算下一帧要显示的视频数据。在UI做动画的过程中，需要通过时间戳来计算UI对象在动画的下一帧要更新的大小等等。 在添加进runloop的时候我们应该选用高一些的优先级，来保证动画的平滑。可以设想一下，我们在动画的过程中，runloop被添加进来了一个高优先级的任务，那么，下一次的调用就会被暂停转而先去执行高优先级的任务，然后在接着执行CADisplayLink的调用，从而造成动画过程的卡顿，使动画不流畅。 duration属性提供了每帧之间的时间，也就是屏幕每次刷新之间的的时间。我们可以使用这个时间来计算出下一帧要显示的UI的数值。但是 duration只是个大概的时间，如果CPU忙于其它计算，就没法保证以相同的频率执行屏幕的绘制操作，这样会跳过几次调用回调方法的机会。frameInterval属性是可读可写的NSInteger型值，标识间隔多少帧调用一次selector 方法，默认值是1，即每帧都调用一次。如果每帧都调用一次的话，对于iOS设备来说那刷新频率就是60HZ也就是每秒60次，如果将 frameInterval 设为2 那么就会两帧调用一次，也就是变成了每秒刷新30次。 我们通过pause属性开控制CADisplayLink的运行。当我们想结束一个CADisplayLink的时候，应该调用-(void)invalidate从runloop中删除并删除之前绑定的 target跟selector另外CADisplayLink 不能被继承。 2、功能CADisplayLink最主要的特征是能提供一个周期性的调用我们赋给它的selector的机制，从这点上看它很像定时器NSTimer。 3、使用方式12345678910111213141516- (void)startDisplayLink &#123; self.displayLink = [`CADisplayLink` displayLinkWithTarget:self selector:@selector(handleDisplayLink:)]; [self.displayLink addToRunLoop:[NSRunLoop currentRunLoop] forMode:NSDefaultRunLoopMode]; &#125; - (void)handleDisplayLink:(`CADisplayLink` *)displayLink &#123; //do something &#125; - (void)stopDisplayLink &#123; [self.displayLink invalidate]; self.displayLink = nil; &#125; 当把CADisplayLink对象add到runloop中后，selector就能被周期性调用，类似于NSTimer被启动了；执行invalidate操作时，CADisplayLink对象就会从runloop中移除，selector调用也随即停止，类似于NSTimer的invalidate方法。 CADisplayLink 与 NSTimer 有什么不同 iOS设备的屏幕刷新频率是固定的，CADisplayLink在正常情况下会在每次刷新结束都被调用，精确度相当高。NSTimer的精确度就显得低了点，比如NSTimer的触发时间到的时候，runloop如果在阻塞状态，触发时间就会推迟到下一个runloop周期。并且 NSTimer新增了tolerance属性，让用户可以设置可以容忍的触发的时间的延迟范围。CADisplayLink使用场合相对专一，适合做UI的不停重绘，比如自定义动画引擎或者视频播放的渲染。NSTimer的使用范围要广泛的多，各种需要单次或者循环定时处理的任务都可以使用。在UI相关的动画或者显示内容使用 CADisplayLink比起用NSTimer的好处就是我们不需要在格外关心屏幕的刷新频率了，因为它本身就是跟屏幕刷新同步的。 二、特性下面结合NSTimer来介绍CADisplayLink，与NSTimer不同的地方有： 1、原理不同CADisplayLink是一个能让我们以和屏幕刷新率同步的频率将特定的内容画到屏幕上的定时器类。CADisplayLink以特定模式注册到runloop后，每当屏幕显示内容刷新结束的时候，runloop就会向CADisplayLink指定的target发送一次指定的selector消息， CADisplayLink类对应的selector就会被调用一次。NSTimer以指定的模式注册到runloop后，每当设定的周期时间到达后，runloop会向指定的target发送一次指定的selector消息。 2、周期设置方式不同iOS设备的屏幕刷新频率(FPS)是60Hz，因此CADisplayLink的selector默认调用周期是每秒60次，这个周期可以通过frameInterval属性设置，CADisplayLink的selector每秒调用次数=60/frameInterval。比如当frameInterval设为2，每秒调用就变成30次。因此，CADisplayLink周期的设置方式略显不便。NSTimer的selector调用周期可以在初始化时直接设定，相对就灵活的多。 3、精确度不同iOS设备的屏幕刷新频率是固定的，CADisplayLink在正常情况下会在每次刷新结束都被调用，精确度相当高。NSTimer的精确度就显得低了点，比如NSTimer的触发时间到的时候，runloop如果在忙于别的调用，触发时间就会推迟到下一个runloop周期。更有甚者，在OS X v10.9以后为了尽量避免在NSTimer触发时间到了而去中断当前处理的任务，NSTimer新增了tolerance属性，让用户可以设置可以容忍的触发的时间范围。 4、使用场合从原理上不难看出，CADisplayLink使用场合相对专一，适合做界面的不停重绘，比如视频播放的时候需要不停地获取下一帧用于界面渲染。NSTimer的使用范围要广泛的多，各种需要单次或者循环定时处理的任务都可以使用。 三、重要属性下面不完整的列出了CADisplayLink的几个重要属性： 1、frameInterval可读可写的NSInteger型值，标识间隔多少帧调用一次selector方法，默认值是1，即每帧都调用一次。官方文档中强调，当该值被设定小于1时，结果是不可预知的。 2、duration只读的CFTimeInterval值，表示两次屏幕刷新之间的时间间隔。需要注意的是，该属性在target的selector被首次调用以后才会被赋值。selector的调用间隔时间计算方式是：时间=duration×frameInterval。现存的iOS设备屏幕的FPS都是60Hz，这一点可以从CADisplayLink的duration属性看出来。duration的值都是0.166666…，即1/60。尽管如此，我们并没法确定苹果不会改变FPS，如果以后某一天将FPS提升到了120Hz了怎么办呢？这时，你设置了frameInterval属性值为2期望每秒刷新30次，却发现每秒刷新了60次，结果可想而知，出于安全考虑，还是先根据duration判断屏幕的FPS再去使用CADisplayLink。 3、timestamp只读的CFTimeInterval值，表示屏幕显示的上一帧的时间戳，这个属性通常被target用来计算下一帧中应该显示的内容。 虽然名为时间戳，但这和常见的unix时间戳差异很大，事实上这是CoreAnimation使用的时间格式。每个CALayer都有一个本地时间（CALayer本地时间的具体作用会在后续文章中说明），可以获取当前CALayer的本地时间并打印： 12CFTimeInterval localLayerTime = [myLayer convertTime:CACurrentMediaTime() fromLayer:nil]; NSLog(@&quot;localLayerTime:%f&quot;,localLayerTime); 四、注意iOS并不能保证能以每秒60次的频率调用回调方法，这取决于： 1、CPU的空闲程度如果CPU忙于其它计算，就没法保证以60HZ执行屏幕的绘制动作，导致跳过若干次调用回调方法的机会，跳过次数取决CPU的忙碌程度。 2、执行回调方法所用的时间如果执行回调时间大于重绘每帧的间隔时间，就会导致跳过若干次回调调用机会，这取决于执行时间长短。 3.通常来讲iOS设备的刷新频率事60HZ也就是每秒60次。那么每一次刷新的时间就是1/60秒 大概16.7毫秒。当我们的frameInterval值为1的时候我们需要保证的是 CADisplayLink调用的｀target｀的函数计算时间不应该大于 16.7否则就会出现严重的丢帧现象。 五、参考文档1、官方文档2、官方使用CADisplayLink播放视频的例子]]></content>
      <categories>
        <category>iOS 开发</category>
      </categories>
      <tags>
        <tag>iOS 开发</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[FMDB 数据库简单基本操作]]></title>
    <url>%2F2017%2F06%2F27%2FFMDB-%E6%95%B0%E6%8D%AE%E5%BA%93%E7%AE%80%E5%8D%95%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C%2F</url>
    <content type="text"><![CDATA[12345678910111213141516171819202122232425262728291.创建表: create table if not exists 表名 (字段名1, 字段名2…); 例如：创建 t_student 表 id（id自增长）create table if not exists t_student (id integer primary key autoincrement, name text not null, age integer)2.增加数据: insert into 表名 (字段名1, 字段名2, …) values(字段1的值, 字段2的值, …); 例如：在 t_student 表插入name，age字段insert into t_student (name,age) values (@”Jack”,@17);3.1根据条件删除数据： delete from 表名 where 条件; 例如：删除 t_student 表中 name 字段为 Jack 的数据delete from t_student where name = @”Jack”;3.2删除表中所有的数据： delete from 表名； 例如：delete from t_student;4.根据条件更改某个数据 update 表名 set 字段1 = ‘值1’, 字段2 = ‘值2’ where 字段1 = ‘字段1的当前值’ 例如：update t_student set name = ‘lily’, age = ‘16’ where name = ‘Jack’5.1根据条件查找 select from 表名 where 字段1 = ‘字段1的值’ 例如：select from t_student where age = ‘16’5.2查找所有数据 select from 表名 例如：select from t_student5.3排序查找： select from 表名 order by 字段 例如：select from t_student order by age asc （升序，默认）select * from t_student order by age desc （降序） 3.6.删除表： drop table 表名 例如：drop table t_student]]></content>
      <categories>
        <category>FMDB</category>
      </categories>
      <tags>
        <tag>FMDB</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[iOS开发权限设置]]></title>
    <url>%2F2017%2F05%2F05%2FiOS%E5%BC%80%E5%8F%91%E6%9D%83%E9%99%90%E8%AE%BE%E7%BD%AE%2F</url>
    <content type="text"><![CDATA[iOS 8.0之后调用系统的API需要配置相关的配置信息才能正常使用 123456789101112131415161718192021222324252627282930313233343536373839&lt;!-- 相册 --&gt;&lt;key&gt;NSPhotoLibraryUsageDescription&lt;/key&gt;&lt;string&gt;App需要您的同意,才能访问相册&lt;/string&gt;&lt;!-- 相机 --&gt;&lt;key&gt;NSCameraUsageDescription&lt;/key&gt;&lt;string&gt;App需要您的同意,才能访问相机&lt;/string&gt;&lt;!-- 麦克风 --&gt;&lt;key&gt;NSMicrophoneUsageDescription&lt;/key&gt;&lt;string&gt;App需要您的同意,才能访问麦克风&lt;/string&gt;&lt;!-- 位置 --&gt;&lt;key&gt;NSLocationUsageDescription&lt;/key&gt;&lt;string&gt;App需要您的同意,才能访问位置&lt;/string&gt;&lt;!-- 在使用期间访问位置 --&gt;&lt;key&gt;NSLocationWhenInUseUsageDescription&lt;/key&gt;&lt;string&gt;App需要您的同意,才能在使用期间访问位置&lt;/string&gt;&lt;!-- 始终访问位置 --&gt;&lt;key&gt;NSLocationAlwaysUsageDescription&lt;/key&gt;&lt;string&gt;App需要您的同意,才能始终访问位置&lt;/string&gt;&lt;!-- 日历 --&gt;&lt;key&gt;NSCalendarsUsageDescription&lt;/key&gt;&lt;string&gt;App需要您的同意,才能访问日历&lt;/string&gt;&lt;!-- 提醒事项 --&gt;&lt;key&gt;NSRemindersUsageDescription&lt;/key&gt;&lt;string&gt;App需要您的同意,才能访问提醒事项&lt;/string&gt;&lt;!-- 运动与健身 --&gt;&lt;key&gt;NSMotionUsageDescription&lt;/key&gt;&lt;string&gt;App需要您的同意,才能访问运动与健身&lt;/string&gt;&lt;!-- 健康更新 --&gt;&lt;key&gt;NSHealthUpdateUsageDescription&lt;/key&gt;&lt;string&gt;App需要您的同意,才能访问健康更新 &lt;/string&gt;&lt;!-- 健康分享 --&gt;&lt;key&gt;NSHealthShareUsageDescription&lt;/key&gt;&lt;string&gt;App需要您的同意,才能访问健康分享&lt;/string&gt;&lt;!-- 蓝牙 --&gt;&lt;key&gt;NSBluetoothPeripheralUsageDescription&lt;/key&gt;&lt;string&gt;App需要您的同意,才能访问蓝牙&lt;/string&gt;&lt;!-- 媒体资料库 --&gt;&lt;key&gt;NSAppleMusicUsageDescription&lt;/key&gt;&lt;string&gt;App需要您的同意,才能访问媒体资料库&lt;/string&gt;]]></content>
      <categories>
        <category>iOS 开发</category>
      </categories>
      <tags>
        <tag>iOS 开发</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[iOS 开发 UITableViewCell的重用机制]]></title>
    <url>%2F2017%2F04%2F16%2FiOS%E5%BC%80%E5%8F%91UITableViewCell%E7%9A%84%E9%87%8D%E7%94%A8%E6%9C%BA%E5%88%B6%2F</url>
    <content type="text"><![CDATA[首先,我们要明白我们为什么需要使用这种机制,其次,这种机制的原理是什么.我们先举个例子来说明.一个UITableView中有许多需要显示的cell,但是我们不可能每个都会浏览到,那么如果我们把这些数据全部都加载进去,是不是造成了内存的负担呢. 我们所能显示的区域通常只有一个屏幕的大小,那么那些屏幕之外的信息是不需要一次性全都加载完的,只有当我们滑动屏幕需要浏览的时候,我们才需要它加载进来.因此,就有了我们要介绍的这部分内容,UITabelViewCell的重用机制. 重用机制实现了数据和显示的分离,并不为每个数据创建一个UITableViewCell,我们只创建屏幕可显示的最大的cell个数+1,然后去循环重复使用这些cell,既节省空间,又达到我们需要显示的效果.这种机制下系统默认有一个可变数组NSMutableArray visiableCells,用来保存当前显示的cell.一个可变字典NSMutableDictnery reusableTableCells,用来保存可重复利用的cell.(之所以用字典是因为可重用的cell有不止一种样式,我们需要根据它的reuseIdentifier,也就是所谓的重用标示符来查找是否有可重用的该样式的cell). 1234567891011121314// 设置单元格 indexPath :单元格当前所在位置 -- 哪个分区哪一行等- (UITableViewCell *)tableView:(UITableView *)tableView cellForRowAtIndexPath:(NSIndexPath *)indexPath //UITableViewDataSource&#123; static NSString *identifier = @&quot;cell&quot; ; //相当于从集合中找寻完全出屏幕的单元格. // identifier : 因为一个表视图中可能存在多种样式的单元格,咱们把相同样式的单元格放到同一个集合里面,为这个集合加标示符,当我们需要用到某种样式的单元格的时候,根据不同的标示符,从不同的集合中找寻单元格. UITableViewCell *cell = [tableView dequeueReusableCellWithIdentifier:identifier] ; // 如果从集合中未找到单元格,也就是集合中还没有单元格,也就是还没有单元格出屏幕,那么我们就需要创建单元格 if (!cell) &#123; // 创建cell的时候需要标示符(Identifier)是因为,当该cell出屏幕的时候需要根据标示符放到对应的集合中. cell = [[UITableViewCell alloc] initWithStyle:UITableViewCellStyleSubtitle reuseIdentifier:@&quot;cell&quot;] ; return cell ;&#125; 1234567系统第一次执行- (UITableViewCell *)tableView:(UITableView *)tableView cellForRowAtIndexPath:(NSIndexPath *)indexPath这个方法的时候, reusableTableCells为空,[tableView dequeueReusableCellWithIdentifier:identifier]的返回值为nil,我们需要通过[[UITableViewCell alloc] initWithStyle:UITableViewCellStyleSubtitle reuseIdentifier: identifier]方式来创建. 当我们的数据过多,整个屏幕的cell显示不完全时,这个方法的执行情况是 : (1) 先执行[[UITableViewCell alloc] initWithStyle:UITableViewCellStyleSubtitle reuseIdentifier: identifier]创建整个屏幕能显示的cell数+1的cell(当我们拖动UITableView的时候,第一个cell没有移出屏幕,最下面的cell就已经存在),并指定相同或者不同的标示符identifier.把创建出的屏幕能显示的cell全部都加入到visiableCells数组中(最后一个创建的先不加入数组)，reusableTableCells为空. (2)当我们拖动屏幕时,顶端的cell移出屏幕并加入到reusableTableCells字典中,键为identifier ,并把之前已经创建的但是没有加入到visiableCells的cell加入到visiableCells数组中. (3)当我们接着拖动的时候,因为reusableTableCells中已经有值，所以，当需要显示新的cell，cellForRowAtIndexPath再次被调用，执行[tableView dequeueReusableCellWithIdentifier: identifier]，返回一个标示符为identifier的cell。该cell移出reusableTableCells之后加入到visiableCells；顶端的cell移出visiableCells并加入到reusableTableCells.如果visiableCells数组中没有找到identifier类型的cell,则再次重新alloc一个. 在iOS6之后系统加入了一种单元格注册的方法.[self.tableView registerClass:[UITableViewCell class] forCellReuseIdentifier: identifier]; 这个方法的作用是,当我们从重用队列中取cell的时候,如果没有,系统会帮我们创建我们给定类型的cell,如果有,则直接重用. 这种方式cell的样式为系统默认样式. 在设置cell的方法中只需要: 123456- (UITableViewCell *)tableView:(UITableView *)tableView cellForRowAtIndexPath:(NSIndexPath *)indexPath&#123; // 重用队列中取单元格 由于上面已经注册过单元格,系统会帮我们做判断,不用再次手动判断单元格是否存在 UITableViewCell *cell = [tableView dequeueReusableCellWithIdentifier: identifier forIndexPath:indexPath] ; return cell ;&#125;]]></content>
      <categories>
        <category>iOS 开发</category>
      </categories>
      <tags>
        <tag>iOS 开发</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[iOS 开发 APP的生命周期和UIViewController的生命周期]]></title>
    <url>%2F2017%2F03%2F12%2FiOS%E5%BC%80%E5%8F%91%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%2F</url>
    <content type="text"><![CDATA[一. iOS程序的启动执行顺序1.具体执行流程123456789101112131415161718192021222324252627282930程序入口进入main函数，设置AppDelegate称为函数的代理程序完成加载[AppDelegate application:didFinishLaunchingWithOptions:]创建window窗口程序被激活[AppDelegate applicationDidBecomeActive:]当点击command+H时(针对模拟器,手机是当点击home键)程序取消激活状态[AppDelegate applicationWillResignActive:];程序进入后台[AppDelegate applicationDidEnterBackground:];点击进入工程程序进入前台[AppDelegate applicationWillEnterForeground:]程序被激活[AppDelegate applicationDidBecomeActive:]; 2.分析 对于applicationWillResignActive(非活动)与applicationDidEnterBackground(后台)这两个的区别。applicationWillResignActive(非活动):比如当有电话进来或短信进来或锁屏等情况下，这时应用程序挂起进入非活动状态，也就是手机界面还是显示着你当前的应用程序的窗口，只不过被别的任务强制占用了，也可能是即将进入后台状态(因为要先进入非活动状态然后进入后台状态) applicationDidEnterBackground(后台):指当前窗口不是你的App,大多数程序进入这个后台会在这个状态上停留一会，时间到之后会进入挂起状态(Suspended)。如果你程序特殊处理后可以长期处于后台状态也可以运行。Suspended (挂起): 程序在后台不能执行代码。系统会自动把程序变成这个状态而且不会发出通知。当挂起时，程序还是停留在内存中的，当系统内存低时，系统就把挂起的程序清除掉，为前台程序提供更多的内存。 ###二. UIViewController 的 生命周期 当一个视图控制器被创建，并在屏幕上显示的时候。 代码的执行顺序 1、 alloc 创建对象，分配空间 2、init (initWithNibName) 初始化对象，初始化数据 3、loadView 从nib载入视图 ，通常这一步不需要去干涉。除非你没有使用xib文件创建视图 4、viewDidLoad 载入完成，可以进行自定义数据以及动态创建其他控件 5、viewWillAppear 视图将出现在屏幕之前，马上这个视图就会被展现在屏幕上了 6、viewDidAppear 视图已在屏幕上渲染完成当一个视图被移除屏幕并且销毁的时候的执行顺序，这个顺序差不多和上面的相反 1、viewWillDisappear 视图将被从屏幕上移除之前执行 2、viewDidDisappear 视图已经被从屏幕上移除，用户看不到这个视图了 3、dealloc 视图被销毁，此处需要对你在init和viewDidLoad中创建的对象进行释放 关于viewDidUnload ：在发生内存警告的时候如果本视图不是当前屏幕上正在显示的视图的话， viewDidUnload将会被执行，本视图的所有子视图将被销毁，以释放内存,此时开发者需要手动对viewLoad、viewDidLoad中创建的对象释放内存。 因为当这个视图再次显示在屏幕上的时候，viewLoad、viewDidLoad 再次被调用，以便再次构造视图。 当我们创建一个UIViewController类的对象时，通常系统会生成几个默认的方法，这些方法大多与视图的调用有关，但是在视图调用时，这些方法的调用顺序如何，需要整理下。通常上述方法包括如下几种，这些方法都是UIViewController类的方法： 1234567891011- (void)viewDidLoad；- (void)viewDidUnload； - (void)viewWillAppear:(BOOL)animated； - (void)viewDidAppear:(BOOL)animated； - (void)viewWillDisappear:(BOOL)animated； - (void)viewDidDisappear:(BOOL)animated； 下面介绍下APP在运行时的调用顺序。 1）- (void)viewDidLoad； 一个APP在载入时会先通过调用loadView方法或者载入IB中创建的初始界面的方法，将视图载入到内存中。然后会调用viewDidLoad方法来进行进一步的设置。通常，我们对于各种初始数据的载入，初始设定等很多内容，都会在这个方法中实现，所以这个方法是一个很常用，很重要的方法。 但是要注意，这个方法只会在APP刚开始加载的时候调用一次，以后都不会再调用它了，所以只能用来做初始设置。 2) - (void)viewDidUnload; 在内存足够的情况下，软件的视图通常会一直保存在内存中，但是如果内存不够，一些没有正在显示的viewcontroller就会收到内存不够的警告，然后就会释放自己拥有的视图，以达到释放内存的目的。但是系统只会释放内存，并不会释放对象的所有权，所以通常我们需要在这里将不需要在内存中保留的对象释放所有权，也就是将其指针置为nil。 这个方法通常并不会在视图变换的时候被调用，而只会在系统退出或者收到内存警告的时候才会被调用。但是由于我们需要保证在收到内存警告的时候能够对其作出反应，所以这个方法通常我们都需要去实现。 另外，即使在设备上按了Home键之后，系统也不一定会调用这个方法，因为IOS4之后，系统允许将APP在后台挂起，并将其继续滞留在内存中，因此，viewcontroller并不会调用这个方法来清除内存。 3）- (void)viewWillAppear:(BOOL)animated; 系统在载入所有数据后，将会在屏幕上显示视图，这时会先调用这个方法。通常我们会利用这个方法，对即将显示的视图做进一步的设置。例如，我们可以利用这个方法来设置设备不同方向时该如何显示。 另外一方面，当APP有多个视图时，在视图间切换时，并不会再次载入viewDidLoad方法，所以如果在调入视图时，需要对数据做更新，就只能在这个方法内实现了。所以这个方法也非常常用。 4) - (void)viewDidAppear:(BOOL)animated； 有时候，由于一些特殊的原因，我们不能在viewWillApper方法里，对视图进行更新。那么可以重写这个方法，在这里对正在显示的视图进行进一步的设置。 5) - (void)viewWillDisappear:(BOOL)animated； 在视图变换时，当前视图在即将被移除、或者被覆盖时，会调用这个方法进行一些善后的处理和设置。 由于在IOS4之后，系统允许将APP在后台挂起，所以在按了Home键之后，系统并不会调用这个方法，因为就这个APP本身而言，APP显示的view，仍是挂起时候的view，所以并不会调用这个方法。 6) - (void)viewDidDisappear:(BOOL)animated； 我们可以重写这个方法，对已经消失，或者被覆盖，或者已经隐藏了的视图做一些其他操作。 上述方法的流程图可以简单用如下表示： 12345运行APP —&gt; 载入视图 —&gt; 调用viewDidLoad方法 —&gt; 调用viewWillAppear方法 —&gt; 调用viewDidAppear方法 —&gt; 正常运行 —&gt;…………..—&gt;释放对象所有权 &lt;— 调用viewDidUnload &lt;— 收到内存警告 &lt;— 调用viewDidDisappear &lt;— 调用viewWillDisappear &lt;— APP需要调用另一个view]]></content>
      <categories>
        <category>iOS 开发</category>
      </categories>
      <tags>
        <tag>iOS 开发</tag>
      </tags>
  </entry>
</search>
