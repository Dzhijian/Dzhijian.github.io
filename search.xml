<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title>OpenGL学习 纹理(五)</title>
      <link href="/2018/02/11/15244707402194/"/>
      <url>/2018/02/11/15244707402194/</url>
      <content type="html"><![CDATA[<script src="//cdn.bootcss.com/jquery/1.11.3/jquery.min.js"></script><div id="security">  <div class="input-container">  <input type="password" class="form-control" id="pass" placeholder="欢迎来到我的博客,请输入密码继续阅读." />    <label for="pass">欢迎来到我的博客,请输入密码继续阅读.</label>    <div class="bottom-line"></div>  </div></div><div id="decryptionError" style="display: none;">Incorrect Password!</div><div id="noContentError" style="display: none;">No content to display!</div><div id="encrypt-blog" style="display:none">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</div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
      
      <categories>
          
          <category> OpenGL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> OpenGL </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>OpenGL学习 基本变化 (四)</title>
      <link href="/2018/02/09/15244691153165/"/>
      <url>/2018/02/09/15244691153165/</url>
      <content type="html"><![CDATA[<h3 id="一、抗锯齿"><a href="#一、抗锯齿" class="headerlink" title="一、抗锯齿"></a>一、抗锯齿</h3><p><strong>混合的两大功能:颜⾊色组合、抗锯⻮齿</strong></p><p>混合处理-抗锯齿</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">//开启混合处理理 glEnable(GL_BLEND);</span><br><span class="line">//指定混合因⼦子 GLBlendFunc(GL_SRC_ALPHA,GL_ONE_MINUS_SRC_ALPHA);</span><br><span class="line">//指定混合⽅方程式 glBlendEquation(GL_FUNC_ADD);</span><br><span class="line">glEnable(GL_POINT_SMOOTH); //对点进⾏行行抗锯⻮齿处理理</span><br><span class="line">glEnable(GL_LINE_SMOOTH);//对线进⾏行行抗锯⻮齿处理理 </span><br><span class="line">glEnable(GL_POLYGON_SMOOTH);//对多边形进⾏行行抗锯⻮齿处理理</span><br></pre></td></tr></table></figure><h3 id="二、多重采样"><a href="#二、多重采样" class="headerlink" title="二、多重采样"></a>二、多重采样</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">//1.可以调⽤用 glutInitDisplayMode 添加采样缓存区 glutInitDisplayMode(GLUT_MULTISAMPLE);</span><br><span class="line">//2.可以使⽤用glEnable| glDisable组合使⽤用GLUT_MULTISAMPLE 打开| 关闭 多重采样。</span><br><span class="line">glEnable(GLUT_MULTISAMPLE);</span><br><span class="line">glDisable(GLUT_MULTISAMPLE);</span><br></pre></td></tr></table></figure><h3 id="三、多重采样、抗锯⻮齿混合综合使⽤用"><a href="#三、多重采样、抗锯⻮齿混合综合使⽤用" class="headerlink" title="三、多重采样、抗锯⻮齿混合综合使⽤用"></a>三、多重采样、抗锯⻮齿混合综合使⽤用</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">glDisable(GLUT_MULTISAMPLE);</span><br><span class="line">glEnable(GL_POINT_SMOOTH);</span><br><span class="line">//Draw some smooth point</span><br><span class="line">glDisable(GL_POINT_SMOOTH);</span><br><span class="line">glDisable(GL_LINE_SMOOTH);</span><br><span class="line">glEnable(GLUT_MULTISAMPLE);</span><br><span class="line">//Draw some smooth polygon</span><br></pre></td></tr></table></figure><h3 id="四、多重采样-拓拓展"><a href="#四、多重采样-拓拓展" class="headerlink" title="四、多重采样 拓拓展"></a>四、多重采样 拓拓展</h3><p>多重采样缓存区在默认情况下使⽤用⽚片段RGB值，并不不包含颜 ⾊色的alpha成分，我们可以通过调⽤用glEnable来修改这个 ⾏行行为:</p><blockquote><ul><li>GL_SAMPLE_ALPHA_TO_COVERAGE 使⽤用alpha值</li><li>GL_SAMPLE_ALPHA_TO_ON 使⽤用alpha值并设为1，并 使⽤用它。</li><li>GL_SAMPLE_COVERAGE 使⽤用glSampleCoverage 所设置的值。</li></ul></blockquote><p>当启⽤用 GL_SAMPLE_COVERAGE 时，可以使⽤用 glSampleCoverage函数允许指定⼀一个特定的值，它是与⽚片 段覆盖值进⾏行行按位与操作的结果。</p><h3 id="五、向量"><a href="#五、向量" class="headerlink" title="五、向量"></a>五、向量</h3><p><img src="http://p7l9kf5i4.bkt.clouddn.com/2018-04-23-15244696546998.jpg-style01" alt=""></p><blockquote><p>如何定义三维、四维向量量或三维向量量数组、四维向量量数组?<br>M3DVector3f :表示⼀一个三维的向量量(x,y,z)<br>M3DVector4f :表示⼀一个四维的向量量(x,y,z,w)(R,G,B,A)</p></blockquote><h3 id="六、点乘"><a href="#六、点乘" class="headerlink" title="六、点乘"></a>六、点乘</h3><p><img src="http://p7l9kf5i4.bkt.clouddn.com/2018-04-23-15244697201684.jpg-style01" alt=""></p><p><img src="http://p7l9kf5i4.bkt.clouddn.com/2018-04-23-15244697388234.jpg-style01" alt=""></p><p><img src="http://p7l9kf5i4.bkt.clouddn.com/2018-04-23-15244698154537.jpg-style01" alt=""></p><h3 id="七、使用矩阵堆栈"><a href="#七、使用矩阵堆栈" class="headerlink" title="七、使用矩阵堆栈"></a>七、使用矩阵堆栈</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">//类型</span><br><span class="line">GLMatrixStack::GLMatrixStack(int iStackDepth = 64);</span><br><span class="line"></span><br><span class="line">//在堆栈顶部载⼊入⼀一个单元矩阵</span><br><span class="line">void GLMatrixStack::LoadIdentity(void);</span><br><span class="line"></span><br><span class="line">//在堆栈顶部载⼊入任何矩阵 //参数:4*4矩阵</span><br><span class="line">void GLMatrixStack::LoadMatrix(const M3DMatrix44f m);</span><br><span class="line"></span><br><span class="line">//矩阵乘以矩阵堆栈顶部矩阵，相乘结果存储到堆栈的顶部</span><br><span class="line">void GLMatrixStack::MultMatrix(const M3DMatrix44f);</span><br><span class="line"></span><br><span class="line">//获取矩阵堆栈顶部的值 GetMatrix 函数 //为了了适应GLShaderMananger的使⽤用，或者获取顶部矩阵的副本</span><br><span class="line">const M3DMatrix44f &amp; GLMatrixStack::GetMatrix(void);</span><br><span class="line">void GLMatrixStack::GetMatrix(M3DMatrix44f mMatrix);</span><br></pre></td></tr></table></figure><h3 id="八、压栈、出栈"><a href="#八、压栈、出栈" class="headerlink" title="八、压栈、出栈"></a>八、压栈、出栈</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">//将当前矩阵压⼊入堆栈</span><br><span class="line">void GLMatrixStack::PushMatrix(void);</span><br><span class="line">//将M3DMatrix44f 矩阵对象压⼊入当前矩阵堆栈</span><br><span class="line">void PushMatrix(const M3DMatrix44f mMatrix);</span><br><span class="line">//将GLFame 对象压⼊入矩阵对象</span><br><span class="line">void PushMatrix(GLFame &amp;frame);</span><br><span class="line">//出栈(出栈指的是移除顶部的矩阵对象) void GLMatrixStack::PopMatrix(void);</span><br></pre></td></tr></table></figure><h3 id="九、仿射变换-GLMastrixStack-内建了旋转-平移-缩放"><a href="#九、仿射变换-GLMastrixStack-内建了旋转-平移-缩放" class="headerlink" title="九、仿射变换 GLMastrixStack 内建了旋转\平移\缩放"></a>九、仿射变换 GLMastrixStack 内建了旋转\平移\缩放</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">//Rotate 函数angle参数是传递的度数，⽽而不不是弧度</span><br><span class="line">void MatrixStack::Rotate(GLfloat angle,GLfloat x,GLfloat</span><br><span class="line">y,GLfloat z);</span><br><span class="line">void MatrixStack::Translate(GLfloat x,GLfloat y,GLfloat z);</span><br><span class="line">void MatrixStack::Scale(GLfloat x,GLfloat y,GLfloat z);</span><br></pre></td></tr></table></figure><h3 id="十、使用照相机-和-角色帧-进行移动"><a href="#十、使用照相机-和-角色帧-进行移动" class="headerlink" title="十、使用照相机 和 角色帧 进行移动"></a>十、使用照相机 和 角色帧 进行移动</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">class GLFrame</span><br><span class="line">    &#123;</span><br><span class="line">protected:</span><br><span class="line">M3DVector3f vOrigin; // Where am I? M3DVector3f vForward; // Where am I going? M3DVector3f vUp; // Which way is up?</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="http://p7l9kf5i4.bkt.clouddn.com/2018-04-23-15244700886510.jpg-style01" alt=""></p><h3 id="十一、GLFrame"><a href="#十一、GLFrame" class="headerlink" title="十一、GLFrame"></a>十一、GLFrame</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">//将堆栈的顶部压⼊入任何矩阵</span><br><span class="line">void GLMatrixStack::LoadMatrix(GLFrame &amp;frame);</span><br><span class="line"></span><br><span class="line">//矩阵乘以矩阵堆栈顶部的矩阵。相乘结果存储在堆栈的顶部 </span><br><span class="line">void GLMatrixStack::MultMatrix(GLFrame &amp;frame);</span><br><span class="line"></span><br><span class="line">//将当前的矩阵压栈</span><br><span class="line">void GLMatrixStack::PushMatrix(GLFrame &amp;frame);</span><br></pre></td></tr></table></figure><h3 id="十二、照相机管理"><a href="#十二、照相机管理" class="headerlink" title="十二、照相机管理"></a>十二、照相机管理</h3><p><img src="http://p7l9kf5i4.bkt.clouddn.com/2018-04-23-15244701898614.jpg-style01" alt=""></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">//GLFrame函数，这个函数⽤用来检索条件适合的照相矩阵</span><br><span class="line">void GetCameraMatrix(M3DMatrix44f m,bool bRotationOnly = flase);</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> OpenGL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> OpenGL </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>OpenGL学习 深度测试(三)</title>
      <link href="/2018/02/08/15244657893765/"/>
      <url>/2018/02/08/15244657893765/</url>
      <content type="html"><![CDATA[<h3 id="一、渲染过程是中可能产生的问题"><a href="#一、渲染过程是中可能产生的问题" class="headerlink" title="一、渲染过程是中可能产生的问题"></a>一、渲染过程是中可能产生的问题</h3><p><img src="http://p7l9kf5i4.bkt.clouddn.com/2018-04-23-15244658266117.jpg-style01" alt=""></p><p>解决办法：<br>1：油画法<br>2：正面、背面剔除。<br>3：深度测试。</p><h4 id="1-1、油画法"><a href="#1-1、油画法" class="headerlink" title="1.1、油画法"></a>1.1、油画法</h4><p><img src="http://p7l9kf5i4.bkt.clouddn.com/2018-04-23-15244659608381.jpg-style01" alt=""></p><blockquote><p>油画法：比较消耗性能，重复绘制了重叠部分，对于多个图形叠加在一起的，难以分辨哪个是最上层的，导致渲染混乱</p></blockquote><h4 id="1-2、正面背面剔除"><a href="#1-2、正面背面剔除" class="headerlink" title="1.2、正面背面剔除"></a>1.2、正面背面剔除</h4><p>可以调用下面两个方法开启或关闭表面剔除</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">glEnable(GL_CULL_FACE); //开启</span><br><span class="line">glDisable(GL_CULL_FACE); // 关闭</span><br></pre></td></tr></table></figure><p>该函数的原型如下<br><code>void glFrontFace(GLenum mode);</code></p><blockquote><p>mode 参数的可选的值有 GL_CW 和 GL_CCW （默认值是GL_CCW）</p></blockquote><blockquote><p>GL_CW 表示顶点的排列顺序是顺时针的面 是正面。<br>GL_CCW 表示顶点的排列顺序是逆时针的面是正面 （默认值）</p></blockquote><p><code>void glCullFace()</code></p><blockquote><p>GL_FRONT       // 正面剔除<br>GL_BACK         //  背面剔除<br>GL_FRONT_ANF_BACK 正面和反面都要剔除 </p></blockquote><h3 id="二、什么叫深度？"><a href="#二、什么叫深度？" class="headerlink" title="二、什么叫深度？"></a>二、什么叫深度？</h3><p><strong>所谓的深度，就在坐标系中，像素Z坐标距离观察者的距离<br>观察者，可以在任何位置，OpenGL会有专门有一块缓存区来存放Z值，深度缓冲区！<br>每个像素上的Z值。</strong></p><h3 id="三、深度缓冲去区的作用"><a href="#三、深度缓冲去区的作用" class="headerlink" title="三、深度缓冲去区的作用"></a>三、深度缓冲去区的作用</h3><p>一般情况下，我们绘制图形时，后面绘制的会覆盖前面的图形。一般绘制的顺序先后面再前面。<br>产生一个性能问题，就是遮盖部分，先绘制的会被覆盖，这没有任何意义的绘制。<br>深度测试就是用来解决这个问题的<br>它是如何处理的？<br>有了深度缓冲区之后，绘制的时候会检查Z,靠近观察者的覆盖。而不是靠绘制顺序来决定。</p><h3 id="四、如何使用深度缓冲区测试？"><a href="#四、如何使用深度缓冲区测试？" class="headerlink" title="四、如何使用深度缓冲区测试？"></a>四、如何使用深度缓冲区测试？</h3><p>为什么要测试？一旦开启之后就会先测试深度值再绘制</p><p><code>glEnable (GLDEPTHTEST);</code></p><blockquote><p>默认情况下Z值小的情况下会被覆盖<br>如果是观察者，在Z轴的正方向，Z值大的靠近观察者<br>如果是观察者，在Z轴的负方向，Z值小的靠近观察者</p></blockquote><h3 id="五、多边形模型"><a href="#五、多边形模型" class="headerlink" title="五、多边形模型"></a>五、多边形模型</h3><blockquote><p>使用<code>glPolygonMode(Glenum face,Glenum mode)</code> 函数来指定填充方式Face参数:GL_FRONT、GL_BACK、GL_FRONT_AND_BACKMode参数:GL_FILL(默认实心填充) 、GL_LINE、GL_POINT</p></blockquote><h3 id="六、多边形偏移"><a href="#六、多边形偏移" class="headerlink" title="六、多边形偏移"></a>六、多边形偏移</h3><p><strong>深度测试实现深度的过程中，可能产生的2种问题:<br>1、z-fighting(z冲突)<br>2、图形重叠(无法体现深度)</strong></p><h3 id="七、如何解决深度值相同，造成的冲突问题"><a href="#七、如何解决深度值相同，造成的冲突问题" class="headerlink" title="七、如何解决深度值相同，造成的冲突问题"></a>七、如何解决深度值相同，造成的冲突问题</h3><p><strong>第一种方法：</strong><br>在第二次绘制时，稍微偏移一点点解决这个问题。注意：必须非常小心确保Z值的间隙</p><p><strong>第二种方法：</strong><br>采样<code>glPolygonOffset</code> 函数。使得可以调节片段的深度值。使得深度之偏移而不产生悬浮</p><p><code>glPolygonOffset</code> 函数<br><code>void glPolygonOffset(Glfloat factor,Glfloat units);</code></p><blockquote><p>应用到片段上总偏移计算方程式:<br>Depth Offset = (DZ <em> factor) + (r </em> units);<br>DZ:深度值(Z值)r:使得深度缓冲区产生变化的最小值<br>负值，将使得z值距离我们更近，而正值，将使得z值距离我们更远，对于上节课的案例，我们设置factor和units设置为-1，0</p></blockquote><h3 id="八、裁剪"><a href="#八、裁剪" class="headerlink" title="八、裁剪"></a>八、裁剪</h3><p>在OpenGL 提高渲染的一种方式，只刷新屏幕上发生变化的部分。OpenGL 允许我们将要进行渲染的窗口只去指定一个裁剪框。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">//1 开启裁剪测试</span><br><span class="line">glEnable(GL_SCISSOR_TEST);</span><br><span class="line">//2.关闭裁剪测试</span><br><span class="line">glDisable(GL_SCISSOR_TEST);</span><br><span class="line">//3.指定裁剪窗口</span><br><span class="line">//x,y:指定裁剪框左下角位置;width,height:指定裁剪尺寸</span><br><span class="line">void glScissor(Glint x,Glint y,GLSize width,GLSize height);</span><br></pre></td></tr></table></figure><h3 id="九、混合"><a href="#九、混合" class="headerlink" title="九、混合"></a>九、混合</h3><p>我们把OpenGL 渲染时会把颜色值存在颜色缓存区中，每个片段的深度值也是放在深度缓冲区。当深度缓冲区被关闭时，新的颜色将简单的覆盖原来颜色缓存区存在的颜色值，当深度缓冲区再次打开时，新的颜色片段只是当它们比原来的值更接近邻近的裁剪平面才会替换原来的颜色片段。<br><code>glEnable(GL_BlEND);</code></p><h4 id="9-1-组合颜色"><a href="#9-1-组合颜色" class="headerlink" title="9.1 组合颜色"></a>9.1 组合颜色</h4><p>目标颜色:已经存储在颜色缓存区的颜色值<br>源颜色:作为当前渲染命令结果进入颜色缓存区的颜色值<br>当混合功能被启动时，源颜色和目标颜色的组合方式是混合方程式控制的。在默认情况下，混合方程式如下所示:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Cf = (Cs * S) + (Cd * D)</span><br><span class="line">Cf :最终计算参数的颜色</span><br><span class="line">Cs : 源颜色</span><br><span class="line">Cd :目标颜色</span><br><span class="line">S:源混合因子</span><br><span class="line">D:目标混合因子</span><br></pre></td></tr></table></figure><h4 id="9-2-设置混合因子"><a href="#9-2-设置混合因子" class="headerlink" title="9.2 设置混合因子"></a>9.2 设置混合因子</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">设置混合因子，需要用到glBlendFun函数</span><br><span class="line">glBlendFunc(GLenum S,GLenum D);</span><br><span class="line">S:源混合因子</span><br><span class="line">D:目标混合因子</span><br></pre></td></tr></table></figure><h4 id="9-3-混合因子枚举列表"><a href="#9-3-混合因子枚举列表" class="headerlink" title="9.3 混合因子枚举列表"></a>9.3 混合因子枚举列表</h4><p><img src="http://p7l9kf5i4.bkt.clouddn.com/2018-04-23-15244660140634.jpg-style01" alt=""></p><p>表中R、G、B、A 分别代表红、绿、蓝、alpha。<br>表中下标S、D，分别代表源、目标<br>表中C 代表常量颜色(默认黑色)</p><h4 id="9-4总结"><a href="#9-4总结" class="headerlink" title="9.4总结"></a>9.4总结</h4><p>最终颜色是以原先的红色(目标颜色)与 后来的蓝色(源颜色)进行组合。源颜色的alpha值越高，添加的蓝色颜色成分越高，目标颜色所保留的成分就会越少。<br>混合函数经常用于实现在其他一些不透明的物体前面绘制一个透明物体的效果</p><h3 id="十、改变组合方程式"><a href="#十、改变组合方程式" class="headerlink" title="十、改变组合方程式"></a>十、改变组合方程式</h3><p>默认混合方程式:<br><code>Cf = (CsS)+(CdD)</code><br>实际上远不止这一种混合方程式，我们可以从5个不同的方程式中进行选择</p><h4 id="10-1-改变混合方程式的函数-glBlendEquation"><a href="#10-1-改变混合方程式的函数-glBlendEquation" class="headerlink" title="10.1 改变混合方程式的函数 glBlendEquation()"></a>10.1 改变混合方程式的函数 glBlendEquation()</h4><p>选择混合方程式的函数:<br><code>glbBlendEquation(GLenum mode);</code></p><h4 id="10-2-glBlendFuncSeparate-函数"><a href="#10-2-glBlendFuncSeparate-函数" class="headerlink" title="10.2 glBlendFuncSeparate 函数"></a>10.2 glBlendFuncSeparate 函数</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">除了能使用glBlendFunc 来设置混合因子，还可以有更灵活的选择。</span><br><span class="line">strRGB: 源颜色的混合因子</span><br><span class="line">dstRGB: 目标颜色的混合因子</span><br><span class="line">strAlpha: 源颜色的Alpha因子</span><br><span class="line">dstAlpah: 目标颜色的Alpha因子</span><br><span class="line"></span><br><span class="line">void glBlendFuncSeparate(GLenum strRGB,GLenum dstRGB,GLenum strAlpha,GLenumdstAlpha);</span><br></pre></td></tr></table></figure><h4 id="10-3-glBlendFuncSeparate-注意"><a href="#10-3-glBlendFuncSeparate-注意" class="headerlink" title="10.3 glBlendFuncSeparate 注意"></a>10.3 glBlendFuncSeparate 注意</h4><blockquote><p>glBlendFunc 指定 源和目标 RGBA值的混合函数;但是glBlendFuncSeparate函数则允许为RGB 和 Alpha 成分单独指定混合函数。<br>在混合因子表中，GL_CONSTANT_COLOR,GL_ONE_MINUS_CONSTANT_COLOR,GL_CONSTANT_ALPHA,GL_ONE_MINUS_CONSTANT值允许混合方程式中引入一个常量混合颜色。</p></blockquote><h4 id="10-4-常量混合颜色"><a href="#10-4-常量混合颜色" class="headerlink" title="10.4 常量混合颜色"></a>10.4 常量混合颜色</h4><p>常量混合颜色，默认初始化为黑色(0.0f,0.0f,0.0f,0.0f)，但是还是可以修改这个常量混合颜色。<br><code>void glBlendColor(GLclampf red ,GLclampf green ,GLclampf blue ,GLclampf alpha );</code></p>]]></content>
      
      <categories>
          
          <category> OpenGL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> OpenGL </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>OpenGL学习 基础渲染(二)</title>
      <link href="/2018/02/07/15244572175577/"/>
      <url>/2018/02/07/15244572175577/</url>
      <content type="html"><![CDATA[<blockquote><p>在OpenGL 3.0之前，OpenGL 包含一个固定功能的管线，它可以在不使用着色器的情况下处理几何与像素数据。在3.1版本开始，固定管线从核心模式去掉。因此现在需要使用着色器来完成工作。<br>使 OpenGL 来说，我们会使 GLSL,(OpenGL Shading Langruage，它是在OpenGL 2.0版本发布的)。 语法与“C、C++”类似。</p></blockquote><h3 id="一、基础图形管线"><a href="#一、基础图形管线" class="headerlink" title="一、基础图形管线"></a>一、基础图形管线</h3><p>OpenGL 中图元只不过是顶点的集合以预定义的方式结合在一起。管线分为:2个部分，上半部分是客户机端，下半部分是服务器端。</p><p>客户端是存储在CPU存储 中的，并且在应用程序中执行 ，或者在主系统内存的驱动程序中执行。驱动程序会将渲染命令和数组组合起来，发送给服务执执 !(在一台典型的个人计算机上，服务器就是实际上就是图形加速卡上的硬件和内存)<br>服务器和 客户机在功能上也是异步的。 它们是各自独力的软件块或硬件块。我们是希望它们2个端都尽量在 不停的工作。客户端不断的把数据块和命令块组合在一起输送到缓冲区，然后缓冲区就会发送到服务器执 。</p><p>如果服务器停止工作等待客户机，或者客户机停止作来等待服务器做好接受更多的命令和准备，我们把这种情况成为管线停滞</p><p><img src="http://p7l9kf5i4.bkt.clouddn.com/2018-04-23-15244572931328.jpg-style01" alt=""></p><h3 id="二、着色器"><a href="#二、着色器" class="headerlink" title="二、着色器"></a>二、着色器</h3><p><strong>渲染过程，必备的两个着色器“顶点着色器”和“片元着色器”。</strong><br>上图的Vertex Shader(顶点着色器) 和 Fragment Shader(片元着色器)<br>着色器是使用GLSL编写的程序，看起来与C语言非常类似。 着色器必须从源代码中编译和链接在一起。最终准备就绪的着色器程序<br>顶点着色器 –&gt;处理从客户机输入的数据、应用变换、进行其他的类型的数学运算来计算关照效果、位移、颜 值等等。(**为了渲染共有3个顶点的三角形，顶点着色器将执 3次，也就是为 了每个顶点执一次)在目前的硬件上有多个执行单元同时运行 ，就意味着所有的3个顶点可以同时进行处理 !</p><p>图上(primitive Assembly 说明的是:3个顶点已经组合在一起， 三角形已经逐个片段的进行光栅化。每个片段通过执片元元着器，进行 填充。 元着器会输出我们将屏幕上看到的最终颜色值。</p><h3 id="三、3种向OpenGL着色器传递渲染数据的方法"><a href="#三、3种向OpenGL着色器传递渲染数据的方法" class="headerlink" title="三、3种向OpenGL着色器传递渲染数据的方法"></a>三、3种向OpenGL着色器传递渲染数据的方法</h3><ul><li>属性</li><li>Uniform</li><li>纹理<h4 id="3-1-属性"><a href="#3-1-属性" class="headerlink" title="3.1 属性"></a>3.1 属性</h4></li></ul><p><strong>属性：就是对一个顶点都要作改变的数据元素。实际上，顶点位置本身就是一个属性。属性可以是浮点类型、整型、布尔类型。</strong></p><p><strong>属性总是以四维向 的形式进行内部存储的，即使我们不会使用所有的4个分量。</strong>一个顶点位置可能存储(x,y,z)，将占有4个分量中的3个。<br>实际上如果是在平面情况下:只要在xy平面上就能绘制，那么Z分量就会自动设置为0;<br>属性还可以是:纹理坐标、颜色值、关照计算表面法线<br>在顶点程序(shader渲染)可以代表你想要的任何意义。因为都是你设定的。<br>属性会从本地客户机内存中复制存储在图形硬件中的一个缓冲区上。这些属性只提供给顶点着 使 ，对于 元着 有太 意义。<br>声明:这些属性对每个顶点都要做改变，但并不意味着它们的值不能重复。通常情况下，它们都是 不一样样的，但有可能整个数组都是同一值的情况。</p><h4 id="3-2-Uniform"><a href="#3-2-Uniform" class="headerlink" title="3.2 Uniform"></a>3.2 Uniform</h4><p><strong>属性是 种对整个批次属性都取统一值的单一值，它是不变的。</strong></p><p><strong>通过设置uniform变量就紧接着发送一个图元批次命令</strong>。Uniform变量实际上可以无限次限制地使用，设置一个应用于整个表面的单个颜色值，还可以设置一个时间值。在每次渲染某种类型的顶点动画时修改它。<br>注意:这 的uniform 变量每个批次改变一次，而不是每个顶点改变一次。<br>uniform变量最常见的应该是在顶点渲染中设置变换矩阵<br>与属性相同点:可以是浮点值、整数、布尔值<br>与属性不同点:顶点着色器和片元着色器都可以用 uniform变量 。uniform 变量还可以是标量类型、 矢量类型、uniform矩阵。</p><h4 id="3-3-纹理"><a href="#3-3-纹理" class="headerlink" title="3.3 纹理"></a>3.3 纹理</h4><p><strong>传递给着器的第三种数据类型:纹理数据</strong></p><p><strong>在顶点着色器、 片段着色器中都可以对纹理数据进行采样和筛选。</strong><br>典型的应用场景: 片段着色器对一个纹理值进行采样，然后在一个三角形表面应用渲染纹理数据。<br>纹理数据， 不仅仅表现在图形，很多图形文件格式都是以无符号字节(每个颜色通道8位)形式对颜分量进行存储的。</p><h4 id="3-4-输出"><a href="#3-4-输出" class="headerlink" title="3.4 输出"></a>3.4 输出</h4><p>输出数据：简单的从一个阶段传递到下一个阶段。<br>客户端的代码接触不到这些内部变量。我们的OpenGL开发暂时接触不到！</p><h3 id="四、创建坐标系"><a href="#四、创建坐标系" class="headerlink" title="四、创建坐标系"></a>四、创建坐标系</h3><h4 id="4-1-正投影"><a href="#4-1-正投影" class="headerlink" title="4.1 正投影"></a>4.1 正投影</h4><p><img src="http://p7l9kf5i4.bkt.clouddn.com/2018-04-23-15244573118476.jpg-style01" alt=""></p><p>这就是一个正投影的 例子，在所在3个轴(X,Y,Z)中，它们的范围都是从-100到+100。这个视景体将包括所有的 几何图形。<br>如果你指定 了视景体外的几何图形，就会被裁减掉!(它将沿着视景体的边界进行剪切)在正投影中，所有在这个空间范围内的所有东西都将被呈现在屏幕上。 存在照相机或视点坐标系的概念。</p><h4 id="4-2透视投影"><a href="#4-2透视投影" class="headerlink" title="4.2透视投影"></a>4.2透视投影</h4><p><code>setPerspective(float ffov,float fAspect,float fNear,float fFar)</code><br><img src="http://p7l9kf5i4.bkt.clouddn.com/2018-04-23-15244573321853.jpg-style01" alt=""></p><p>透视投影会进行透视除法对距离观察者很远的对象进行缩短和收缩。在投影到屏幕之后，视景体背面与视景体正面的宽度测量标准不同。<br>上图所示:平截头体(frustum)的 何体，它的观察方向是从金字塔的尖端到宽阔端。观察者的视点与金字塔的尖端拉开一定距离。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">GLFrustum类通过setPerspective  法为我们构建一个平截头体。</span><br><span class="line">参数:</span><br><span class="line">fFov:垂直方向上的视场角度</span><br><span class="line">fAspect:窗口的宽度与高度的纵横 </span><br><span class="line">fNear:近裁剪面距离</span><br><span class="line">fFar:远裁剪面距离</span><br><span class="line">纵横  = 宽(w)/ (h)</span><br><span class="line"></span><br><span class="line">CLFrustum::SetPerspective(float fFov,float fAspect,float fNear,float fFar);</span><br></pre></td></tr></table></figure><h3 id="五、使用存储着色器"><a href="#五、使用存储着色器" class="headerlink" title="五、使用存储着色器"></a>五、使用存储着色器</h3><h4 id="5-1、使用背景"><a href="#5-1、使用背景" class="headerlink" title="5.1、使用背景"></a>5.1、使用背景</h4><h4 id="5-2存储着色器的使用"><a href="#5-2存储着色器的使用" class="headerlink" title="5.2存储着色器的使用"></a>5.2存储着色器的使用</h4><ul><li>单位着色器</li><li>平面着色器</li><li>上色着色器</li><li>默认光源着色器</li><li>点光源着色器</li><li>纹理替换矩阵</li><li>纹理调整着色器</li><li>纹理光源着色器</li></ul><h4 id="5-3-GLShaderManager-的初始化"><a href="#5-3-GLShaderManager-的初始化" class="headerlink" title="5.3 GLShaderManager 的初始化"></a>5.3 GLShaderManager 的初始化</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">// 定义着色器</span><br><span class="line">GLShaderMananger shaderManager;</span><br><span class="line"></span><br><span class="line">// 初始化着色器</span><br><span class="line">shaderManager.IntalizeStockShaders()</span><br><span class="line"></span><br><span class="line">//使用</span><br><span class="line">shaderManager userStockManager(参数列表)</span><br></pre></td></tr></table></figure><h4 id="5-4-GLShaderManager-属性"><a href="#5-4-GLShaderManager-属性" class="headerlink" title="5.4 GLShaderManager 属性"></a>5.4 GLShaderManager 属性</h4><p><img src="http://p7l9kf5i4.bkt.clouddn.com/2018-04-23-15244573506921.jpg-style01" alt=""></p><p>存储着色器为每一个变量都使用一致的内部变量命名规则和相同的属性槽，以上就是存储着色器的属性列表。</p><h4 id="5-5-GLShanderManager-的-uniform值"><a href="#5-5-GLShanderManager-的-uniform值" class="headerlink" title="5.5 GLShanderManager 的 uniform值"></a>5.5 GLShanderManager 的 uniform值</h4><p>一般情况，要对几何图形进行渲染，我们需要给对象递交属性矩阵， 先要绑定我们想要使用的着色器程序上，并提供程序的uniform值。但是<code>GLShanderManager</code> 类可以暂时为我们完成工作。<br><code>useStockShader</code> 函数会选择一个存储着色器并提供这个着色器的uniform值。</p><p><strong>单位着色器</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">//单位着色器:只是简单地使用默认笛卡尔坐标系(坐标范围(-1.0，1.0))。所有的片段都应用同一种颜色 ，几何图形为心和未渲染的。</span><br><span class="line">//需要设置存储着色器一个属性: GLT_ATTRIBUTE_VERTEX(顶点分量)</span><br><span class="line">//参数2:vColor[4],你需要的颜色</span><br><span class="line"></span><br><span class="line">GLShaderManager::UserStockShader(GLT_ATTRIBUTE_VERTEX,GLfloat vColor[4]);</span><br></pre></td></tr></table></figure><p><strong>平面着色器</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">//参数1:平面着色器 </span><br><span class="line">//参数2:允许变化的4*4矩阵</span><br><span class="line">//参数3:颜色</span><br><span class="line">//它将统一着色器进行了拓展。允许为几何图形变换指定一个 4 * 4 变换矩阵。经常被称为“模型视图投影矩阵”</span><br><span class="line"></span><br><span class="line">GLShaderManager::UserStockShader(GLT_SHADER_FLAT,GLfloat mvp[16],GLfloat vColor[4]);</span><br></pre></td></tr></table></figure><p><strong>上色着器</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">//在几何图形中应用的变换矩阵。</span><br><span class="line">//需要设置存储着色器的 GLT_ATTRIBUTE_VERTEX(顶点分量 ) 和GLT_ATTRIBUTE_COLOR(颜色分量 ) 2个属性。颜色值将被平滑地插入顶点之间(平滑着色 )</span><br><span class="line"></span><br><span class="line">GLShaderManager::UserStockShader(GLT_SHADER_SHADED,GLfloat mvp[16]);</span><br></pre></td></tr></table></figure><p><strong>默认光源着色器</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">//参数1:默认光源着色器  </span><br><span class="line">//参数2:模型视图矩阵</span><br><span class="line">//参数3:投影矩阵</span><br><span class="line">//参数4:颜 值</span><br><span class="line">//这种着色器，是对象产 阴影和关照的效果。需要设置存储着色器的 GLT_ATTRIBUTE_VERTEX(顶点分量) 和GLT_ATTRIBUTE_NORMAL(表面法线)</span><br><span class="line"></span><br><span class="line">GLShaderManager::UserStockShader(GLT_SHADER_DEFAULT_LIGHT,GLfloat mvMatrix[16],GLfloatpMatrix[16],GLfloat vColor[4]);</span><br></pre></td></tr></table></figure><p><strong>点光源着色器</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">//参数1:点光源着色器</span><br><span class="line">//参数2:模型视图矩阵</span><br><span class="line">//参数3:投影矩阵</span><br><span class="line">//参数4:视点坐标光源位置</span><br><span class="line">//参数5:颜色值</span><br><span class="line">//点光源着色器和默认光源着色器很相似，区别在于:光源位置是特定的。同样需要设置存储着色器的 GLT_ATTRIBUTE_VERTEX(顶点分量) 和GLT_ATTRIBUTE_NORMAL(表面法线)</span><br><span class="line"></span><br><span class="line">GLShaderManager::UserStockShader(GLT_SHADER_DEFAULT_LIGHT_DIEF,GLfloatmvMatrix[16],GLfloat pMatrix[16],GLfloat vLightPos[3],GLfloat vColor[4]);</span><br></pre></td></tr></table></figure><p><strong>纹理替换矩阵着色器</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">//着色器通过给定的模型视图投影矩阵，使用绑定到 nTextureUnit (纹 单元) 指定纹理单元的纹理对几何图形进行变化。 段颜 :是直接从纹理样本中直接获取的。</span><br><span class="line">//需要设置存储着色器的 GLT_ATTRIBUTE_VERTEX(顶点分量) 和 GLT_ATTRIBUTE_NORMAL(表面法线)</span><br><span class="line"></span><br><span class="line">GLShaderManager::UserStockShader(GLT_SHADER_TEXTURE_REPLACE,GLfloat mvMatrix[16],GLintnTextureUnit);</span><br></pre></td></tr></table></figure><p><strong>纹理调整着色器</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">//将一个基本色乘以一个取自纹理单元 nTextureUnit 的纹 。需要设置存储着色器的 GLT_ATTRIBUTE_VERTEX(顶点分量) 和 GLT_ATTRIBUTE_TEXTURE0(纹理坐标)</span><br><span class="line"></span><br><span class="line">GLShaderManager::UserStockShader(GLT_SHADER_TEXTURE_MODULATE,GLfloatmvMatrix[16],GLfloat vColor[4],GLint nTextureUnit);</span><br></pre></td></tr></table></figure><p><strong>纹理光源着色器</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">//参数1:纹理光源着色器 </span><br><span class="line">//参数2:投影矩阵</span><br><span class="line">//参数3:视觉空间中的光源位置</span><br><span class="line">//参数4: 何图形的基本色</span><br><span class="line">//参数5:将要使用的纹理单元</span><br><span class="line">//将一个纹理通过漫反射照明计算机进行调整(相乘)。光线在视觉空间中的位置是给定的。</span><br><span class="line">//需要设置存储着色器的 GLT_ATTRIBUTE_VERTEX(顶点分量) 和 GLT_ATTRIBUTE_TEXTURE0(纹理坐标)、GLT_ATTRIBUTE_NORMAL(表面法线)</span><br><span class="line"></span><br><span class="line">GLShaderManager::UserStockShader(GLT_SHADER_TEXTURE_POINT_LIGHT_DIEF,GLfloatmvMatrix[16],GLfloat pMatrix[16],GLfloat vLightPos[3],GLfloat vBaseColor[4],GLint nTextureUnit);</span><br></pre></td></tr></table></figure><h3 id="六、OpenGL图元"><a href="#六、OpenGL图元" class="headerlink" title="六、OpenGL图元"></a>六、OpenGL图元</h3><ul><li>点</li><li>线</li><li>线带</li><li>线环</li><li>三角形</li><li>三角形金字塔</li><li>三角形带</li><li>三角形扇</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">//修改点的大小</span><br><span class="line">glPointSize(4.0f);</span><br><span class="line">//设置点的大小范围，点和点之间的距离</span><br><span class="line">GLfloat sizes[2] = &#123;2.0f,4.0f&#125;;</span><br><span class="line">GLfloat stepSize = 1.0f;</span><br><span class="line">//获取点的大小范围和步长glGetFloatv(GL_POINT_SIZE_RANGE,sizes);</span><br><span class="line">glGetFloatv(GL_POINT_GRAULRITY,&amp;stepSize);</span><br><span class="line">//3.通过使用程序点大小模式设置点大小</span><br><span class="line">glEnable(GL_PROGAM_POINT_SIZE);</span><br><span class="line">//GLSL程序</span><br><span class="line">gl_PointSize = 5.0f;</span><br></pre></td></tr></table></figure><h3 id="七、GLBatch容器-帮助类"><a href="#七、GLBatch容器-帮助类" class="headerlink" title="七、GLBatch容器(帮助类)"></a>七、GLBatch容器(帮助类)</h3><p><img src="http://p7l9kf5i4.bkt.clouddn.com/2018-04-23-15244573753588.jpg-style01" alt=""></p><p><img src="http://p7l9kf5i4.bkt.clouddn.com/2018-04-23-15244573813628.jpg-style01" alt=""></p>]]></content>
      
      <categories>
          
          <category> OpenGL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> OpenGL </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>OpenGL学习 在Mac上搭建OpenGL环境(一)</title>
      <link href="/2018/02/05/15244567239248/"/>
      <url>/2018/02/05/15244567239248/</url>
      <content type="html"><![CDATA[<p>一、准备资源</p><ol><li>CLTools</li><li>glew</li><li>libGLTools.a</li><li>百度云盘资源地址：链接: <a href="https://pan.baidu.com/s/1ebesf8" target="_blank" rel="noopener">https://pan.baidu.com/s/1ebesf8</a> 密码: g99g</li></ol><p>二、现在开始配置 openGL 环境</p><p>1、打开Xcode -&gt; macOS -&gt; Cocoa Application</p><p><img src="http://p7l9kf5i4.bkt.clouddn.com/2018-04-23-15244560096062.jpg-style01" alt=""></p><p>2、选中Build Phases, 选择 Link Binary With Libraries ,点击 +  搜索添加 OpenGl.framework 和 GLUT.framework 两个系统库.</p><p><img src="http://p7l9kf5i4.bkt.clouddn.com/2018-04-23-15244567872134.jpg-style01" alt=""></p><p>3、把下载好的 include 和 libGLTools.a 拖入到项目里面，选中 Copy item if needed 和 Create groups<br><img src="http://p7l9kf5i4.bkt.clouddn.com/2018-04-23-15244560540915.jpg-style01" alt=""></p><p><img src="http://p7l9kf5i4.bkt.clouddn.com/2018-04-23-15244560749630.jpg-style01" alt=""></p><p>4、然后点击 Build Settings, 选则All ，找到 Header Search Paths, 把你拖到项目里的 include 文件夹路径 拖到里面。<br>把libGLTools.a 文件拖到Framework 里面<br><img src="http://p7l9kf5i4.bkt.clouddn.com/2018-04-23-15244560944363.jpg-style01" alt=""></p><p>5、接着把 AppDelegate.h, AppDelegate.m,ViewController.h,ViewControllers.m 文件删除掉<br><img src="http://p7l9kf5i4.bkt.clouddn.com/2018-04-23-15244561074509.jpg-style01" alt=""><br>OpenGL006.jpeg</p><p>6、添加新的文件，选择 C++ File ,Name 设置为main，并且不要勾选下面的 also create a header file,点击Next ,生成main.cpp文件<br><img src="http://p7l9kf5i4.bkt.clouddn.com/2018-04-23-15244561195444.jpg-style01" alt=""><br><img src="http://p7l9kf5i4.bkt.clouddn.com/2018-04-23-15244561298591.jpg-style01" alt=""></p><p>7、然后把main.m 文件删除掉。<br><img src="http://p7l9kf5i4.bkt.clouddn.com/2018-04-23-15244561437251.jpg-style01" alt=""></p><p>8、把下面的代码复制到 main.cpp 里面，然后把项目跑起来 Run B<img src="http://p7l9kf5i4.bkt.clouddn.com/2018-04-23-15244561563956.jpg-style01" alt=""><br>OpenGL010.jpeg</p><p>三、注意事项与报错处理</p><p>如果报下面的错误<br>ld: library not found for -lGLTools<br>clang: error: linker command failed with exit code 1 (use -v to see invocation)<br><img src="http://p7l9kf5i4.bkt.clouddn.com/2018-04-23-15244561673939.jpg-style01" alt=""></p><p>选择General 下面 的林科大Frameworks and Libraries<br>选中 libGLTools.a 点击下面的 一 删除掉，然后点击 + , 选择 Add Other,然后找到你项目里面的 libGLTools.a，选中并点击 open，重新 Run Build 就好了。<br><img src="http://p7l9kf5i4.bkt.clouddn.com/2018-04-23-15244561986179.jpg-style01" alt=""><br><img src="http://p7l9kf5i4.bkt.clouddn.com/2018-04-23-15244562088552.jpg-style01" alt=""><br><img src="http://p7l9kf5i4.bkt.clouddn.com/2018-04-23-15244562198692.jpg-style01" alt=""></p><p>注意 ：新建的main.cpp 文件里面 必须要有 main 函数，不然直接build 会报错</p>]]></content>
      
      <categories>
          
          <category> OpenGL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> OpenGL </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>iOS 开发 CADisplayLink 定时器的了解与使用</title>
      <link href="/2017/09/19/iOS%E5%BC%80%E5%8F%91CADisplayLink-%E5%AE%9A%E6%97%B6%E5%99%A8%E7%9A%84%E4%BA%86%E8%A7%A3%E4%B8%8E%E4%BD%BF%E7%94%A8/"/>
      <url>/2017/09/19/iOS%E5%BC%80%E5%8F%91CADisplayLink-%E5%AE%9A%E6%97%B6%E5%99%A8%E7%9A%84%E4%BA%86%E8%A7%A3%E4%B8%8E%E4%BD%BF%E7%94%A8/</url>
      <content type="html"><![CDATA[<h3 id="一、简介"><a href="#一、简介" class="headerlink" title="一、简介"></a>一、简介</h3><h4 id="1、所在框架"><a href="#1、所在框架" class="headerlink" title="1、所在框架"></a>1、所在框架</h4><p><code>CADisplayLink</code>和其它<code>CoreAnimation</code>类一样，都是在QuartzCore.framework里。</p><p><strong>1.1什么是<code>CADisplayLink</code>?</strong></p><p><strong><code>CADisplayLink</code>是一个能让我们以和屏幕刷新率相同的频率将内容画到屏幕上的定时器。我们在应用中创建一个新的 <code>CADisplayLink</code> 对象，把它添加到一个runloop中，并给它提供一个 target 和selector 在屏幕刷新的时候调用。</strong></p><p>一但 <code>CADisplayLink</code> 以特定的模式注册到runloop之后，每当屏幕需要刷新的时候，runloop就会调用<code>CADisplayLink</code>绑定的target上的selector，这时target可以读到 <code>CADisplayLink</code> 的每次调用的时间戳，用来准备下一帧显示需要的数据。例如一个视频应用使用时间戳来计算下一帧要显示的视频数据。在UI做动画的过程中，需要通过时间戳来计算UI对象在动画的下一帧要更新的大小等等。</p><p>在添加进runloop的时候我们应该选用高一些的优先级，来保证动画的平滑。可以设想一下，我们在动画的过程中，runloop被添加进来了一个高优先级的任务，那么，下一次的调用就会被暂停转而先去执行高优先级的任务，然后在接着执行<code>CADisplayLink</code>的调用，从而造成动画过程的卡顿，使动画不流畅。</p><p><code>duration</code>属性提供了每帧之间的时间，也就是屏幕每次刷新之间的的时间。我们可以使用这个时间来计算出下一帧要显示的UI的数值。但是 <code>duration</code>只是个大概的时间，如果CPU忙于其它计算，就没法保证以相同的频率执行屏幕的绘制操作，这样会跳过几次调用回调方法的机会。<br><code>frameInterval</code>属性是可读可写的NSInteger型值，标识间隔多少帧调用一次selector 方法，默认值是1，即每帧都调用一次。如果每帧都调用一次的话，对于iOS设备来说那刷新频率就是60HZ也就是每秒60次，如果将 frameInterval 设为2 那么就会两帧调用一次，也就是变成了每秒刷新30次。</p><p>我们通过pause属性开控制<code>CADisplayLink</code>的运行。当我们想结束一个<code>CADisplayLink</code>的时候，应该调用-(void)invalidate<br>从runloop中删除并删除之前绑定的 target跟selector<br>另外<code>CADisplayLink</code> 不能被继承。</p><h4 id="2、功能"><a href="#2、功能" class="headerlink" title="2、功能"></a>2、功能</h4><p><code>CADisplayLink</code>最主要的特征是能提供一个周期性的调用我们赋给它的selector的机制，从这点上看它很像定时器NSTimer。</p><h4 id="3、使用方式"><a href="#3、使用方式" class="headerlink" title="3、使用方式"></a>3、使用方式</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">- (void)startDisplayLink  </span><br><span class="line">&#123;  </span><br><span class="line">    self.displayLink = [`CADisplayLink`     displayLinkWithTarget:self selector:@selector(handleDisplayLink:)];  </span><br><span class="line">    [self.displayLink addToRunLoop:[NSRunLoop currentRunLoop] forMode:NSDefaultRunLoopMode];  </span><br><span class="line">&#125;  </span><br><span class="line"></span><br><span class="line">- (void)handleDisplayLink:(`CADisplayLink` *)displayLink  </span><br><span class="line">&#123;  </span><br><span class="line">      //do something  </span><br><span class="line">&#125;  </span><br><span class="line"></span><br><span class="line">- (void)stopDisplayLink  </span><br><span class="line">&#123;  </span><br><span class="line">    [self.displayLink invalidate];  </span><br><span class="line">    self.displayLink = nil;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当把<code>CADisplayLink</code>对象add到runloop中后，selector就能被周期性调用，类似于NSTimer被启动了；执行invalidate操作时，<code>CADisplayLink</code>对象就会从runloop中移除，selector调用也随即停止，类似于NSTimer的invalidate方法。</p><p><code>CADisplayLink</code> 与 NSTimer 有什么不同</p><p>iOS设备的屏幕刷新频率是固定的，<code>CADisplayLink</code>在正常情况下会在每次刷新结束都被调用，精确度相当高。<br>NSTimer的精确度就显得低了点，比如NSTimer的触发时间到的时候，runloop如果在阻塞状态，触发时间就会推迟到下一个runloop周期。并且 NSTimer新增了tolerance属性，让用户可以设置可以容忍的触发的时间的延迟范围。<br><code>CADisplayLink</code>使用场合相对专一，适合做UI的不停重绘，比如自定义动画引擎或者视频播放的渲染。NSTimer的使用范围要广泛的多，各种需要单次或者循环定时处理的任务都可以使用。在UI相关的动画或者显示内容使用 <code>CADisplayLink</code>比起用NSTimer的好处就是我们不需要在格外关心屏幕的刷新频率了，因为它本身就是跟屏幕刷新同步的。</p><h3 id="二、特性"><a href="#二、特性" class="headerlink" title="二、特性"></a>二、特性</h3><p>下面结合<code>NSTimer</code>来介绍<code>CADisplayLink</code>，与NSTimer不同的地方有：</p><h4 id="1、原理不同"><a href="#1、原理不同" class="headerlink" title="1、原理不同"></a>1、原理不同</h4><p><code>CADisplayLink</code>是一个能让我们以和屏幕刷新率同步的频率将特定的内容画到屏幕上的定时器类。<code>CADisplayLink</code>以特定模式注册到runloop后，每当屏幕显示内容刷新结束的时候，runloop就会向<code>CADisplayLink</code>指定的target发送一次指定的selector消息， <code>CADisplayLink</code>类对应的selector就会被调用一次。<br>NSTimer以指定的模式注册到runloop后，每当设定的周期时间到达后，runloop会向指定的target发送一次指定的selector消息。</p><h4 id="2、周期设置方式不同"><a href="#2、周期设置方式不同" class="headerlink" title="2、周期设置方式不同"></a>2、周期设置方式不同</h4><p>iOS设备的屏幕刷新频率(FPS)是60Hz，因此<code>CADisplayLink</code>的selector默认调用周期是每秒60次，这个周期可以通过frameInterval属性设置，<code>CADisplayLink</code>的selector每秒调用次数=60/frameInterval。比如当frameInterval设为2，每秒调用就变成30次。因此，<code>CADisplayLink</code>周期的设置方式略显不便。<br>NSTimer的selector调用周期可以在初始化时直接设定，相对就灵活的多。</p><h4 id="3、精确度不同"><a href="#3、精确度不同" class="headerlink" title="3、精确度不同"></a>3、精确度不同</h4><p>iOS设备的屏幕刷新频率是固定的，<code>CADisplayLink</code>在正常情况下会在每次刷新结束都被调用，精确度相当高。<br>NSTimer的精确度就显得低了点，比如<code>NSTimer</code>的触发时间到的时候，runloop如果在忙于别的调用，触发时间就会推迟到下一个runloop周期。更有甚者，在OS X v10.9以后为了尽量避免在<code>NSTimer</code>触发时间到了而去中断当前处理的任务，NSTimer新增了tolerance属性，让用户可以设置可以容忍的触发的时间范围。</p><h4 id="4、使用场合"><a href="#4、使用场合" class="headerlink" title="4、使用场合"></a>4、使用场合</h4><p>从原理上不难看出，<code>CADisplayLink</code>使用场合相对专一，适合做界面的不停重绘，比如视频播放的时候需要不停地获取下一帧用于界面渲染。<br>NSTimer的使用范围要广泛的多，各种需要单次或者循环定时处理的任务都可以使用。</p><h3 id="三、重要属性"><a href="#三、重要属性" class="headerlink" title="三、重要属性"></a>三、重要属性</h3><p>下面不完整的列出了<code>CADisplayLink</code>的几个重要属性：</p><h4 id="1、frameInterval"><a href="#1、frameInterval" class="headerlink" title="1、frameInterval"></a>1、frameInterval</h4><p>可读可写的<code>NSInteger</code>型值，标识间隔多少帧调用一次<code>selector</code>方法，默认值是1，即每帧都调用一次。官方文档中强调，当该值被设定小于1时，结果是不可预知的。</p><h4 id="2、duration"><a href="#2、duration" class="headerlink" title="2、duration"></a>2、duration</h4><p>只读的<code>CFTimeInterval</code>值，表示两次屏幕刷新之间的时间间隔。需要注意的是，该属性在<code>target</code>的<code>selector</code>被首次调用以后才会被赋值。<code>selector</code>的调用间隔时间计算方式是：时间=duration×frameInterval。<br>现存的iOS设备屏幕的FPS都是60Hz，这一点可以从<code>CADisplayLink</code>的<code>duration</code>属性看出来。duration的值都是0.166666…，即1/60。尽管如此，我们并没法确定苹果不会改变FPS，如果以后某一天将FPS提升到了120Hz了怎么办呢？这时，你设置了<code>frameInterval</code>属性值为2期望每秒刷新30次，却发现每秒刷新了60次，结果可想而知，出于安全考虑，还是先根据<code>duration</code>判断屏幕的FPS再去使用<code>CADisplayLink</code>。</p><h4 id="3、timestamp"><a href="#3、timestamp" class="headerlink" title="3、timestamp"></a>3、timestamp</h4><p>只读的<code>CFTimeInterval</code>值，表示屏幕显示的上一帧的时间戳，这个属性通常被target用来计算下一帧中应该显示的内容。</p><p>虽然名为时间戳，但这和常见的unix时间戳差异很大，事实上这是<code>CoreAnimation</code>使用的时间格式。每个CALayer都有一个本地时间（CALayer本地时间的具体作用会在后续文章中说明），可以获取当前CALayer的本地时间并打印：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">CFTimeInterval localLayerTime = [myLayer convertTime:CACurrentMediaTime() fromLayer:nil];  </span><br><span class="line">NSLog(@&quot;localLayerTime:%f&quot;,localLayerTime);</span><br></pre></td></tr></table></figure><h3 id="四、注意"><a href="#四、注意" class="headerlink" title="四、注意"></a>四、注意</h3><p>iOS并不能保证能以每秒60次的频率调用回调方法，这取决于：</p><h4 id="1、CPU的空闲程度"><a href="#1、CPU的空闲程度" class="headerlink" title="1、CPU的空闲程度"></a>1、CPU的空闲程度</h4><p>如果CPU忙于其它计算，就没法保证以60HZ执行屏幕的绘制动作，导致跳过若干次调用回调方法的机会，跳过次数取决CPU的忙碌程度。</p><h4 id="2、执行回调方法所用的时间"><a href="#2、执行回调方法所用的时间" class="headerlink" title="2、执行回调方法所用的时间"></a>2、执行回调方法所用的时间</h4><p>如果执行回调时间大于重绘每帧的间隔时间，就会导致跳过若干次回调调用机会，这取决于执行时间长短。</p><h4 id="3-通常来讲"><a href="#3-通常来讲" class="headerlink" title="3.通常来讲"></a>3.通常来讲</h4><p>iOS设备的刷新频率事60HZ也就是每秒60次。那么每一次刷新的时间就是1/60秒 大概16.7毫秒。当我们的<code>frameInterval</code>值为1的时候我们需要保证的是 <code>CADisplayLink</code>调用的｀target｀的函数计算时间不应该大于 16.7否则就会出现严重的丢帧现象。</p><h3 id="五、参考文档"><a href="#五、参考文档" class="headerlink" title="五、参考文档"></a>五、参考文档</h3><h5 id="1、官方文档"><a href="#1、官方文档" class="headerlink" title="1、官方文档"></a>1、官方文档</h5><h5 id="2、官方使用CADisplayLink播放视频的例子"><a href="#2、官方使用CADisplayLink播放视频的例子" class="headerlink" title="2、官方使用CADisplayLink播放视频的例子"></a>2、官方使用<code>CADisplayLink</code>播放视频的例子</h5>]]></content>
      
      <categories>
          
          <category> iOS 开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> iOS 开发 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>FMDB 数据库简单基本操作</title>
      <link href="/2017/06/27/FMDB-%E6%95%B0%E6%8D%AE%E5%BA%93%E7%AE%80%E5%8D%95%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/"/>
      <url>/2017/06/27/FMDB-%E6%95%B0%E6%8D%AE%E5%BA%93%E7%AE%80%E5%8D%95%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/</url>
      <content type="html"><![CDATA[<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">1.创建表: create table if not exists 表名 (字段名1, 字段名2…); 例如：创建 t_student 表 id（id自增长）</span><br><span class="line"></span><br><span class="line">create table if not exists t_student (id integer primary key autoincrement, name text not null, age integer)</span><br><span class="line">2.增加数据: insert into 表名 (字段名1, 字段名2, …) values(字段1的值, 字段2的值, …); 例如：在 t_student 表插入name，age字段</span><br><span class="line"></span><br><span class="line">insert into t_student (name,age) values (@”Jack”,@17);</span><br><span class="line">3.1根据条件删除数据： delete from 表名 where 条件; 例如：</span><br><span class="line">删除 t_student 表中 name 字段为 Jack 的数据</span><br><span class="line"></span><br><span class="line">delete from t_student where name = @”Jack”;</span><br><span class="line">3.2删除表中所有的数据： delete from 表名； 例如：</span><br><span class="line"></span><br><span class="line">delete from t_student;</span><br><span class="line">4.根据条件更改某个数据 update 表名 set 字段1 = ‘值1’, 字段2 = ‘值2’ where 字段1 = ‘字段1的当前值’ 例如：</span><br><span class="line"></span><br><span class="line">update t_student set name = ‘lily’, age = ‘16’ where name = ‘Jack’</span><br><span class="line">5.1根据条件查找 select from 表名 where 字段1 = ‘字段1的值’ 例如：</span><br><span class="line"></span><br><span class="line">select from t_student where age = ‘16’</span><br><span class="line">5.2查找所有数据 select from 表名 例如：</span><br><span class="line"></span><br><span class="line">select from t_student</span><br><span class="line">5.3排序查找： select from 表名 order by 字段 例如：</span><br><span class="line"></span><br><span class="line">select from t_student order by age asc （升序，默认）</span><br><span class="line">select * from t_student order by age desc （降序） 3.</span><br><span class="line">6.删除表： drop table 表名 例如：</span><br><span class="line"></span><br><span class="line">drop table t_student</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> FMDB </category>
          
      </categories>
      
      
        <tags>
            
            <tag> FMDB </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>iOS开发权限设置</title>
      <link href="/2017/05/05/iOS%E5%BC%80%E5%8F%91%E6%9D%83%E9%99%90%E8%AE%BE%E7%BD%AE/"/>
      <url>/2017/05/05/iOS%E5%BC%80%E5%8F%91%E6%9D%83%E9%99%90%E8%AE%BE%E7%BD%AE/</url>
      <content type="html"><![CDATA[<p>iOS 8.0之后调用系统的API需要配置相关的配置信息才能正常使用</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 相册 --&gt;</span><br><span class="line">&lt;key&gt;NSPhotoLibraryUsageDescription&lt;/key&gt;</span><br><span class="line">&lt;string&gt;App需要您的同意,才能访问相册&lt;/string&gt;</span><br><span class="line">&lt;!-- 相机 --&gt;</span><br><span class="line">&lt;key&gt;NSCameraUsageDescription&lt;/key&gt;</span><br><span class="line">&lt;string&gt;App需要您的同意,才能访问相机&lt;/string&gt;</span><br><span class="line">&lt;!-- 麦克风 --&gt;</span><br><span class="line">&lt;key&gt;NSMicrophoneUsageDescription&lt;/key&gt;</span><br><span class="line">&lt;string&gt;App需要您的同意,才能访问麦克风&lt;/string&gt;</span><br><span class="line">&lt;!-- 位置 --&gt;</span><br><span class="line">&lt;key&gt;NSLocationUsageDescription&lt;/key&gt;</span><br><span class="line">&lt;string&gt;App需要您的同意,才能访问位置&lt;/string&gt;</span><br><span class="line">&lt;!-- 在使用期间访问位置 --&gt;</span><br><span class="line">&lt;key&gt;NSLocationWhenInUseUsageDescription&lt;/key&gt;</span><br><span class="line">&lt;string&gt;App需要您的同意,才能在使用期间访问位置&lt;/string&gt;</span><br><span class="line">&lt;!-- 始终访问位置 --&gt;</span><br><span class="line">&lt;key&gt;NSLocationAlwaysUsageDescription&lt;/key&gt;</span><br><span class="line">&lt;string&gt;App需要您的同意,才能始终访问位置&lt;/string&gt;</span><br><span class="line">&lt;!-- 日历 --&gt;</span><br><span class="line">&lt;key&gt;NSCalendarsUsageDescription&lt;/key&gt;</span><br><span class="line">&lt;string&gt;App需要您的同意,才能访问日历&lt;/string&gt;</span><br><span class="line">&lt;!-- 提醒事项 --&gt;</span><br><span class="line">&lt;key&gt;NSRemindersUsageDescription&lt;/key&gt;</span><br><span class="line">&lt;string&gt;App需要您的同意,才能访问提醒事项&lt;/string&gt;</span><br><span class="line">&lt;!-- 运动与健身 --&gt;</span><br><span class="line">&lt;key&gt;NSMotionUsageDescription&lt;/key&gt;</span><br><span class="line">&lt;string&gt;App需要您的同意,才能访问运动与健身&lt;/string&gt;</span><br><span class="line">&lt;!-- 健康更新 --&gt;</span><br><span class="line">&lt;key&gt;NSHealthUpdateUsageDescription&lt;/key&gt;</span><br><span class="line">&lt;string&gt;App需要您的同意,才能访问健康更新 &lt;/string&gt;</span><br><span class="line">&lt;!-- 健康分享 --&gt;</span><br><span class="line">&lt;key&gt;NSHealthShareUsageDescription&lt;/key&gt;</span><br><span class="line">&lt;string&gt;App需要您的同意,才能访问健康分享&lt;/string&gt;</span><br><span class="line">&lt;!-- 蓝牙 --&gt;</span><br><span class="line">&lt;key&gt;NSBluetoothPeripheralUsageDescription&lt;/key&gt;</span><br><span class="line">&lt;string&gt;App需要您的同意,才能访问蓝牙&lt;/string&gt;</span><br><span class="line">&lt;!-- 媒体资料库 --&gt;</span><br><span class="line">&lt;key&gt;NSAppleMusicUsageDescription&lt;/key&gt;</span><br><span class="line">&lt;string&gt;App需要您的同意,才能访问媒体资料库&lt;/string&gt;</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> iOS 开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> iOS 开发 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>iOS 开发 UITableViewCell的重用机制</title>
      <link href="/2017/04/16/iOS%E5%BC%80%E5%8F%91UITableViewCell%E7%9A%84%E9%87%8D%E7%94%A8%E6%9C%BA%E5%88%B6/"/>
      <url>/2017/04/16/iOS%E5%BC%80%E5%8F%91UITableViewCell%E7%9A%84%E9%87%8D%E7%94%A8%E6%9C%BA%E5%88%B6/</url>
      <content type="html"><![CDATA[<p>首先,我们要明白我们为什么需要使用这种机制,其次,这种机制的原理是什么.<br>我们先举个例子来说明.一个UITableView中有许多需要显示的cell,但是我们不可能每个都会浏览到,那么如果我们把这些数据全部都加载进去,是不是造成了内存的负担呢.</p><p>我们所能显示的区域通常只有一个屏幕的大小,那么那些屏幕之外的信息是不需要一次性全都加载完的,只有当我们滑动屏幕需要浏览的时候,我们才需要它加载进来.因此,就有了我们要介绍的这部分内容,UITabelViewCell的重用机制.</p><p>重用机制实现了数据和显示的分离,并不为每个数据创建一个UITableViewCell,我们只创建屏幕可显示的最大的cell个数+1,然后去循环重复使用这些cell,既节省空间,又达到我们需要显示的效果.<br>这种机制下系统默认有一个可变数组NSMutableArray<em> visiableCells,用来保存当前显示的cell.一个可变字典NSMutableDictnery</em> reusableTableCells,用来保存可重复利用的cell.(之所以用字典是因为可重用的cell有不止一种样式,我们需要根据它的reuseIdentifier,也就是所谓的重用标示符来查找是否有可重用的该样式的cell).</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">// 设置单元格  indexPath :单元格当前所在位置 -- 哪个分区哪一行等</span><br><span class="line">- (UITableViewCell *)tableView:(UITableView *)tableView cellForRowAtIndexPath:(NSIndexPath *)indexPath //UITableViewDataSource</span><br><span class="line">&#123;</span><br><span class="line">    static NSString *identifier = @&quot;cell&quot; ;</span><br><span class="line">    //相当于从集合中找寻完全出屏幕的单元格.</span><br><span class="line">    // identifier : 因为一个表视图中可能存在多种样式的单元格,咱们把相同样式的单元格放到同一个集合里面,为这个集合加标示符,当我们需要用到某种样式的单元格的时候,根据不同的标示符,从不同的集合中找寻单元格.</span><br><span class="line">    UITableViewCell *cell = [tableView dequeueReusableCellWithIdentifier:identifier] ;</span><br><span class="line">    // 如果从集合中未找到单元格,也就是集合中还没有单元格,也就是还没有单元格出屏幕,那么我们就需要创建单元格</span><br><span class="line">    if (!cell)</span><br><span class="line">    &#123;</span><br><span class="line">        // 创建cell的时候需要标示符(Identifier)是因为,当该cell出屏幕的时候需要根据标示符放到对应的集合中.</span><br><span class="line">        cell = [[UITableViewCell alloc] initWithStyle:UITableViewCellStyleSubtitle reuseIdentifier:@&quot;cell&quot;] ;</span><br><span class="line">    return cell ;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">系统第一次执行</span><br><span class="line">- (UITableViewCell *)tableView:(UITableView *)tableView cellForRowAtIndexPath:(NSIndexPath *)indexPath</span><br><span class="line">这个方法的时候, reusableTableCells为空,</span><br><span class="line">[tableView dequeueReusableCellWithIdentifier:identifier]</span><br><span class="line">的返回值为nil,我们需要通过</span><br><span class="line">[[UITableViewCell alloc] initWithStyle:UITableViewCellStyleSubtitle reuseIdentifier: identifier]</span><br><span class="line">方式来创建.</span><br></pre></td></tr></table></figure><blockquote><p>当我们的数据过多,整个屏幕的cell显示不完全时,这个方法的执行情况是 :</p></blockquote><blockquote><p>(1) 先执行<br><code>[[UITableViewCell alloc] initWithStyle:UITableViewCellStyleSubtitle reuseIdentifier: identifier]</code><br>创建整个屏幕能显示的cell数+1的cell(当我们拖动UITableView的时候,第一个cell没有移出屏幕,最下面的cell就已经存在),并指定相同或者不同的标示符identifier.把创建出的屏幕能显示的cell全部都加入到visiableCells数组中(最后一个创建的先不加入数组)，reusableTableCells为空.</p></blockquote><blockquote><p>(2)当我们拖动屏幕时,顶端的cell移出屏幕并加入到reusableTableCells字典中,键为identifier ,并把之前已经创建的但是没有加入到visiableCells的cell加入到visiableCells数组中.</p></blockquote><blockquote><p>(3)当我们接着拖动的时候,因为reusableTableCells中已经有值，所以，当需要显示新的cell，cellForRowAtIndexPath再次被调用，执行[tableView dequeueReusableCellWithIdentifier: identifier]，返回一个标示符为identifier的cell。该cell移出reusableTableCells之后加入到visiableCells；顶端的cell移出visiableCells并加入到reusableTableCells.如果visiableCells数组中没有找到identifier类型的cell,则再次重新alloc一个.</p></blockquote><p>在iOS6之后系统加入了一种单元格注册的方法.<br><code>[self.tableView registerClass:[UITableViewCell class] forCellReuseIdentifier: identifier];</code></p><blockquote><p>这个方法的作用是,当我们从重用队列中取cell的时候,如果没有,系统会帮我们创建我们给定类型的cell,如果有,则直接重用. 这种方式cell的样式为系统默认样式.</p></blockquote><p>在设置cell的方法中只需要:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">- (UITableViewCell *)tableView:(UITableView *)tableView cellForRowAtIndexPath:(NSIndexPath *)indexPath</span><br><span class="line">&#123;</span><br><span class="line">    // 重用队列中取单元格 由于上面已经注册过单元格,系统会帮我们做判断,不用再次手动判断单元格是否存在</span><br><span class="line">    UITableViewCell *cell = [tableView dequeueReusableCellWithIdentifier: identifier forIndexPath:indexPath] ;</span><br><span class="line">    return cell ;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> iOS 开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> iOS 开发 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>iOS 开发 APP的生命周期和UIViewController的生命周期</title>
      <link href="/2017/03/12/iOS%E5%BC%80%E5%8F%91%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/"/>
      <url>/2017/03/12/iOS%E5%BC%80%E5%8F%91%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/</url>
      <content type="html"><![CDATA[<h3 id="一-iOS程序的启动执行顺序"><a href="#一-iOS程序的启动执行顺序" class="headerlink" title="一. iOS程序的启动执行顺序"></a>一. iOS程序的启动执行顺序</h3><h4 id="1-具体执行流程"><a href="#1-具体执行流程" class="headerlink" title="1.具体执行流程"></a>1.具体执行流程</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">程序入口</span><br><span class="line">进入main函数，设置AppDelegate称为函数的代理</span><br><span class="line"></span><br><span class="line">程序完成加载</span><br><span class="line"></span><br><span class="line">[AppDelegate application:didFinishLaunchingWithOptions:]</span><br><span class="line"></span><br><span class="line">创建window窗口</span><br><span class="line"></span><br><span class="line">程序被激活</span><br><span class="line"></span><br><span class="line">[AppDelegate applicationDidBecomeActive:]</span><br><span class="line"></span><br><span class="line">当点击command+H时(针对模拟器,手机是当点击home键)</span><br><span class="line">程序取消激活状态</span><br><span class="line"></span><br><span class="line">[AppDelegate applicationWillResignActive:];</span><br><span class="line"></span><br><span class="line">程序进入后台</span><br><span class="line"></span><br><span class="line">[AppDelegate applicationDidEnterBackground:];</span><br><span class="line"></span><br><span class="line">点击进入工程</span><br><span class="line">程序进入前台</span><br><span class="line"></span><br><span class="line">[AppDelegate applicationWillEnterForeground:]</span><br><span class="line"></span><br><span class="line">程序被激活</span><br><span class="line"></span><br><span class="line">[AppDelegate applicationDidBecomeActive:];</span><br></pre></td></tr></table></figure><h4 id="2-分析"><a href="#2-分析" class="headerlink" title="2.分析"></a>2.分析</h4><blockquote><p>对于applicationWillResignActive(非活动)与applicationDidEnterBackground(后台)这两个的区别。<br>applicationWillResignActive(非活动):<br>比如当有电话进来或短信进来或锁屏等情况下，这时应用程序挂起进入非活动状态，也就是手机界面还是显示着你当前的应用程序的窗口，只不过被别的任务强制占用了，也可能是即将进入后台状态(因为要先进入非活动状态然后进入后台状态)</p></blockquote><blockquote><p>applicationDidEnterBackground(后台):<br>指当前窗口不是你的App,大多数程序进入这个后台会在这个状态上停留一会，时间到之后会进入挂起状态(Suspended)。如果你程序特殊处理后可以长期处于后台状态也可以运行。<br>Suspended (挂起): 程序在后台不能执行代码。系统会自动把程序变成这个状态而且不会发出通知。当挂起时，程序还是停留在内存中的，当系统内存低时，系统就把挂起的程序清除掉，为前台程序提供更多的内存。</p></blockquote><p>###二. UIViewController 的 生命周期</p><p>当一个视图控制器被创建，并在屏幕上显示的时候。 代码的执行顺序</p><p>1、 alloc 创建对象，分配空间</p><p>2、init (initWithNibName) 初始化对象，初始化数据</p><p>3、loadView 从nib载入视图 ，通常这一步不需要去干涉。除非你没有使用xib文件创建视图</p><p>4、viewDidLoad 载入完成，可以进行自定义数据以及动态创建其他控件</p><p>5、viewWillAppear 视图将出现在屏幕之前，马上这个视图就会被展现在屏幕上了</p><p>6、viewDidAppear 视图已在屏幕上渲染完成<br>当一个视图被移除屏幕并且销毁的时候的执行顺序，这个顺序差不多和上面的相反</p><p>1、viewWillDisappear 视图将被从屏幕上移除之前执行</p><p>2、viewDidDisappear 视图已经被从屏幕上移除，用户看不到这个视图了</p><p>3、dealloc 视图被销毁，此处需要对你在init和viewDidLoad中创建的对象进行释放</p><blockquote><p>关于viewDidUnload ：在发生内存警告的时候如果本视图不是当前屏幕上正在显示的视图的话， viewDidUnload将会被执行，本视图的所有子视图将被销毁，以释放内存,此时开发者需要手动对viewLoad、viewDidLoad中创建的对象释放内存。 因为当这个视图再次显示在屏幕上的时候，viewLoad、viewDidLoad 再次被调用，以便再次构造视图。</p></blockquote><p>当我们创建一个UIViewController类的对象时，通常系统会生成几个默认的方法，这些方法大多与视图的调用有关，但是在视图调用时，这些方法的调用顺序如何，需要整理下。<br>通常上述方法包括如下几种，这些方法都是UIViewController类的方法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">- (void)viewDidLoad；</span><br><span class="line"></span><br><span class="line">- (void)viewDidUnload；</span><br><span class="line"> </span><br><span class="line">- (void)viewWillAppear:(BOOL)animated；</span><br><span class="line"> </span><br><span class="line">- (void)viewDidAppear:(BOOL)animated；</span><br><span class="line"> </span><br><span class="line">- (void)viewWillDisappear:(BOOL)animated；</span><br><span class="line"> </span><br><span class="line">- (void)viewDidDisappear:(BOOL)animated；</span><br></pre></td></tr></table></figure><p>下面介绍下APP在运行时的调用顺序。</p><p>1）- (void)viewDidLoad；</p><p>一个APP在载入时会先通过调用loadView方法或者载入IB中创建的初始界面的方法，将视图载入到内存中。然后会调用viewDidLoad方法来进行进一步的设置。通常，我们对于各种初始数据的载入，初始设定等很多内容，都会在这个方法中实现，所以这个方法是一个很常用，很重要的方法。</p><p>但是要注意，这个方法只会在APP刚开始加载的时候调用一次，以后都不会再调用它了，所以只能用来做初始设置。</p><p>2) - (void)viewDidUnload;</p><p>在内存足够的情况下，软件的视图通常会一直保存在内存中，但是如果内存不够，一些没有正在显示的viewcontroller就会收到内存不够的警告，然后就会释放自己拥有的视图，以达到释放内存的目的。但是系统只会释放内存，并不会释放对象的所有权，所以通常我们需要在这里将不需要在内存中保留的对象释放所有权，也就是将其指针置为nil。</p><p>这个方法通常并不会在视图变换的时候被调用，而只会在系统退出或者收到内存警告的时候才会被调用。但是由于我们需要保证在收到内存警告的时候能够对其作出反应，所以这个方法通常我们都需要去实现。</p><p>另外，即使在设备上按了Home键之后，系统也不一定会调用这个方法，因为IOS4之后，系统允许将APP在后台挂起，并将其继续滞留在内存中，因此，viewcontroller并不会调用这个方法来清除内存。</p><p>3）- (void)viewWillAppear:(BOOL)animated;</p><p>系统在载入所有数据后，将会在屏幕上显示视图，这时会先调用这个方法。通常我们会利用这个方法，对即将显示的视图做进一步的设置。例如，我们可以利用这个方法来设置设备不同方向时该如何显示。</p><p>另外一方面，当APP有多个视图时，在视图间切换时，并不会再次载入viewDidLoad方法，所以如果在调入视图时，需要对数据做更新，就只能在这个方法内实现了。所以这个方法也非常常用。</p><p>4) - (void)viewDidAppear:(BOOL)animated；</p><p>有时候，由于一些特殊的原因，我们不能在viewWillApper方法里，对视图进行更新。那么可以重写这个方法，在这里对正在显示的视图进行进一步的设置。</p><p>5) - (void)viewWillDisappear:(BOOL)animated；</p><p>在视图变换时，当前视图在即将被移除、或者被覆盖时，会调用这个方法进行一些善后的处理和设置。</p><p>由于在IOS4之后，系统允许将APP在后台挂起，所以在按了Home键之后，系统并不会调用这个方法，因为就这个APP本身而言，APP显示的view，仍是挂起时候的view，所以并不会调用这个方法。</p><p>6) - (void)viewDidDisappear:(BOOL)animated；</p><p>我们可以重写这个方法，对已经消失，或者被覆盖，或者已经隐藏了的视图做一些其他操作。</p><p>上述方法的流程图可以简单用如下表示：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">运行APP —&gt; 载入视图 —&gt; 调用viewDidLoad方法 —&gt; 调用viewWillAppear方法 —&gt; 调用viewDidAppear方法 —&gt; 正常运行 —&gt;</span><br><span class="line"></span><br><span class="line">…………..</span><br><span class="line"></span><br><span class="line">—&gt;释放对象所有权 &lt;— 调用viewDidUnload &lt;— 收到内存警告 &lt;— 调用viewDidDisappear &lt;— 调用viewWillDisappear &lt;— APP需要调用另一个view</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> iOS 开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> iOS 开发 </tag>
            
        </tags>
      
    </entry>
    
  
  
</search>
